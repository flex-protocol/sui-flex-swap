aggregates:
  TokenPair:
    metadata:
      IS_MOVE_SCHEMA_VERSIONED: true
      ShouldIssuePublisherObject: true
      TypeParameterOffChainPropertyNameFormats:
        X: "{0}_TokenType"
        Y: "{0}_TokenType"
    id:
      name: Id
      type: UID
    typeParameters:
      X:
        isPhantom: true
        keyable: true
        storable: true
      Y:
        isPhantom: true
    properties:
      X_Reserve:
        type: "ObjectTable<ID, X>"
      X_Amounts:
        type: "Table<ID, u64>"
      X_TotalAmount:
        type: u64
      Y_Reserve:
        type: "Balance<Y>"
      TotalLiquidity:
        type: u64
      LiquidityTokenId:
        type: ID
    methods:
      InitializeLiquidity:
        isInternal: true
        isCreationCommand: true
        #requiredPermission: "__Publisher__"
        typeParameters:
          X: {}
          Y: {}
        objectTypeArguments:
          X: X
          Y: Y
        parameters:
          Exchange:
            referenceType: Exchange
            isMutableReference: true
            eventPropertyName: ExchangeId
          X:
            type: X
          X_Amount:
            type: u64
          Y_Amount:
            type: Balance<Y>
        event:
          name: LiquidityInitialized
          isObjectShared: true # Share the object after created.
          properties:
            Provider:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            X_Amount:
              type: u64
            Y_Amount:
              type: u64
            LiquidityAmount:
              type: u64
            LiquidityTokenId:
              type: ID #ObjectID
            X_Id:
              type: ID

      AddLiquidity:
        isInternal: true
        #shouldCallByReference: true
        typeParameters:
          X: {}
          Y: {}
        objectTypeArguments:
          X: X
          Y: Y
        parameters:
          LiquidityToken:
            referenceType: LiquidityToken<X, Y>
            eventPropertyName: LiquidityTokenId
          X:
            type: X
          X_Amount:
            type: u64
          Y_Amount:
            type: Balance<Y>
          #ExpectedLiquidity:
          #  type: u64
          #  description: "The expected amount of added liquidity should not be less than this."
        event:
          name: LiquidityAdded
          properties:
            Provider:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            X_Amount:
              type: u64
            Y_Amount:
              type: u64
            LiquidityAmount:
              type: u64
            LiquidityTokenId:
              type: ID #ObjectID
            X_Id:
              type: ID

      RemoveLiquidity:
        typeParameters:
          X: {}
          Y: {}
        objectTypeArguments:
          X: X
          Y: Y
        parameters:
          LiquidityToken:
            referenceType: LiquidityToken<X, Y>
            eventPropertyName: LiquidityTokenId
          X_Id:
            type: ID
        result:
          tupleItems:
            - type: X
            - type: Balance<Y>
        event:
          name: LiquidityRemoved
          properties:
            Provider:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            X_Amount:
              type: u64
            Y_Amount:
              type: u64
            LiquidityAmount:
              type: u64
            LiquidityTokenId:
              type: ID #ObjectID

      Destroy:
        isDeletionCommand: true
        typeParameters:
          X: {}
          Y: {}
        objectTypeArguments:
          X: X
          Y: Y
        parameters:
          LiquidityToken:
            referenceType: LiquidityToken<X, Y>
            eventPropertyName: LiquidityTokenId
        event:
          name: TokenPairDestroyed
          properties:
            LiquidityTokenId:
              type: ID #ObjectID

      SwapX:
        isInternal: true
        typeParameters:
          X: {}
          Y: {}
        objectTypeArguments:
          X: X
          Y: Y
        parameters:
          X:
            type: X
          X_Amount:
            type: u64
          ExpectedY_AmountOut:
            type: u64
        result:
          type: Balance<Y>
        event:
          name: XSwappedForY
          properties:
            Sender:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            X_Amount:
              type: u64
            Y_Amount:
              type: u64
            X_Id:
              type: ID

      SwapY:
        typeParameters:
          X: {}
          Y: {}
        objectTypeArguments:
          X: X
          Y: Y
        parameters:
          Y_Amount:
            type: Balance<Y>
          X_Id:
            type: ID
        result:
          type: X
        event:
          name: YSwappedForX
          properties:
            Sender:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            X_Amount:
              type: u64
            Y_Amount:
              type: u64

  LiquidityToken:
    metadata:
      HasStoreAbility: true
      Preprocessors:
        - MOVE_CRUD_IT
      CRUD_IT_NO_UPDATE: true
      CRUD_IT_CREATE_METHOD_NAME: Mint
      CRUD_IT_DELETE_METHOD_NAME: Destroy
      MOVE_NO_VERSION_PROPERTY: true
      #IS_MOVE_SCHEMA_VERSIONED: true
      #ShouldIssuePublisherObject: true
      TypeParameterOffChainPropertyNameFormats:
        X: "{0}_TokenType"
        Y: "{0}_TokenType"
    friends:
      - TokenPair.InitializeLiquidity
      - TokenPair.AddLiquidity
      - TokenPair.RemoveLiquidity
    typeParameters:
      X:
        isPhantom: true
        keyable: true
        storable: true
      Y:
        isPhantom: true
    id:
      name: Id
      type: UID
    properties:
      #X_TokenType:
      #  type: String
      #Amount:
      #  type: u64
    methods:
      Mint:
        isInternal: true
        result:
          isObjectReturned: true
        event:
          name: LiquidityTokenMinted
          #isObjectFrozen: true
          #properties:
          #  Owner:
          #    isOwner: true # Transfer the object to the account address indicated by this property
      Destroy:
        isInternal: true
        event:
          name: LiquidityTokenDestroyed
          #properties:
          #  Amount:
          #    type: u64
#      Split:
#        typeParameters:
#          Y: {}
#        objectTypeArguments:
#          Y: Y
#        parameters:
#          Amount:
#            type: u64
#        result:
#          type: LiquidityToken<Y>
#        event:
#          name: LiquidityTokenSplit

singletonObjects:
  Exchange:
    friends: [ "TokenPair.InitializeLiquidity" ]
    metadata:
      #Preprocessors: [ "MOVE_CRUD_IT" ]
      #CRUD_IT_NO_UPDATE: true
      #CRUD_IT_NO_DELETE: true
      IS_MOVE_SCHEMA_VERSIONED: true
    properties:
      Name:
        type: String
        length: 200
        defaultLogic:
          Move:
            'std::string::utf8(b"sui-dddappp-dex")'
      TokenPairs:
        itemType: ID #ObjectID
        isList: true
      TokenPairX_TokenTypes:
        itemType: String
        isList: true
      TokenPairY_TokenTypes:
        itemType: String
        isList: true

    methods:
      "__Init__":
        event:
          isObjectShared: true # Share the object after initialization.

      AddTokenPair:
        isInternal: true
        #shouldCallByReference: true
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          TokenPairId:
            type: ID #ObjectID
          #X_TokenType:
          #  type: String
        event:
          name: TokenPairAddedToExchange
          properties:
            X_TokenType:
              type: String
            Y_TokenType:
              type: String

      Update:
        requiredPermission: AdminCap
        parameters:
          Name:
            type: String
        event:
          name: ExchangeUpdated

services:
  TokenPairService:
    methods:
      RemoveLiquidity:
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          TokenPair:
            referenceType: TokenPair<X, Y>
            isMutableReference: true
          LiquidityToken:
            referenceType: LiquidityToken<X, Y>
          X_Id:
            type: ID
          Y_Coin:
            referenceType: Coin<Y>
            isMutableReference: true
          #Amount:
          #  type: u64
          #  description: Support removing partial liquidity.

      SwapY:
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          TokenPair:
            referenceType: TokenPair<X, Y>
            isMutableReference: true
          Y_Coin:
            type: Coin<Y>
          Y_Amount:
            type: u64
          X_Id:
            type: ID
          #ExpectedX_AmountOut:
          #  type: u64

  TokenPairServiceProcess:
    requiredComponents:
      NS:
        type: NftService
    methods:
      InitializeLiquidity:
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          #Publisher:
          #  referenceType: "sui::package::Publisher"
          Exchange:
            referenceType: Exchange
            isMutableReference: true
          #X_Coin:
          #  type: Coin<X>
          #X_Amount:
          #  type: u64
          X:
            type: X
          Y_Coin:
            type: Coin<Y>
          Y_Amount:
            type: u64
        steps:
          GetX_Amount:
            invokeParticipant: "NS.GetAmount"
            arguments:
              X: "X"
            exportVariable: X_Amount
          InvokeInternal:
            expression:
              Move:
                "//todo invoke internal fun..."

      AddLiquidity:
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          TokenPair:
            referenceType: TokenPair<X, Y>
            isMutableReference: true
          LiquidityToken:
            referenceType: LiquidityToken<X, Y>
          #X_Coin:
          #  type: Coin<X>
          #X_Amount:
          #  type: u64
          X:
            type: X
          Y_Coin:
            type: Coin<Y>
          Y_Amount:
            type: u64
          #ExpectedLiquidity:
          #  type: u64
        steps:
          GetX_Amount:
            invokeParticipant: "NS.GetAmount"
            arguments:
              X: "X"
            exportVariable: X_Amount
          InvokeInternal:
            expression:
              Move:
                "//todo invoke internal fun..."

      SwapX:
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          TokenPair:
            referenceType: TokenPair<X, Y>
            isMutableReference: true
          X:
            type: X
          Y_Coin:
            referenceType: Coin<Y>
            isMutableReference: true
          ExpectedY_AmountOut:
            type: u64
        steps:
          GetX_Amount:
            invokeParticipant: "NS.GetAmount"
            arguments:
              X: "X"
            exportVariable: X_Amount
          InvokeInternal:
            expression:
              Move:
                "//todo invoke internal fun..."

  NftService:
    abstract: true
    metadata:
      MoveExternalConfiguration: "NftServiceConfig"
    methods:
      GetAmount:
        typeParameters:
          X:
            keyable: true
            storable: true
        parameters:
          X:
            referenceType: X
        result:
          type: u64


#typeDefinitions:
#  Movescription:
#    moveType: "smartinscription::movescription::Movescription"
#    isResource: true
#    dataStruct:
#      properties:
#        Id:
#          type: UID
#        Amount:
#          type: u64
#        Tick:
#          type: AsciiString
#        AttachCoin:
#          type: u64
#        Acc:
#          type: Balance<SUI>
#        Metadata:
#          type: MovescriptionMetadata
#          optional: true
#
#  MovescriptionMetadata:
#    moveType: "smartinscription::movescription::Metadata"
#    isResource: false
#    dataStruct:
#      properties:
#        ContentType:
#            type: String
#        Content:
#            type: vector<u8>
