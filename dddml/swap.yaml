aggregates:
  TokenPair:
    metadata:
      IS_MOVE_SCHEMA_VERSIONED: true
      ShouldIssuePublisherObject: true
      TypeParameterOffChainPropertyNameFormats:
        X: "{0}_TokenType"
        Y: "{0}_TokenType"
    id:
      name: Id
      type: UID
    typeParameters:
      X:
        isPhantom: true
      Y:
        isPhantom: true
    properties:
      X_Reserve:
        type: "Balance<X>"
      Y_Reserve:
        type: "Balance<Y>"
      TotalLiquidity:
        type: u64
      FeeNumerator:
        type: u64
        defaultLogic:
          Move:
            '3'
      FeeDenominator:
        type: u64
        defaultLogic:
          Move:
            '1000'

    methods:
      InitializeLiquidity:
        isCreationCommand: true
        requiredPermission: "__Publisher__"
        typeParameters:
          X: {}
          Y: {}
        objectTypeArguments:
          X: X
          Y: Y
        parameters:
          Exchange:
            referenceType: Exchange
            isMutableReference: true
            eventPropertyName: ExchangeId
          X_Amount:
            type: Balance<X>
          Y_Amount:
            type: Balance<Y>
        event:
          name: LiquidityInitialized
          isObjectShared: true # Share the object after created.
          properties:
            Provider:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            X_Amount:
              type: u64
            Y_Amount:
              type: u64
            LiquidityAmount:
              type: u64
            LiquidityTokenId:
              type: ID #ObjectID

      UpdateFeeRate:
        requiredPermission: AdminCap
        metadata:
          NO_MOVE_EVENT_MODULE: true
        typeParameters:
          X: {}
          Y: {}
        objectTypeArguments:
          X: X
          Y: Y
        parameters:
          FeeNumerator:
            type: u64
          FeeDenominator:
            type: u64
        event:
          name: FeeRateUpdated

      AddLiquidity:
        #shouldCallByReference: true
        typeParameters:
          X: {}
          Y: {}
        objectTypeArguments:
          X: X
          Y: Y
        parameters:
          X_Amount:
            type: Balance<X>
          Y_Amount:
            type: Balance<Y>
        event:
          name: LiquidityAdded
          properties:
            Provider:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            X_Amount:
              type: u64
            Y_Amount:
              type: u64
            LiquidityAmount:
              type: u64
            LiquidityTokenId:
              type: ID #ObjectID

      RemoveLiquidity:
        typeParameters:
          X: {}
          Y: {}
        objectTypeArguments:
          X: X
          Y: Y
        parameters:
          LiquidityToken:
            type: LiquidityToken<X, Y>
            #eventPropertyName: LiquidityTokenId
        result:
          type: (Balance<X>, Balance<Y>)
        event:
          name: LiquidityRemoved
          properties:
            LiquidityAmount:
              type: u64
            LiquidityTokenId:
              type: ID #ObjectID
            Provider:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            X_Amount:
              type: u64
            Y_Amount:
              type: u64

      SwapX:
        typeParameters:
          X: {}
          Y: {}
        objectTypeArguments:
          X: X
          Y: Y
        parameters:
          X_Amount:
            type: Balance<X>
          ExpectedY_AmountOut:
            type: u64
        result:
          type: Balance<Y>
        event:
          name: XSwappedForY
          properties:
            Sender:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            X_Amount:
              type: u64
            Y_Amount:
              type: u64

      SwapY:
        typeParameters:
          X: {}
          Y: {}
        objectTypeArguments:
          X: X
          Y: Y
        parameters:
          Y_Amount:
            type: Balance<Y>
          ExpectedX_AmountOut:
            type: u64
        result:
          type: Balance<X>
        event:
          name: YSwappedForX
          properties:
            Sender:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            X_Amount:
              type: u64
            Y_Amount:
              type: u64

  LiquidityToken:
    metadata:
      HasStoreAbility: true
      Preprocessors:
        - MOVE_CRUD_IT
      CRUD_IT_NO_UPDATE: true
      CRUD_IT_CREATE_METHOD_NAME: Mint
      CRUD_IT_DELETE_METHOD_NAME: Destroy
      MOVE_NO_VERSION_PROPERTY: true
      #IS_MOVE_SCHEMA_VERSIONED: true
      ShouldIssuePublisherObject: true
      TypeParameterOffChainPropertyNameFormats:
        X: "{0}_TokenType"
        Y: "{0}_TokenType"
    friends:
      - TokenPair.InitializeLiquidity
      - TokenPair.AddLiquidity
      - TokenPair.RemoveLiquidity
    typeParameters:
      X:
        isPhantom: true
      Y:
        isPhantom: true
    id:
      name: Id
      type: UID
    properties:
      Amount:
        type: u64
    methods:
      Mint:
        isInternal: true
        result:
          isObjectReturned: true
        event:
          name: LiquidityTokenMinted
          #isObjectFrozen: true
          #properties:
          #  Owner:
          #    isOwner: true # Transfer the object to the account address indicated by this property
      Destroy:
        isInternal: true
        event:
          name: LiquidityTokenDestroyed
          properties:
            Amount:
              type: u64

singletonObjects:
  Exchange:
    friends: [ "TokenPair.InitializeLiquidity" ]
    metadata:
      #Preprocessors: [ "MOVE_CRUD_IT" ]
      #CRUD_IT_NO_UPDATE: true
      #CRUD_IT_NO_DELETE: true
      IS_MOVE_SCHEMA_VERSIONED: true
    properties:
      Name:
        type: String
        length: 200
        defaultLogic:
          Move:
            'std::string::utf8(b"sui-dddappp-dex")'
      TokenPairs:
        itemType: ID #ObjectID
        isList: true
      X_TokenTypes:
        itemType: String
        isList: true
      Y_TokenTypes:
        itemType: String
        isList: true

    methods:
      "__Init__":
        event:
          isObjectShared: true # Share the object after initialization.

      AddTokenPair:
        isInternal: true
        #shouldCallByReference: true
        typeParameters:
          X: {}
          Y: {}
        parameters:
          TokenPairId:
            type: ID #ObjectID
        event:
          name: TokenPairAddedToExchange
          properties:
            X_TokenType:
              type: String
            Y_TokenType:
              type: String

      Update:
        requiredPermission: AdminCap
        parameters:
          Name:
            type: String
        event:
          name: ExchangeUpdated

services:
  TokenPairService:
    methods:
      InitializeLiquidity:
        typeParameters:
          X: {}
          Y: {}
        parameters:
          Publisher:
            referenceType: "sui::package::Publisher"
          Exchange:
            referenceType: Exchange
            isMutableReference: true
          X_Coin:
            type: Coin<X>
          X_Amount:
            type: u64
          Y_Coin:
            type: Coin<Y>
          Y_Amount:
            type: u64

      AddLiquidity:
        typeParameters:
          X: {}
          Y: {}
        objectTypeArguments:
          X: X
          Y: Y
        parameters:
          TokenPair:
            referenceType: TokenPair<X, Y>
            isMutableReference: true
          X_Coin:
            type: Coin<X>
          X_Amount:
            type: u64
          Y_Coin:
            type: Coin<Y>
          Y_Amount:
            type: u64

      RemoveLiquidity:
        typeParameters:
          X: {}
          Y: {}
        parameters:
          TokenPair:
            referenceType: TokenPair<X, Y>
            isMutableReference: true
          LiquidityToken:
            type: LiquidityToken<X, Y>
          X_Coin:
            referenceType: Coin<X>
            isMutableReference: true
          Y_Coin:
            referenceType: Coin<Y>
            isMutableReference: true

      SwapX:
        typeParameters:
          X: {}
          Y: {}
        parameters:
          TokenPair:
            referenceType: TokenPair<X, Y>
            isMutableReference: true
          X_Coin:
            type: Coin<X>
          X_Amount:
            type: u64
          Y_Coin:
            referenceType: Coin<Y>
            isMutableReference: true
          ExpectedY_AmountOut:
            type: u64

      SwapY:
        typeParameters:
          X: {}
          Y: {}
        parameters:
          TokenPair:
            referenceType: TokenPair<X, Y>
            isMutableReference: true
          Y_Coin:
            type: Coin<Y>
          Y_Amount:
            type: u64
          X_Coin:
            referenceType: Coin<X>
            isMutableReference: true
          ExpectedX_AmountOut:
            type: u64
