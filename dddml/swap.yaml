aggregates:
  TokenPair:
    metadata:
      IS_MOVE_SCHEMA_VERSIONED: true
      ShouldIssuePublisherObject: true
      TypeParameterOffChainPropertyNameFormats:
        X: "{0}_TokenType"
        Y: "{0}_TokenType"
    id:
      name: Id
      type: UID
    typeParameters:
      X:
        isPhantom: true
        keyable: true
        storable: true
        persistenceType: JsonObject
      Y:
        isPhantom: true
    properties:
      X_Reserve:
        type: "ObjectTable<ID, X>"
      X_Amounts:
        type: "Table<ID, u64>"
      X_TotalAmount:
        type: u64
      Y_Reserve:
        type: "Balance<Y>"
      TotalLiquidity:
        type: u64
      LiquidityTokenId:
        type: ID
      FeeNumerator:
        type: u64
      FeeDenominator:
        type: u64
    methods:
      InitializeLiquidity:
        isInternal: true
        isCreationCommand: true
        #requiredPermission: "__Publisher__"
        typeParameters:
          X: {}
          Y: {}
        objectTypeArguments:
          X: X
          Y: Y
        parameters:
          Exchange:
            referenceType: Exchange
            isMutableReference: true
            eventPropertyName: ExchangeId
          X:
            type: X
          X_Amount:
            type: u64
          Y_Amount:
            type: Balance<Y>
          FeeNumerator:
            type: u64
          FeeDenominator:
            type: u64
        result:
          isObjectReturned: true
          type: LiquidityToken<X, Y>
          name: LiquidityToken
        event:
          name: LiquidityInitialized
          isObjectShared: true # Share the object after created.
          properties:
            Provider:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            X_Amount:
              type: u64
            Y_Amount:
              type: u64
            LiquidityAmount:
              type: u64
            LiquidityTokenId:
              type: ID #ObjectID
              optional: true
            X_Id:
              type: ID

      AddLiquidity:
        isInternal: true
        #shouldCallByReference: true
        typeParameters:
          X: {}
          Y: {}
        objectTypeArguments:
          X: X
          Y: Y
        parameters:
          LiquidityToken:
            referenceType: LiquidityToken<X, Y>
            eventPropertyName: LiquidityTokenId
          X:
            type: X
          X_Amount:
            type: u64
          Y_Amount:
            type: Balance<Y>
          #ExpectedLiquidity:
          #  type: u64
          #  description: "The expected amount of added liquidity should not be less than this."
        event:
          name: LiquidityAdded
          properties:
            Provider:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            X_Amount:
              type: u64
            Y_Amount:
              type: u64
            LiquidityAmount:
              type: u64
            LiquidityTokenId:
              type: ID #ObjectID
            X_Id:
              type: ID

      RemoveLiquidity:
        typeParameters:
          X: {}
          Y: {}
        objectTypeArguments:
          X: X
          Y: Y
        parameters:
          LiquidityToken:
            referenceType: LiquidityToken<X, Y>
            eventPropertyName: LiquidityTokenId
          X_Id:
            type: ID
        result:
          tupleItems:
            - type: X
            - type: Balance<Y>
        event:
          name: LiquidityRemoved
          properties:
            Provider:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            X_Amount:
              type: u64
            Y_Amount:
              type: u64
            LiquidityAmount:
              type: u64
            LiquidityTokenId:
              type: ID #ObjectID

      Destroy:
        metadata:
          NO_MOVE_EVENT_MODULE: true
        isDeletionCommand: true
        typeParameters:
          X: {}
          Y: {}
        objectTypeArguments:
          X: X
          Y: Y
        parameters:
          LiquidityToken:
            referenceType: LiquidityToken<X, Y>
            eventPropertyName: LiquidityTokenId
        event:
          name: TokenPairDestroyed
          properties:
            LiquidityTokenId:
              type: ID #ObjectID

      SwapX:
        metadata:
          NO_MOVE_EVENT_MODULE: true
        isInternal: true
        typeParameters:
          X: {}
          Y: {}
        objectTypeArguments:
          X: X
          Y: Y
        parameters:
          X:
            type: X
          X_Amount:
            type: u64
          ExpectedY_AmountOut:
            type: u64
        result:
          type: Balance<Y>
        event:
          name: XSwappedForY
          properties:
            Sender:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            X_Amount:
              type: u64
            Y_Amount:
              type: u64
            X_Id:
              type: ID

      SwapY:
        metadata:
          NO_MOVE_EVENT_MODULE: true
        typeParameters:
          X: {}
          Y: {}
        objectTypeArguments:
          X: X
          Y: Y
        parameters:
          Y_Amount:
            type: Balance<Y>
          X_Id:
            type: ID
        result:
          type: X
        event:
          name: YSwappedForX
          properties:
            Sender:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            X_Amount:
              type: u64
            Y_Amount:
              type: u64

      UpdateFeeRate:
        metadata:
          NO_MOVE_EVENT_MODULE: true
        typeParameters:
          X: {}
          Y: {}
        objectTypeArguments:
          X: X
          Y: Y
        parameters:
          LiquidityToken:
            referenceType: LiquidityToken<X, Y>
            eventPropertyName: LiquidityTokenId
          FeeNumerator:
            type: u64
          FeeDenominator:
            type: u64
        event:
          name: FeeRateUpdated
          properties:
            LiquidityTokenId:
              type: ID #ObjectID

  TradePool:
    metadata:
      IS_MOVE_SCHEMA_VERSIONED: true
      ShouldIssuePublisherObject: true
      TypeParameterOffChainPropertyNameFormats:
        X: "{0}_TokenType"
        Y: "{0}_TokenType"
    implements:
      - SellOrBuyPool
    id:
      name: Id
      type: UID
    properties:
      PoolType:
        type: PoolType
        description: "0: Trade pool; 1: Sell; 2: Buy"
    methods:
      InitializeTradePool:
        isInternal: true
        isCreationCommand: true
        #requiredPermission: "__Publisher__"
        #typeParameters:
        #  X: {}
        #  Y: {}
        #objectTypeArguments:
        #  X: X
        #  Y: Y
        #implements:
        #  - SellOrBuyPool.Initialize
        parameters:
          Exchange:
            referenceType: Exchange
            isMutableReference: true
            eventPropertyName: ExchangeId
          X:
            type: X
          X_Amount:
            type: u64
          Y_Amount:
            type: Balance<Y>
          ExchangeRateNumerator:
            type: u64
          ExchangeRateDenominator:
            type: u64
          PriceCurveType:
            type: u8
          PriceDeltaX_Amount:
            type: u64
          PriceDeltaNumerator:
            type: u64
          PriceDeltaDenominator:
            type: u64
        result:
          isObjectReturned: true
          type: LiquidityToken<X, Y>
          name: LiquidityToken
        event:
          name: TradePoolInitialized
          isObjectShared: true # Share the object after created.
          properties:
            Provider:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            X_Amount:
              type: u64
            Y_Amount:
              type: u64
            LiquidityTokenId:
              type: ID #ObjectID
              optional: true
            X_Id:
              type: ID

      InitializeSellPool:
        isInternal: true
        isCreationCommand: true
        parameters:
          Exchange:
            referenceType: Exchange
            isMutableReference: true
            eventPropertyName: ExchangeId
          X:
            type: X
          X_Amount:
            type: u64
          ExchangeRateNumerator:
            type: u64
          ExchangeRateDenominator:
            type: u64
          PriceCurveType:
            type: u8
          PriceDeltaX_Amount:
            type: u64
          PriceDeltaNumerator:
            type: u64
          PriceDeltaDenominator:
            type: u64
        result:
          isObjectReturned: true
          type: LiquidityToken<X, Y>
          name: LiquidityToken
        event:
          name: SellPoolInitialized
          isObjectShared: true # Share the object after created.
          properties:
            Provider:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            X_Amount:
              type: u64
            LiquidityTokenId:
              type: ID #ObjectID
              optional: true
            X_Id:
              type: ID

      InitializeBuyPool:
        #isInternal: true
        isCreationCommand: true
        #requiredPermission: "__Publisher__"
        parameters:
          Exchange:
            referenceType: Exchange
            isMutableReference: true
            eventPropertyName: ExchangeId
          Y_Amount:
            type: Balance<Y>
          ExchangeRateNumerator:
            type: u64
          ExchangeRateDenominator:
            type: u64
          PriceCurveType:
            type: u8
          PriceDeltaX_Amount:
            type: u64
          PriceDeltaNumerator:
            type: u64
          PriceDeltaDenominator:
            type: u64
        result:
          isObjectReturned: true
          type: LiquidityToken<X, Y>
          name: LiquidityToken
        event:
          name: BuyPoolInitialized
          isObjectShared: true # Share the object after created.
          properties:
            Provider:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            Y_Amount:
              type: u64
            LiquidityTokenId:
              type: ID #ObjectID
              optional: true
            #X_Id:
            #  type: ID

      UpdateExchangeRate:
        metadata:
          NO_MOVE_EVENT_MODULE: true
        event:
          name: PoolExchangeRateUpdated

      AddXToken:
        event:
          name: PoolXTokenAdded

      RemoveXToken:
        event:
          name: PoolXTokenRemoved

      DepositYReserve:
        event:
          name: PoolYReserveDeposited

      WithdrawYReserve:
        event:
          name: PoolYReserveWithdrawn

      Destroy:
        metadata:
          NO_MOVE_EVENT_MODULE: true
        isDeletionCommand: true
        event:
          name: PoolDestroyed

      BuyX:
        description: "Buy X token from pool. i.e. swap Y for X"
        metadata:
          NO_MOVE_EVENT_MODULE: true
        parameters:
          Y_Amount:
            type: Balance<Y>
          X_Id:
            type: ID
        result:
          type: X
        event:
          name: PoolYSwappedForX
          properties:
            Sender:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            X_Amount:
              type: u64
            Y_Amount:
              type: u64
            NewExchangeRateNumerator:
              type: u64

      SellX:
        description: "Sell X token to pool. i.e. swap X for Y"
        metadata:
          NO_MOVE_EVENT_MODULE: true
        isInternal: true
        parameters:
          X:
            type: X
          X_Amount:
            type: u64
          ExpectedY_AmountOut:
            type: u64
        result:
          type: Balance<Y>
        event:
          name: PoolXSwappedForY
          properties:
            Sender:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            X_Amount:
              type: u64
            Y_Amount:
              type: u64
            X_Id:
              type: ID
            NewExchangeRateNumerator:
              type: u64

  LiquidityToken:
    metadata:
      HasStoreAbility: true
      Preprocessors:
        - MOVE_CRUD_IT
      CRUD_IT_NO_UPDATE: true
      CRUD_IT_CREATE_METHOD_NAME: Mint
      CRUD_IT_DELETE_METHOD_NAME: Destroy
      MOVE_NO_VERSION_PROPERTY: true
      #IS_MOVE_SCHEMA_VERSIONED: true
      #ShouldIssuePublisherObject: true
      TypeParameterOffChainPropertyNameFormats:
        X: "{0}_TokenType"
        Y: "{0}_TokenType"
    friends:
      - TokenPair.InitializeLiquidity
      - TradePool.InitializeTradePool
      - TradePool.InitializeSellPool
      - TradePool.InitializeBuyPool
      #- TokenPair.AddLiquidity
      #- TokenPair.RemoveLiquidity
    typeParameters:
      X:
        isPhantom: true
        keyable: true
        storable: true
      Y:
        isPhantom: true
    id:
      name: Id
      type: UID
    properties:
      #X_TokenType:
      #  type: String
      #Amount:
      #  type: u64
    methods:
      Mint:
        metadata:
          NO_MOVE_EVENT_MODULE: true
        isInternal: true
        result:
          isObjectReturned: true
        event:
          name: LiquidityTokenMinted
          #isObjectFrozen: true
          #properties:
          #  Owner:
          #    isOwner: true # Transfer the object to the account address indicated by this property
      Destroy:
        metadata:
          NO_MOVE_EVENT_MODULE: true
        isInternal: true
        event:
          name: LiquidityTokenDestroyed
          #properties:
          #  Amount:
          #    type: u64
#      Split:
#        typeParameters:
#          Y: {}
#        objectTypeArguments:
#          Y: Y
#        parameters:
#          Amount:
#            type: u64
#        result:
#          type: LiquidityToken<Y>
#        event:
#          name: LiquidityTokenSplit

  NftCollection:
    id:
      name: CollectionType
      type: String
      length: 500
    noSurrogateId: true
    properties:
      Name:
        type: String
        length: 200
      ImageUrl:
        type: String
        length: 500
      DiPackageId:
        type: ID
      DiBuyPoolServiceModuleName:
        type: String
        length: 200
      DiSellPoolServiceModuleName:
        type: String
        length: 200
      DiTradePoolServiceModuleName:
        type: String
      BasicUnitAmount:
        type: u64
      AmountFieldName:
        type: String
        length: 200
      SubtypeFieldName:
        type: String
        length: 200
      Subtypes:
        itemType: NftCollectionSubtype
    entities:
      NftCollectionSubtype:
        id:
          name: Name
          type: String
          length: 200
        properties:
          SubtypeValue:
            type: String
            length: 200
          ImageUrl:
            type: String
            length: 500

singletonObjects:
  Exchange:
    friends:
      - TokenPair.InitializeLiquidity
      - TradePool.InitializeTradePool
      - TradePool.InitializeSellPool
      - TradePool.InitializeBuyPool
    metadata:
      #Preprocessors: [ "MOVE_CRUD_IT" ]
      #CRUD_IT_NO_UPDATE: true
      #CRUD_IT_NO_DELETE: true
      IS_MOVE_SCHEMA_VERSIONED: true
      # If IS_MOVE_SCHEMA_VERSIONED is true, an "AdminCap" object is created and transferred to tx. sender when init().
      # MoveAdminCapabilityName: "AdminCap" # It's the default name.
    properties:
      Name:
        type: String
        length: 200
        defaultLogic:
          Move:
            'std::string::utf8(b"sui-dddappp-dex")'
      TokenPairs:
        itemType: ID #ObjectID
        isList: true
        tableName: exchange_token_pair_id
      TokenPairX_TokenTypes:
        itemType: String
        isList: true
        tableName: exchange_token_pair_x_token_type
      TokenPairY_TokenTypes:
        itemType: String
        isList: true
        tableName: exchange_token_pair_y_token_type
      TradePools:
        itemType: ID #ObjectID
        isList: true
        tableName: exchange_trade_pool_id
      TradePoolX_TokenTypes:
        itemType: String
        isList: true
        tableName: exchange_trade_pool_x_token_type
      TradePoolY_TokenTypes:
        itemType: String
        isList: true
        tableName: exchange_trade_pool_y_token_type
      SellPools:
        itemType: ID #ObjectID
        isList: true
        tableName: exchange_sell_pool_id
      SellPoolX_TokenTypes:
        itemType: String
        isList: true
        tableName: exchange_sell_pool_x_token_type
      SellPoolY_TokenTypes:
        itemType: String
        isList: true
        tableName: exchange_sell_pool_y_token_type
      BuyPools:
        itemType: ID #ObjectID
        isList: true
        tableName: exchange_buy_pool_id
      BuyPoolX_TokenTypes:
        itemType: String
        isList: true
        tableName: exchange_buy_pool_x_token_type
      BuyPoolY_TokenTypes:
        itemType: String
        isList: true
        tableName: exchange_buy_pool_y_token_type

    methods:
      "__Init__":
        event:
          isObjectShared: true # Share the object after initialization.

      AddTokenPair:
        metadata:
          NO_MOVE_EVENT_MODULE: true # No event (property-getter) module should be generated
        isInternal: true
        #shouldCallByReference: true
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          TokenPairId:
            type: ID #ObjectID
          #X_TokenType:
          #  type: String
        event:
          name: TokenPairAddedToExchange
          properties:
            X_TokenType:
              type: String
            Y_TokenType:
              type: String

      AddTradePool:
        metadata:
          NO_MOVE_EVENT_MODULE: true
        isInternal: true
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          TradePoolId:
            type: ID #ObjectID
        event:
          name: TradePoolAddedToExchange
          properties:
            X_TokenType:
              type: String
            Y_TokenType:
              type: String

      AddSellPool:
        metadata:
          NO_MOVE_EVENT_MODULE: true
        isInternal: true
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          SellPoolId:
            type: ID #ObjectID
        event:
          name: SellPoolAddedToExchange
          properties:
            X_TokenType:
              type: String
            Y_TokenType:
              type: String

      AddBuyPool:
        metadata:
          NO_MOVE_EVENT_MODULE: true
        isInternal: true
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          BuyPoolId:
            type: ID #ObjectID
        event:
          name: BuyPoolAddedToExchange
          properties:
            X_TokenType:
              type: String
            Y_TokenType:
              type: String

      Update:
        metadata:
          NO_MOVE_EVENT_MODULE: true
        requiredPermission: AdminCap
        parameters:
          Name:
            type: String
          UpdateTokenPairs: # Fully update token pairs
            type: bool
          TokenPairs: # TokenPair IDs
            itemType: ID
          TokenPairX_TokenTypes:
            itemType: String
          TokenPairY_TokenTypes:
            itemType: String
          UpdateTradePools: # Fully update trade pools
            type: bool
          TradePools:
            itemType: ID
          TradePoolX_TokenTypes:
            itemType: String
          TradePoolY_TokenTypes:
            itemType: String
          UpdateSellPools: # Fully update sell pools
            type: bool
          SellPools:
            itemType: ID
          SellPoolX_TokenTypes:
            itemType: String
          SellPoolY_TokenTypes:
            itemType: String
          UpdateBuyPools: # Fully update buy pools
            type: bool
          BuyPools:
            itemType: ID
          BuyPoolX_TokenTypes:
            itemType: String
          BuyPoolY_TokenTypes:
            itemType: String
        event:
          name: ExchangeUpdated

enumObjects:
  PoolType:
    baseType: u8
    values:
      TradePool:
        value: 0
      SellPool:
        value: 1
      BuyPool:
        value: 2

services:
  TokenPairService:
    methods:
      RemoveLiquidity:
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          TokenPair:
            referenceType: TokenPair<X, Y>
            isMutableReference: true
          LiquidityToken:
            referenceType: LiquidityToken<X, Y>
          X_Id:
            type: ID
          Y_Coin:
            referenceType: Coin<Y>
            isMutableReference: true
          #Amount:
          #  type: u64
          #  description: Support removing partial liquidity.

      SwapY:
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          TokenPair:
            referenceType: TokenPair<X, Y>
            isMutableReference: true
          Y_Coin:
            type: Coin<Y>
          Y_Amount:
            type: u64
          X_Id:
            type: ID
          #ExpectedX_AmountOut:
          #  type: u64

  TokenPairServiceProcess:
    requiredComponents:
      NS:
        type: NftService
    methods:
      InitializeLiquidity:
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          #Publisher:
          #  referenceType: "sui::package::Publisher"
          Exchange:
            referenceType: Exchange
            isMutableReference: true
          #X_Coin:
          #  type: Coin<X>
          #X_Amount:
          #  type: u64
          X:
            type: X
          Y_Coin:
            type: Coin<Y>
          Y_Amount:
            type: u64
          FeeNumerator:
            type: u64
          FeeDenominator:
            type: u64
        steps:
          GetX_Amount:
            invokeParticipant: "NS.GetAmount"
            arguments:
              X: "X"
            exportVariable: X_Amount
          InvokeInternal:
            expression:
              Move:
                "//todo invoke internal fun..."

      AddLiquidity:
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          TokenPair:
            referenceType: TokenPair<X, Y>
            isMutableReference: true
          LiquidityToken:
            referenceType: LiquidityToken<X, Y>
          #X_Coin:
          #  type: Coin<X>
          #X_Amount:
          #  type: u64
          X:
            type: X
          Y_Coin:
            type: Coin<Y>
          Y_Amount:
            type: u64
          #ExpectedLiquidity:
          #  type: u64
        steps:
          GetX_Amount:
            invokeParticipant: "NS.GetAmount"
            arguments:
              X: "X"
            exportVariable: X_Amount
          InvokeInternal:
            expression:
              Move:
                "//todo invoke internal fun..."

      SwapX:
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          TokenPair:
            referenceType: TokenPair<X, Y>
            isMutableReference: true
          X:
            type: X
          Y_Coin:
            referenceType: Coin<Y>
            isMutableReference: true
          ExpectedY_AmountOut:
            type: u64
        steps:
          GetX_Amount:
            invokeParticipant: "NS.GetAmount"
            arguments:
              X: "X"
            exportVariable: X_Amount
          InvokeInternal:
            expression:
              Move:
                "//todo invoke internal fun..."

  TradePoolService:
    methods:
      RemoveXToken:
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          Pool:
            referenceType: TradePool<X, Y>
            isMutableReference: true
          LiquidityToken:
            referenceType: LiquidityToken<X, Y>
          X_Id:
            type: ID

      DepositYReserve:
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          Pool:
            referenceType: TradePool<X, Y>
            isMutableReference: true
          LiquidityToken:
            referenceType: LiquidityToken<X, Y>
          Y_Coin:
            type: Coin<Y>
          Y_Amount:
            type: u64

      WithdrawYReserve:
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          Pool:
            referenceType: TradePool<X, Y>
            isMutableReference: true
          LiquidityToken:
            referenceType: LiquidityToken<X, Y>
          Y_Amount:
            type: u64
          Y_Coin:
            referenceType: Coin<Y>
            isMutableReference: true

  SellPoolService:
    methods:
      BuyX:
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          Pool:
            referenceType: TradePool<X, Y>
            isMutableReference: true
          Y_Coin:
            type: Coin<Y>
          Y_Amount:
            type: u64
          X_Id:
            type: ID

  TradePoolServiceProcess:
    requiredComponents:
      NS:
        type: NftService
    methods:
      InitializeTradePool:
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          Exchange:
            referenceType: Exchange
            isMutableReference: true
          X:
            type: X
          Y_Coin:
            type: Coin<Y>
          Y_Amount:
            type: u64
          ExchangeRateNumerator:
            type: u64
          ExchangeRateDenominator:
            type: u64
          PriceCurveType:
            type: u8
          PriceDeltaX_Amount:
            type: u64
          PriceDeltaNumerator:
            type: u64
          PriceDeltaDenominator:
            type: u64
        steps:
          GetX_Amount:
            invokeParticipant: "NS.GetAmount"
            arguments:
              X: "X"
            exportVariable: X_Amount
          InvokeInternal:
            expression:
              Move:
                "//todo invoke internal fun..."

  SellPoolServiceProcess:
    requiredComponents:
      NS:
        type: NftService
    methods:
      InitializeSellPool:
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          Exchange:
            referenceType: Exchange
            isMutableReference: true
          X:
            type: X
          ExchangeRateNumerator:
            type: u64
          ExchangeRateDenominator:
            type: u64
          PriceCurveType:
            type: u8
          PriceDeltaX_Amount:
            type: u64
          PriceDeltaNumerator:
            type: u64
          PriceDeltaDenominator:
            type: u64
        steps:
          GetX_Amount:
            invokeParticipant: "NS.GetAmount"
            arguments:
              X: "X"
            exportVariable: X_Amount
          InvokeInternal:
            expression:
              Move:
                "//todo invoke internal fun..."

      AddXToken:
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          Pool:
            referenceType: TradePool<X, Y>
            isMutableReference: true
          LiquidityToken:
            referenceType: LiquidityToken<X, Y>
          X:
            type: X
        steps:
          GetX_Amount:
            invokeParticipant: "NS.GetAmount"
            arguments:
              X: "X"
            exportVariable: X_Amount
          InvokeInternal:
            expression:
              Move:
                "//todo invoke internal fun..."

  BuyPoolService:
    methods:
      InitializeBuyPool:
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          Exchange:
            referenceType: Exchange
            isMutableReference: true
          Y_Coin:
            type: Coin<Y>
          Y_Amount:
            type: u64
          ExchangeRateNumerator:
            type: u64
          ExchangeRateDenominator:
            type: u64
          PriceCurveType:
            type: u8
          PriceDeltaX_Amount:
            type: u64
          PriceDeltaNumerator:
            type: u64
          PriceDeltaDenominator:
            type: u64

  BuyPoolServiceProcess:
    requiredComponents:
      NS:
        type: NftService
    methods:
      SellX:
        typeParameters:
          X:
            keyable: true
            storable: true
          Y: {}
        parameters:
          Pool:
            referenceType: TradePool<X, Y>
            isMutableReference: true
          X:
            type: X
          Y_Coin:
            referenceType: Coin<Y>
            isMutableReference: true
          ExpectedY_AmountOut:
            type: u64
        steps:
          GetX_Amount:
            invokeParticipant: "NS.GetAmount"
            arguments:
              X: "X"
            exportVariable: X_Amount
          InvokeInternal:
            expression:
              Move:
                "//todo invoke internal fun..."

  NftService:
    abstract: true
    metadata:
      MoveExternalConfiguration: "NftServiceConfig"
    methods:
      GetAmount:
        typeParameters:
          X:
            keyable: true
            storable: true
        parameters:
          X:
            referenceType: X
        result:
          type: u64

superObjects:
  # A super-object acts like an entity template.
  SellOrBuyPool:
    typeParameters:
      X:
        isPhantom: true
        keyable: true
        storable: true
        persistenceType: JsonObject
      Y:
        isPhantom: true
    properties:
      X_Reserve:
        type: "ObjectTable<ID, X>"
        sequenceNumber: 10
      X_Amounts:
        type: "Table<ID, u64>"
        sequenceNumber: 20
      X_TotalAmount:
        type: u64
        sequenceNumber: 30
      Y_Reserve:
        type: "Balance<Y>"
        sequenceNumber: 40
      LiquidityTokenId:
        type: ID
        sequenceNumber: 50
      X_SoldAmount:
        type: u64
        description: "The amount of X that has been sold by the (sell or trade) pool"
        sequenceNumber: 55
      X_BoughtAmount:
        type: u64
        description: "The amount of X the pool has already bought"
        sequenceNumber: 56
      StartExchangeRateNumerator:
        type: u64
        description: "Start exchange rate numerator of X to Y"
        sequenceNumber: 60
      ExchangeRateNumerator:
        type: u64
        description: "Current exchange rate numerator of X to Y"
        sequenceNumber: 70
      ExchangeRateDenominator:
        type: u64
        sequenceNumber: 80
      PriceCurveType:
        type: u8
        sequenceNumber: 90
      PriceDeltaX_Amount:
        type: u64
        description: 'For sell pool, the price of X_Token increases by "PriceDeltaNumerator / PriceDeltaDenominator" for every "PriceDeltaX_Amount" sold; for buy pool, the price decreases for every bought.'
        sequenceNumber: 100
      PriceDeltaNumerator:
        type: u64
        sequenceNumber: 110
      PriceDeltaDenominator:
        type: u64
        sequenceNumber: 120

    methods:
      UpdateExchangeRate:
        parameters:
          LiquidityToken:
            referenceType: LiquidityToken<X, Y>
            eventPropertyName: LiquidityTokenId
          StartExchangeRateNumerator:
            type: u64
          ExchangeRateNumerator:
            type: u64
          ExchangeRateDenominator:
            type: u64
          PriceDeltaX_Amount:
            type: u64
          PriceDeltaNumerator:
            type: u64
          PriceDeltaDenominator:
            type: u64
        event:
          properties:
            Provider:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            LiquidityTokenId:
              type: ID #ObjectID

      AddXToken:
        isInternal: true
        #shouldCallByReference: true
        parameters:
          LiquidityToken:
            referenceType: LiquidityToken<X, Y>
            eventPropertyName: LiquidityTokenId
          X:
            type: X
          X_Amount:
            type: u64
        event:
          properties:
            Provider:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            X_Amount:
              type: u64
            LiquidityTokenId:
              type: ID #ObjectID
            X_Id:
              type: ID

      RemoveXToken:
        parameters:
          LiquidityToken:
            referenceType: LiquidityToken<X, Y>
            eventPropertyName: LiquidityTokenId
          X_Id:
            type: ID
        result:
          type: X
        event:
          properties:
            Provider:
              type: address
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            X_Amount:
              type: u64
            LiquidityTokenId:
              type: ID #ObjectID

      DepositYReserve:
        parameters:
          LiquidityToken:
            referenceType: LiquidityToken<X, Y>
            eventPropertyName: LiquidityTokenId
          Y_Amount:
            type: Balance<Y>
        event:
          properties:
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            Y_Amount:
              type: u64
            LiquidityTokenId:
              type: ID #ObjectID

      WithdrawYReserve:
        parameters:
          LiquidityToken:
            referenceType: LiquidityToken<X, Y>
            eventPropertyName: LiquidityTokenId
          Y_Amount:
            type: u64
        result:
          type: Balance<Y>
        event:
          properties:
            X_TokenType:
              type: String
              length: 200
            Y_TokenType:
              type: String
              length: 200
            LiquidityTokenId:
              type: ID #ObjectID

      Destroy:
        isDeletionCommand: true
        parameters:
          LiquidityToken:
            referenceType: LiquidityToken<X, Y>
            eventPropertyName: LiquidityTokenId
        event:
          properties:
            LiquidityTokenId:
              type: ID #ObjectID

typeDefinitions:
  JsonObject:
    javaType: "java.util.Map<String, Object>"
    sqlType: "json"

configuration:
  sequenceNumber: 1000
  hibernate:
    hibernateTypes:
      JsonObject:
        mappingType: "io.hypersistence.utils.hibernate.type.json.JsonType"
        parameters:
          "org.hibernate.type.ParameterType": "java.util.HashMap"
  sui:
    offChainObjectNames: [ "NftCollection" ]

