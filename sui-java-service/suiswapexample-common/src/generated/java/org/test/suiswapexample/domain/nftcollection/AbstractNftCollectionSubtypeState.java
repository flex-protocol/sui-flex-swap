// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.domain.nftcollection;

import java.util.*;
import java.math.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.suiswapexample.domain.*;
import org.test.suiswapexample.specialization.*;
import org.test.suiswapexample.domain.nftcollection.NftCollectionSubtypeEvent.*;

public abstract class AbstractNftCollectionSubtypeState implements NftCollectionSubtypeState.SqlNftCollectionSubtypeState {

    private NftCollectionSubtypeId nftCollectionSubtypeId = new NftCollectionSubtypeId();

    public NftCollectionSubtypeId getNftCollectionSubtypeId() {
        return this.nftCollectionSubtypeId;
    }

    public void setNftCollectionSubtypeId(NftCollectionSubtypeId nftCollectionSubtypeId) {
        this.nftCollectionSubtypeId = nftCollectionSubtypeId;
    }

    private transient NftCollectionState nftCollectionState;

    public NftCollectionState getNftCollectionState() {
        return nftCollectionState;
    }

    public void setNftCollectionState(NftCollectionState s) {
        nftCollectionState = s;
    }
    
    private NftCollectionState protectedNftCollectionState;

    protected NftCollectionState getProtectedNftCollectionState() {
        return protectedNftCollectionState;
    }

    protected void setProtectedNftCollectionState(NftCollectionState protectedNftCollectionState) {
        this.protectedNftCollectionState = protectedNftCollectionState;
    }

    public String getNftCollectionCollectionType() {
        return this.getNftCollectionSubtypeId().getNftCollectionCollectionType();
    }
        
    public void setNftCollectionCollectionType(String nftCollectionCollectionType) {
        this.getNftCollectionSubtypeId().setNftCollectionCollectionType(nftCollectionCollectionType);
    }

    public String getSubtypeValue() {
        return this.getNftCollectionSubtypeId().getSubtypeValue();
    }
        
    public void setSubtypeValue(String subtypeValue) {
        this.getNftCollectionSubtypeId().setSubtypeValue(subtypeValue);
    }

    private String name;

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    private String imageUrl;

    public String getImageUrl() {
        return this.imageUrl;
    }

    public void setImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
    }

    private BigInteger subtypeAmount;

    public BigInteger getSubtypeAmount() {
        return this.subtypeAmount;
    }

    public void setSubtypeAmount(BigInteger subtypeAmount) {
        this.subtypeAmount = subtypeAmount;
    }

    private Long offChainVersion;

    public Long getOffChainVersion() {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion) {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean active;

    public Boolean getActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public boolean isStateUnsaved() {
        return this.getOffChainVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }


    public AbstractNftCollectionSubtypeState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getSubtypeValue().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof NftCollectionSubtypeState) {
            return Objects.equals(this.getSubtypeValue(), ((NftCollectionSubtypeState)obj).getSubtypeValue());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (false) { 
            ;
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void merge(NftCollectionSubtypeState s) {
        if (s == this) {
            return;
        }
        this.setName(s.getName());
        this.setImageUrl(s.getImageUrl());
        this.setSubtypeAmount(s.getSubtypeAmount());
        this.setActive(s.getActive());
    }

    public void save() {
    }

    protected void throwOnWrongEvent(NftCollectionSubtypeEvent event) {
        String stateEntityIdNftCollectionCollectionType = this.getNftCollectionSubtypeId().getNftCollectionCollectionType();
        String eventEntityIdNftCollectionCollectionType = ((NftCollectionSubtypeEvent.SqlNftCollectionSubtypeEvent)event).getNftCollectionSubtypeEventId().getNftCollectionCollectionType();
        if (!stateEntityIdNftCollectionCollectionType.equals(eventEntityIdNftCollectionCollectionType)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id NftCollectionCollectionType %1$s in state but entity id NftCollectionCollectionType %2$s in event", stateEntityIdNftCollectionCollectionType, eventEntityIdNftCollectionCollectionType);
        }

        String stateEntityIdSubtypeValue = this.getNftCollectionSubtypeId().getSubtypeValue();
        String eventEntityIdSubtypeValue = ((NftCollectionSubtypeEvent.SqlNftCollectionSubtypeEvent)event).getNftCollectionSubtypeEventId().getSubtypeValue();
        if (!stateEntityIdSubtypeValue.equals(eventEntityIdSubtypeValue)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id SubtypeValue %1$s in state but entity id SubtypeValue %2$s in event", stateEntityIdSubtypeValue, eventEntityIdSubtypeValue);
        }


        if (getForReapplying()) { return; }

    }


    public static class SimpleNftCollectionSubtypeState extends AbstractNftCollectionSubtypeState {

        public SimpleNftCollectionSubtypeState() {
        }

        public static SimpleNftCollectionSubtypeState newForReapplying() {
            SimpleNftCollectionSubtypeState s = new SimpleNftCollectionSubtypeState();
            s.initializeForReapplying();
            return s;
        }

    }



}

