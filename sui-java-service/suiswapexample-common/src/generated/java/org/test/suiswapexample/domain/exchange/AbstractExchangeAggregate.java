// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.domain.exchange;

import java.util.*;
import java.util.Date;
import java.math.BigInteger;
import org.test.suiswapexample.domain.*;
import org.test.suiswapexample.specialization.*;

public abstract class AbstractExchangeAggregate extends AbstractAggregate implements ExchangeAggregate {
    private ExchangeState.MutableExchangeState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractExchangeAggregate(ExchangeState state) {
        this.state = (ExchangeState.MutableExchangeState)state;
    }

    public ExchangeState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        ExchangeCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleExchangeAggregate extends AbstractExchangeAggregate {
        public SimpleExchangeAggregate(ExchangeState state) {
            super(state);
        }

        @Override
        public void addTokenPair(String tokenPairId, Long offChainVersion, String commandId, String requesterId, ExchangeCommands.AddTokenPair c) {
            java.util.function.Supplier<ExchangeEvent.TokenPairAddedToExchange> eventFactory = () -> newTokenPairAddedToExchange(tokenPairId, offChainVersion, commandId, requesterId);
            ExchangeEvent.TokenPairAddedToExchange e;
            try {
                e = verifyAddTokenPair(eventFactory, tokenPairId, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void addTradePool(String tradePoolId, Long offChainVersion, String commandId, String requesterId, ExchangeCommands.AddTradePool c) {
            java.util.function.Supplier<ExchangeEvent.TradePoolAddedToExchange> eventFactory = () -> newTradePoolAddedToExchange(tradePoolId, offChainVersion, commandId, requesterId);
            ExchangeEvent.TradePoolAddedToExchange e;
            try {
                e = verifyAddTradePool(eventFactory, tradePoolId, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void addSellPool(String sellPoolId, Long offChainVersion, String commandId, String requesterId, ExchangeCommands.AddSellPool c) {
            java.util.function.Supplier<ExchangeEvent.SellPoolAddedToExchange> eventFactory = () -> newSellPoolAddedToExchange(sellPoolId, offChainVersion, commandId, requesterId);
            ExchangeEvent.SellPoolAddedToExchange e;
            try {
                e = verifyAddSellPool(eventFactory, sellPoolId, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void addBuyPool(String buyPoolId, Long offChainVersion, String commandId, String requesterId, ExchangeCommands.AddBuyPool c) {
            java.util.function.Supplier<ExchangeEvent.BuyPoolAddedToExchange> eventFactory = () -> newBuyPoolAddedToExchange(buyPoolId, offChainVersion, commandId, requesterId);
            ExchangeEvent.BuyPoolAddedToExchange e;
            try {
                e = verifyAddBuyPool(eventFactory, buyPoolId, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void update(String name, Long offChainVersion, String commandId, String requesterId, ExchangeCommands.Update c) {
            java.util.function.Supplier<ExchangeEvent.ExchangeUpdated> eventFactory = () -> newExchangeUpdated(name, offChainVersion, commandId, requesterId);
            ExchangeEvent.ExchangeUpdated e;
            try {
                e = verifyUpdate(eventFactory, name, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void updateSellPools(String[] ids, String[] x_TokenTypes, String[] y_TokenTypes, Long offChainVersion, String commandId, String requesterId, ExchangeCommands.UpdateSellPools c) {
            java.util.function.Supplier<ExchangeEvent.ExchangeSellPoolsUpdated> eventFactory = () -> newExchangeSellPoolsUpdated(ids, x_TokenTypes, y_TokenTypes, offChainVersion, commandId, requesterId);
            ExchangeEvent.ExchangeSellPoolsUpdated e;
            try {
                e = verifyUpdateSellPools(eventFactory, ids, x_TokenTypes, y_TokenTypes, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void updateBuyPools(String[] ids, String[] x_TokenTypes, String[] y_TokenTypes, Long offChainVersion, String commandId, String requesterId, ExchangeCommands.UpdateBuyPools c) {
            java.util.function.Supplier<ExchangeEvent.ExchangeBuyPoolsUpdated> eventFactory = () -> newExchangeBuyPoolsUpdated(ids, x_TokenTypes, y_TokenTypes, offChainVersion, commandId, requesterId);
            ExchangeEvent.ExchangeBuyPoolsUpdated e;
            try {
                e = verifyUpdateBuyPools(eventFactory, ids, x_TokenTypes, y_TokenTypes, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void updateTradePools(String[] ids, String[] x_TokenTypes, String[] y_TokenTypes, Long offChainVersion, String commandId, String requesterId, ExchangeCommands.UpdateTradePools c) {
            java.util.function.Supplier<ExchangeEvent.ExchangeTradePoolsUpdated> eventFactory = () -> newExchangeTradePoolsUpdated(ids, x_TokenTypes, y_TokenTypes, offChainVersion, commandId, requesterId);
            ExchangeEvent.ExchangeTradePoolsUpdated e;
            try {
                e = verifyUpdateTradePools(eventFactory, ids, x_TokenTypes, y_TokenTypes, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected ExchangeEvent.InitExchangeEvent verify__Init__(java.util.function.Supplier<ExchangeEvent.InitExchangeEvent> eventFactory, ExchangeCommands.__Init__ c) {

            ExchangeEvent.InitExchangeEvent e = (ExchangeEvent.InitExchangeEvent) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.exchange.__Init__Logic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ExchangeState.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.exchange;
//
//public class __Init__Logic {
//    public static ExchangeEvent.InitExchangeEvent verify(java.util.function.Supplier<ExchangeEvent.InitExchangeEvent> eventFactory, ExchangeState exchangeState, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected ExchangeEvent.TokenPairAddedToExchange verifyAddTokenPair(java.util.function.Supplier<ExchangeEvent.TokenPairAddedToExchange> eventFactory, String tokenPairId, ExchangeCommands.AddTokenPair c) {
            String TokenPairId = tokenPairId;

            ExchangeEvent.TokenPairAddedToExchange e = (ExchangeEvent.TokenPairAddedToExchange) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.exchange.AddTokenPairLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ExchangeState.class, String.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), tokenPairId, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.exchange;
//
//public class AddTokenPairLogic {
//    public static ExchangeEvent.TokenPairAddedToExchange verify(java.util.function.Supplier<ExchangeEvent.TokenPairAddedToExchange> eventFactory, ExchangeState exchangeState, String tokenPairId, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected ExchangeEvent.TradePoolAddedToExchange verifyAddTradePool(java.util.function.Supplier<ExchangeEvent.TradePoolAddedToExchange> eventFactory, String tradePoolId, ExchangeCommands.AddTradePool c) {
            String TradePoolId = tradePoolId;

            ExchangeEvent.TradePoolAddedToExchange e = (ExchangeEvent.TradePoolAddedToExchange) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.exchange.AddTradePoolLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ExchangeState.class, String.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), tradePoolId, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.exchange;
//
//public class AddTradePoolLogic {
//    public static ExchangeEvent.TradePoolAddedToExchange verify(java.util.function.Supplier<ExchangeEvent.TradePoolAddedToExchange> eventFactory, ExchangeState exchangeState, String tradePoolId, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected ExchangeEvent.SellPoolAddedToExchange verifyAddSellPool(java.util.function.Supplier<ExchangeEvent.SellPoolAddedToExchange> eventFactory, String sellPoolId, ExchangeCommands.AddSellPool c) {
            String SellPoolId = sellPoolId;

            ExchangeEvent.SellPoolAddedToExchange e = (ExchangeEvent.SellPoolAddedToExchange) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.exchange.AddSellPoolLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ExchangeState.class, String.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), sellPoolId, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.exchange;
//
//public class AddSellPoolLogic {
//    public static ExchangeEvent.SellPoolAddedToExchange verify(java.util.function.Supplier<ExchangeEvent.SellPoolAddedToExchange> eventFactory, ExchangeState exchangeState, String sellPoolId, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected ExchangeEvent.BuyPoolAddedToExchange verifyAddBuyPool(java.util.function.Supplier<ExchangeEvent.BuyPoolAddedToExchange> eventFactory, String buyPoolId, ExchangeCommands.AddBuyPool c) {
            String BuyPoolId = buyPoolId;

            ExchangeEvent.BuyPoolAddedToExchange e = (ExchangeEvent.BuyPoolAddedToExchange) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.exchange.AddBuyPoolLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ExchangeState.class, String.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), buyPoolId, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.exchange;
//
//public class AddBuyPoolLogic {
//    public static ExchangeEvent.BuyPoolAddedToExchange verify(java.util.function.Supplier<ExchangeEvent.BuyPoolAddedToExchange> eventFactory, ExchangeState exchangeState, String buyPoolId, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected ExchangeEvent.ExchangeUpdated verifyUpdate(java.util.function.Supplier<ExchangeEvent.ExchangeUpdated> eventFactory, String name, ExchangeCommands.Update c) {
            String Name = name;

            ExchangeEvent.ExchangeUpdated e = (ExchangeEvent.ExchangeUpdated) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.exchange.UpdateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ExchangeState.class, String.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), name, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.exchange;
//
//public class UpdateLogic {
//    public static ExchangeEvent.ExchangeUpdated verify(java.util.function.Supplier<ExchangeEvent.ExchangeUpdated> eventFactory, ExchangeState exchangeState, String name, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected ExchangeEvent.ExchangeSellPoolsUpdated verifyUpdateSellPools(java.util.function.Supplier<ExchangeEvent.ExchangeSellPoolsUpdated> eventFactory, String[] ids, String[] x_TokenTypes, String[] y_TokenTypes, ExchangeCommands.UpdateSellPools c) {
            String[] Ids = ids;
            String[] X_TokenTypes = x_TokenTypes;
            String[] Y_TokenTypes = y_TokenTypes;

            ExchangeEvent.ExchangeSellPoolsUpdated e = (ExchangeEvent.ExchangeSellPoolsUpdated) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.exchange.UpdateSellPoolsLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ExchangeState.class, String[].class, String[].class, String[].class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), ids, x_TokenTypes, y_TokenTypes, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.exchange;
//
//public class UpdateSellPoolsLogic {
//    public static ExchangeEvent.ExchangeSellPoolsUpdated verify(java.util.function.Supplier<ExchangeEvent.ExchangeSellPoolsUpdated> eventFactory, ExchangeState exchangeState, String[] ids, String[] x_TokenTypes, String[] y_TokenTypes, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected ExchangeEvent.ExchangeBuyPoolsUpdated verifyUpdateBuyPools(java.util.function.Supplier<ExchangeEvent.ExchangeBuyPoolsUpdated> eventFactory, String[] ids, String[] x_TokenTypes, String[] y_TokenTypes, ExchangeCommands.UpdateBuyPools c) {
            String[] Ids = ids;
            String[] X_TokenTypes = x_TokenTypes;
            String[] Y_TokenTypes = y_TokenTypes;

            ExchangeEvent.ExchangeBuyPoolsUpdated e = (ExchangeEvent.ExchangeBuyPoolsUpdated) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.exchange.UpdateBuyPoolsLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ExchangeState.class, String[].class, String[].class, String[].class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), ids, x_TokenTypes, y_TokenTypes, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.exchange;
//
//public class UpdateBuyPoolsLogic {
//    public static ExchangeEvent.ExchangeBuyPoolsUpdated verify(java.util.function.Supplier<ExchangeEvent.ExchangeBuyPoolsUpdated> eventFactory, ExchangeState exchangeState, String[] ids, String[] x_TokenTypes, String[] y_TokenTypes, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected ExchangeEvent.ExchangeTradePoolsUpdated verifyUpdateTradePools(java.util.function.Supplier<ExchangeEvent.ExchangeTradePoolsUpdated> eventFactory, String[] ids, String[] x_TokenTypes, String[] y_TokenTypes, ExchangeCommands.UpdateTradePools c) {
            String[] Ids = ids;
            String[] X_TokenTypes = x_TokenTypes;
            String[] Y_TokenTypes = y_TokenTypes;

            ExchangeEvent.ExchangeTradePoolsUpdated e = (ExchangeEvent.ExchangeTradePoolsUpdated) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.exchange.UpdateTradePoolsLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ExchangeState.class, String[].class, String[].class, String[].class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), ids, x_TokenTypes, y_TokenTypes, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.exchange;
//
//public class UpdateTradePoolsLogic {
//    public static ExchangeEvent.ExchangeTradePoolsUpdated verify(java.util.function.Supplier<ExchangeEvent.ExchangeTradePoolsUpdated> eventFactory, ExchangeState exchangeState, String[] ids, String[] x_TokenTypes, String[] y_TokenTypes, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected AbstractExchangeEvent.InitExchangeEvent newInitExchangeEvent(Long offChainVersion, String commandId, String requesterId) {
            ExchangeEventId eventId = new ExchangeEventId(getState().getId(), null);
            AbstractExchangeEvent.InitExchangeEvent e = new AbstractExchangeEvent.InitExchangeEvent();

            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setExchangeEventId(eventId);
            return e;
        }

        protected AbstractExchangeEvent.TokenPairAddedToExchange newTokenPairAddedToExchange(String tokenPairId, Long offChainVersion, String commandId, String requesterId) {
            ExchangeEventId eventId = new ExchangeEventId(getState().getId(), null);
            AbstractExchangeEvent.TokenPairAddedToExchange e = new AbstractExchangeEvent.TokenPairAddedToExchange();

            e.setTokenPairId(tokenPairId);
            e.setX_TokenType(null);
            e.setY_TokenType(null);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setExchangeEventId(eventId);
            return e;
        }

        protected AbstractExchangeEvent.TradePoolAddedToExchange newTradePoolAddedToExchange(String tradePoolId, Long offChainVersion, String commandId, String requesterId) {
            ExchangeEventId eventId = new ExchangeEventId(getState().getId(), null);
            AbstractExchangeEvent.TradePoolAddedToExchange e = new AbstractExchangeEvent.TradePoolAddedToExchange();

            e.setTradePoolId(tradePoolId);
            e.setX_TokenType(null);
            e.setY_TokenType(null);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setExchangeEventId(eventId);
            return e;
        }

        protected AbstractExchangeEvent.SellPoolAddedToExchange newSellPoolAddedToExchange(String sellPoolId, Long offChainVersion, String commandId, String requesterId) {
            ExchangeEventId eventId = new ExchangeEventId(getState().getId(), null);
            AbstractExchangeEvent.SellPoolAddedToExchange e = new AbstractExchangeEvent.SellPoolAddedToExchange();

            e.setSellPoolId(sellPoolId);
            e.setX_TokenType(null);
            e.setY_TokenType(null);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setExchangeEventId(eventId);
            return e;
        }

        protected AbstractExchangeEvent.BuyPoolAddedToExchange newBuyPoolAddedToExchange(String buyPoolId, Long offChainVersion, String commandId, String requesterId) {
            ExchangeEventId eventId = new ExchangeEventId(getState().getId(), null);
            AbstractExchangeEvent.BuyPoolAddedToExchange e = new AbstractExchangeEvent.BuyPoolAddedToExchange();

            e.setBuyPoolId(buyPoolId);
            e.setX_TokenType(null);
            e.setY_TokenType(null);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setExchangeEventId(eventId);
            return e;
        }

        protected AbstractExchangeEvent.ExchangeUpdated newExchangeUpdated(String name, Long offChainVersion, String commandId, String requesterId) {
            ExchangeEventId eventId = new ExchangeEventId(getState().getId(), null);
            AbstractExchangeEvent.ExchangeUpdated e = new AbstractExchangeEvent.ExchangeUpdated();

            e.setName(name);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setExchangeEventId(eventId);
            return e;
        }

        protected AbstractExchangeEvent.ExchangeSellPoolsUpdated newExchangeSellPoolsUpdated(String[] ids, String[] x_TokenTypes, String[] y_TokenTypes, Long offChainVersion, String commandId, String requesterId) {
            ExchangeEventId eventId = new ExchangeEventId(getState().getId(), null);
            AbstractExchangeEvent.ExchangeSellPoolsUpdated e = new AbstractExchangeEvent.ExchangeSellPoolsUpdated();

            e.setIds(ids);
            e.setX_TokenTypes(x_TokenTypes);
            e.setY_TokenTypes(y_TokenTypes);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setExchangeEventId(eventId);
            return e;
        }

        protected AbstractExchangeEvent.ExchangeBuyPoolsUpdated newExchangeBuyPoolsUpdated(String[] ids, String[] x_TokenTypes, String[] y_TokenTypes, Long offChainVersion, String commandId, String requesterId) {
            ExchangeEventId eventId = new ExchangeEventId(getState().getId(), null);
            AbstractExchangeEvent.ExchangeBuyPoolsUpdated e = new AbstractExchangeEvent.ExchangeBuyPoolsUpdated();

            e.setIds(ids);
            e.setX_TokenTypes(x_TokenTypes);
            e.setY_TokenTypes(y_TokenTypes);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setExchangeEventId(eventId);
            return e;
        }

        protected AbstractExchangeEvent.ExchangeTradePoolsUpdated newExchangeTradePoolsUpdated(String[] ids, String[] x_TokenTypes, String[] y_TokenTypes, Long offChainVersion, String commandId, String requesterId) {
            ExchangeEventId eventId = new ExchangeEventId(getState().getId(), null);
            AbstractExchangeEvent.ExchangeTradePoolsUpdated e = new AbstractExchangeEvent.ExchangeTradePoolsUpdated();

            e.setIds(ids);
            e.setX_TokenTypes(x_TokenTypes);
            e.setY_TokenTypes(y_TokenTypes);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setExchangeEventId(eventId);
            return e;
        }

    }

}

