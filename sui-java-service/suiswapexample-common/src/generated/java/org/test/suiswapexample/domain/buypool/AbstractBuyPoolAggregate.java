// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.domain.buypool;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.suiswapexample.domain.*;
import org.test.suiswapexample.specialization.*;

public abstract class AbstractBuyPoolAggregate extends AbstractAggregate implements BuyPoolAggregate {
    private BuyPoolState.MutableBuyPoolState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractBuyPoolAggregate(BuyPoolState state) {
        this.state = (BuyPoolState.MutableBuyPoolState)state;
    }

    public BuyPoolState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        BuyPoolCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleBuyPoolAggregate extends AbstractBuyPoolAggregate {
        public SimpleBuyPoolAggregate(BuyPoolState state) {
            super(state);
        }

        @Override
        public void updateExchangeRate(String liquidityToken, BigInteger startExchangeRateNumerator, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, Long offChainVersion, String commandId, String requesterId, BuyPoolCommands.UpdateExchangeRate c) {
            java.util.function.Supplier<BuyPoolEvent.BuyPoolExchangeRateUpdated> eventFactory = () -> newBuyPoolExchangeRateUpdated(liquidityToken, startExchangeRateNumerator, exchangeRateNumerator, exchangeRateDenominator, priceDeltaX_Amount, priceDeltaNumerator, priceDeltaDenominator, offChainVersion, commandId, requesterId);
            BuyPoolEvent.BuyPoolExchangeRateUpdated e;
            try {
                e = verifyUpdateExchangeRate(eventFactory, startExchangeRateNumerator, exchangeRateNumerator, exchangeRateDenominator, priceDeltaX_Amount, priceDeltaNumerator, priceDeltaDenominator, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void destroy(String liquidityToken, Long offChainVersion, String commandId, String requesterId, BuyPoolCommands.Destroy c) {
            java.util.function.Supplier<BuyPoolEvent.BuyPoolDestroyed> eventFactory = () -> newBuyPoolDestroyed(liquidityToken, offChainVersion, commandId, requesterId);
            BuyPoolEvent.BuyPoolDestroyed e;
            try {
                e = verifyDestroy(eventFactory, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected BuyPoolEvent.BuyPoolInitialized verifyInitializeBuyPool(java.util.function.Supplier<BuyPoolEvent.BuyPoolInitialized> eventFactory, String exchange, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, Integer priceCurveType, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, BuyPoolCommands.InitializeBuyPool c) {
            String Exchange = exchange;
            BigInteger ExchangeRateNumerator = exchangeRateNumerator;
            BigInteger ExchangeRateDenominator = exchangeRateDenominator;
            Integer PriceCurveType = priceCurveType;
            BigInteger PriceDeltaX_Amount = priceDeltaX_Amount;
            BigInteger PriceDeltaNumerator = priceDeltaNumerator;
            BigInteger PriceDeltaDenominator = priceDeltaDenominator;

            BuyPoolEvent.BuyPoolInitialized e = (BuyPoolEvent.BuyPoolInitialized) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.buypool.InitializeBuyPoolLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, BuyPoolState.class, String.class, BigInteger.class, BigInteger.class, Integer.class, BigInteger.class, BigInteger.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), exchange, exchangeRateNumerator, exchangeRateDenominator, priceCurveType, priceDeltaX_Amount, priceDeltaNumerator, priceDeltaDenominator, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.buypool;
//
//public class InitializeBuyPoolLogic {
//    public static BuyPoolEvent.BuyPoolInitialized verify(java.util.function.Supplier<BuyPoolEvent.BuyPoolInitialized> eventFactory, BuyPoolState buyPoolState, String exchange, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, Integer priceCurveType, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected BuyPoolEvent.BuyPoolExchangeRateUpdated verifyUpdateExchangeRate(java.util.function.Supplier<BuyPoolEvent.BuyPoolExchangeRateUpdated> eventFactory, BigInteger startExchangeRateNumerator, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, BuyPoolCommands.UpdateExchangeRate c) {
            BigInteger StartExchangeRateNumerator = startExchangeRateNumerator;
            BigInteger ExchangeRateNumerator = exchangeRateNumerator;
            BigInteger ExchangeRateDenominator = exchangeRateDenominator;
            BigInteger PriceDeltaX_Amount = priceDeltaX_Amount;
            BigInteger PriceDeltaNumerator = priceDeltaNumerator;
            BigInteger PriceDeltaDenominator = priceDeltaDenominator;

            BuyPoolEvent.BuyPoolExchangeRateUpdated e = (BuyPoolEvent.BuyPoolExchangeRateUpdated) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.buypool.UpdateExchangeRateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, BuyPoolState.class, BigInteger.class, BigInteger.class, BigInteger.class, BigInteger.class, BigInteger.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), startExchangeRateNumerator, exchangeRateNumerator, exchangeRateDenominator, priceDeltaX_Amount, priceDeltaNumerator, priceDeltaDenominator, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.buypool;
//
//public class UpdateExchangeRateLogic {
//    public static BuyPoolEvent.BuyPoolExchangeRateUpdated verify(java.util.function.Supplier<BuyPoolEvent.BuyPoolExchangeRateUpdated> eventFactory, BuyPoolState buyPoolState, BigInteger startExchangeRateNumerator, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected BuyPoolEvent.BuyPoolXTokenRemoved verifyRemoveXToken(java.util.function.Supplier<BuyPoolEvent.BuyPoolXTokenRemoved> eventFactory, String x_Id, BuyPoolCommands.RemoveXToken c) {
            String X_Id = x_Id;

            BuyPoolEvent.BuyPoolXTokenRemoved e = (BuyPoolEvent.BuyPoolXTokenRemoved) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.buypool.RemoveXTokenLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, BuyPoolState.class, String.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), x_Id, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.buypool;
//
//public class RemoveXTokenLogic {
//    public static BuyPoolEvent.BuyPoolXTokenRemoved verify(java.util.function.Supplier<BuyPoolEvent.BuyPoolXTokenRemoved> eventFactory, BuyPoolState buyPoolState, String x_Id, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected BuyPoolEvent.BuyPoolYReserveWithdrawn verifyWithdrawYReserve(java.util.function.Supplier<BuyPoolEvent.BuyPoolYReserveWithdrawn> eventFactory, BigInteger y_Amount, BuyPoolCommands.WithdrawYReserve c) {
            BigInteger Y_Amount = y_Amount;

            BuyPoolEvent.BuyPoolYReserveWithdrawn e = (BuyPoolEvent.BuyPoolYReserveWithdrawn) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.buypool.WithdrawYReserveLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, BuyPoolState.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), y_Amount, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.buypool;
//
//public class WithdrawYReserveLogic {
//    public static BuyPoolEvent.BuyPoolYReserveWithdrawn verify(java.util.function.Supplier<BuyPoolEvent.BuyPoolYReserveWithdrawn> eventFactory, BuyPoolState buyPoolState, BigInteger y_Amount, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected BuyPoolEvent.BuyPoolDestroyed verifyDestroy(java.util.function.Supplier<BuyPoolEvent.BuyPoolDestroyed> eventFactory, BuyPoolCommands.Destroy c) {

            BuyPoolEvent.BuyPoolDestroyed e = (BuyPoolEvent.BuyPoolDestroyed) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.buypool.DestroyLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, BuyPoolState.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.buypool;
//
//public class DestroyLogic {
//    public static BuyPoolEvent.BuyPoolDestroyed verify(java.util.function.Supplier<BuyPoolEvent.BuyPoolDestroyed> eventFactory, BuyPoolState buyPoolState, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected BuyPoolEvent.BuyPoolXSwappedForY verifySellX(java.util.function.Supplier<BuyPoolEvent.BuyPoolXSwappedForY> eventFactory, BigInteger x_Amount, BigInteger expectedY_AmountOut, BuyPoolCommands.SellX c) {
            BigInteger X_Amount = x_Amount;
            BigInteger ExpectedY_AmountOut = expectedY_AmountOut;

            BuyPoolEvent.BuyPoolXSwappedForY e = (BuyPoolEvent.BuyPoolXSwappedForY) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.buypool.SellXLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, BuyPoolState.class, BigInteger.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), x_Amount, expectedY_AmountOut, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.buypool;
//
//public class SellXLogic {
//    public static BuyPoolEvent.BuyPoolXSwappedForY verify(java.util.function.Supplier<BuyPoolEvent.BuyPoolXSwappedForY> eventFactory, BuyPoolState buyPoolState, BigInteger x_Amount, BigInteger expectedY_AmountOut, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected AbstractBuyPoolEvent.BuyPoolExchangeRateUpdated newBuyPoolExchangeRateUpdated(String liquidityToken, BigInteger startExchangeRateNumerator, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, Long offChainVersion, String commandId, String requesterId) {
            BuyPoolEventId eventId = new BuyPoolEventId(getState().getId(), null);
            AbstractBuyPoolEvent.BuyPoolExchangeRateUpdated e = new AbstractBuyPoolEvent.BuyPoolExchangeRateUpdated();

            e.setLiquidityTokenId(null);
            e.setStartExchangeRateNumerator(startExchangeRateNumerator);
            e.setExchangeRateNumerator(exchangeRateNumerator);
            e.setExchangeRateDenominator(exchangeRateDenominator);
            e.setPriceDeltaX_Amount(priceDeltaX_Amount);
            e.setPriceDeltaNumerator(priceDeltaNumerator);
            e.setPriceDeltaDenominator(priceDeltaDenominator);
            e.setProvider(null);
            e.setX_TokenType(null);
            e.setY_TokenType(null);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setBuyPoolEventId(eventId);
            return e;
        }

        protected AbstractBuyPoolEvent.BuyPoolDestroyed newBuyPoolDestroyed(String liquidityToken, Long offChainVersion, String commandId, String requesterId) {
            BuyPoolEventId eventId = new BuyPoolEventId(getState().getId(), null);
            AbstractBuyPoolEvent.BuyPoolDestroyed e = new AbstractBuyPoolEvent.BuyPoolDestroyed();

            e.setLiquidityTokenId(null);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setBuyPoolEventId(eventId);
            return e;
        }

    }

}

