// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.domain.exchange;

import java.util.*;
import java.util.Date;
import java.math.BigInteger;
import org.test.suiswapexample.domain.*;
import org.test.suiswapexample.specialization.*;
import org.test.suiswapexample.domain.AbstractEvent;

public abstract class AbstractExchangeEvent extends AbstractEvent implements ExchangeEvent.SqlExchangeEvent, SuiEventEnvelope.MutableSuiEventEnvelope, SuiMoveEvent.MutableSuiMoveEvent, HasStatus.MutableHasStatus {
    private ExchangeEventId exchangeEventId = new ExchangeEventId();

    public ExchangeEventId getExchangeEventId() {
        return this.exchangeEventId;
    }

    public void setExchangeEventId(ExchangeEventId eventId) {
        this.exchangeEventId = eventId;
    }
    
    public String getId() {
        return getExchangeEventId().getId();
    }

    public void setId(String id) {
        getExchangeEventId().setId(id);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public BigInteger getVersion() {
        return getExchangeEventId().getVersion();
    }
    
    public void setVersion(BigInteger version) {
        getExchangeEventId().setVersion(version);
    }

    private Long suiTimestamp;

    public Long getSuiTimestamp() {
        return this.suiTimestamp;
    }
    
    public void setSuiTimestamp(Long suiTimestamp) {
        this.suiTimestamp = suiTimestamp;
    }

    private String suiTxDigest;

    public String getSuiTxDigest() {
        return this.suiTxDigest;
    }
    
    public void setSuiTxDigest(String suiTxDigest) {
        this.suiTxDigest = suiTxDigest;
    }

    private BigInteger suiEventSeq;

    public BigInteger getSuiEventSeq() {
        return this.suiEventSeq;
    }
    
    public void setSuiEventSeq(BigInteger suiEventSeq) {
        this.suiEventSeq = suiEventSeq;
    }

    private String suiPackageId;

    public String getSuiPackageId() {
        return this.suiPackageId;
    }
    
    public void setSuiPackageId(String suiPackageId) {
        this.suiPackageId = suiPackageId;
    }

    private String suiTransactionModule;

    public String getSuiTransactionModule() {
        return this.suiTransactionModule;
    }
    
    public void setSuiTransactionModule(String suiTransactionModule) {
        this.suiTransactionModule = suiTransactionModule;
    }

    private String suiSender;

    public String getSuiSender() {
        return this.suiSender;
    }
    
    public void setSuiSender(String suiSender) {
        this.suiSender = suiSender;
    }

    private String suiType;

    public String getSuiType() {
        return this.suiType;
    }
    
    public void setSuiType(String suiType) {
        this.suiType = suiType;
    }

    private String status;

    public String getStatus() {
        return this.status;
    }
    
    public void setStatus(String status) {
        this.status = status;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    private String commandType;

    public String getCommandType() {
        return commandType;
    }

    public void setCommandType(String commandType) {
        this.commandType = commandType;
    }

    protected AbstractExchangeEvent() {
    }

    protected AbstractExchangeEvent(ExchangeEventId eventId) {
        this.exchangeEventId = eventId;
    }


    public abstract String getEventType();

    public static class ExchangeClobEvent extends AbstractExchangeEvent {

        protected Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        protected void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        protected String getDynamicPropertiesLob() {
            return ApplicationContext.current.getClobConverter().toString(getDynamicProperties());
        }

        protected void setDynamicPropertiesLob(String text) {
            getDynamicProperties().clear();
            Map<String, Object> ps = ApplicationContext.current.getClobConverter().parseLobProperties(text);
            if (ps != null) {
                for (Map.Entry<String, Object> kv : ps.entrySet()) {
                    getDynamicProperties().put(kv.getKey(), kv.getValue());
                }
            }
        }

        @Override
        public String getEventType() {
            return "ExchangeClobEvent";
        }

    }

    public static class InitExchangeEvent extends ExchangeClobEvent implements ExchangeEvent.InitExchangeEvent {

        @Override
        public String getEventType() {
            return "InitExchangeEvent";
        }

    }

    public static class TokenPairAddedToExchange extends ExchangeClobEvent implements ExchangeEvent.TokenPairAddedToExchange {

        @Override
        public String getEventType() {
            return "TokenPairAddedToExchange";
        }

        public String getTokenPairId() {
            Object val = getDynamicProperties().get("tokenPairId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setTokenPairId(String value) {
            getDynamicProperties().put("tokenPairId", value);
        }

        public String getX_TokenType() {
            Object val = getDynamicProperties().get("x_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setX_TokenType(String value) {
            getDynamicProperties().put("x_TokenType", value);
        }

        public String getY_TokenType() {
            Object val = getDynamicProperties().get("y_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setY_TokenType(String value) {
            getDynamicProperties().put("y_TokenType", value);
        }

    }

    public static class TradePoolAddedToExchange extends ExchangeClobEvent implements ExchangeEvent.TradePoolAddedToExchange {

        @Override
        public String getEventType() {
            return "TradePoolAddedToExchange";
        }

        public String getTradePoolId() {
            Object val = getDynamicProperties().get("tradePoolId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setTradePoolId(String value) {
            getDynamicProperties().put("tradePoolId", value);
        }

        public String getX_TokenType() {
            Object val = getDynamicProperties().get("x_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setX_TokenType(String value) {
            getDynamicProperties().put("x_TokenType", value);
        }

        public String getY_TokenType() {
            Object val = getDynamicProperties().get("y_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setY_TokenType(String value) {
            getDynamicProperties().put("y_TokenType", value);
        }

    }

    public static class SellPoolAddedToExchange extends ExchangeClobEvent implements ExchangeEvent.SellPoolAddedToExchange {

        @Override
        public String getEventType() {
            return "SellPoolAddedToExchange";
        }

        public String getSellPoolId() {
            Object val = getDynamicProperties().get("sellPoolId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setSellPoolId(String value) {
            getDynamicProperties().put("sellPoolId", value);
        }

        public String getX_TokenType() {
            Object val = getDynamicProperties().get("x_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setX_TokenType(String value) {
            getDynamicProperties().put("x_TokenType", value);
        }

        public String getY_TokenType() {
            Object val = getDynamicProperties().get("y_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setY_TokenType(String value) {
            getDynamicProperties().put("y_TokenType", value);
        }

    }

    public static class BuyPoolAddedToExchange extends ExchangeClobEvent implements ExchangeEvent.BuyPoolAddedToExchange {

        @Override
        public String getEventType() {
            return "BuyPoolAddedToExchange";
        }

        public String getBuyPoolId() {
            Object val = getDynamicProperties().get("buyPoolId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setBuyPoolId(String value) {
            getDynamicProperties().put("buyPoolId", value);
        }

        public String getX_TokenType() {
            Object val = getDynamicProperties().get("x_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setX_TokenType(String value) {
            getDynamicProperties().put("x_TokenType", value);
        }

        public String getY_TokenType() {
            Object val = getDynamicProperties().get("y_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setY_TokenType(String value) {
            getDynamicProperties().put("y_TokenType", value);
        }

    }

    public static class ExchangeUpdated extends ExchangeClobEvent implements ExchangeEvent.ExchangeUpdated {

        @Override
        public String getEventType() {
            return "ExchangeUpdated";
        }

        public String getName() {
            Object val = getDynamicProperties().get("name");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setName(String value) {
            getDynamicProperties().put("name", value);
        }

        public Boolean getUpdateTokenPairs() {
            Object val = getDynamicProperties().get("updateTokenPairs");
            if (val instanceof Boolean) {
                return (Boolean) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Boolean.class);
        }

        public void setUpdateTokenPairs(Boolean value) {
            getDynamicProperties().put("updateTokenPairs", value);
        }

        public String[] getTokenPairs() {
            Object val = getDynamicProperties().get("tokenPairs");
            if (val instanceof String[]) {
                return (String[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String[].class);
        }

        public void setTokenPairs(String[] value) {
            getDynamicProperties().put("tokenPairs", value);
        }

        public String[] getTokenPairX_TokenTypes() {
            Object val = getDynamicProperties().get("tokenPairX_TokenTypes");
            if (val instanceof String[]) {
                return (String[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String[].class);
        }

        public void setTokenPairX_TokenTypes(String[] value) {
            getDynamicProperties().put("tokenPairX_TokenTypes", value);
        }

        public String[] getTokenPairY_TokenTypes() {
            Object val = getDynamicProperties().get("tokenPairY_TokenTypes");
            if (val instanceof String[]) {
                return (String[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String[].class);
        }

        public void setTokenPairY_TokenTypes(String[] value) {
            getDynamicProperties().put("tokenPairY_TokenTypes", value);
        }

        public Boolean getUpdateTradePools() {
            Object val = getDynamicProperties().get("updateTradePools");
            if (val instanceof Boolean) {
                return (Boolean) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Boolean.class);
        }

        public void setUpdateTradePools(Boolean value) {
            getDynamicProperties().put("updateTradePools", value);
        }

        public String[] getTradePools() {
            Object val = getDynamicProperties().get("tradePools");
            if (val instanceof String[]) {
                return (String[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String[].class);
        }

        public void setTradePools(String[] value) {
            getDynamicProperties().put("tradePools", value);
        }

        public String[] getTradePoolX_TokenTypes() {
            Object val = getDynamicProperties().get("tradePoolX_TokenTypes");
            if (val instanceof String[]) {
                return (String[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String[].class);
        }

        public void setTradePoolX_TokenTypes(String[] value) {
            getDynamicProperties().put("tradePoolX_TokenTypes", value);
        }

        public String[] getTradePoolY_TokenTypes() {
            Object val = getDynamicProperties().get("tradePoolY_TokenTypes");
            if (val instanceof String[]) {
                return (String[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String[].class);
        }

        public void setTradePoolY_TokenTypes(String[] value) {
            getDynamicProperties().put("tradePoolY_TokenTypes", value);
        }

        public Boolean getUpdateSellPools() {
            Object val = getDynamicProperties().get("updateSellPools");
            if (val instanceof Boolean) {
                return (Boolean) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Boolean.class);
        }

        public void setUpdateSellPools(Boolean value) {
            getDynamicProperties().put("updateSellPools", value);
        }

        public String[] getSellPools() {
            Object val = getDynamicProperties().get("sellPools");
            if (val instanceof String[]) {
                return (String[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String[].class);
        }

        public void setSellPools(String[] value) {
            getDynamicProperties().put("sellPools", value);
        }

        public String[] getSellPoolX_TokenTypes() {
            Object val = getDynamicProperties().get("sellPoolX_TokenTypes");
            if (val instanceof String[]) {
                return (String[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String[].class);
        }

        public void setSellPoolX_TokenTypes(String[] value) {
            getDynamicProperties().put("sellPoolX_TokenTypes", value);
        }

        public String[] getSellPoolY_TokenTypes() {
            Object val = getDynamicProperties().get("sellPoolY_TokenTypes");
            if (val instanceof String[]) {
                return (String[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String[].class);
        }

        public void setSellPoolY_TokenTypes(String[] value) {
            getDynamicProperties().put("sellPoolY_TokenTypes", value);
        }

        public Boolean getUpdateBuyPools() {
            Object val = getDynamicProperties().get("updateBuyPools");
            if (val instanceof Boolean) {
                return (Boolean) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Boolean.class);
        }

        public void setUpdateBuyPools(Boolean value) {
            getDynamicProperties().put("updateBuyPools", value);
        }

        public String[] getBuyPools() {
            Object val = getDynamicProperties().get("buyPools");
            if (val instanceof String[]) {
                return (String[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String[].class);
        }

        public void setBuyPools(String[] value) {
            getDynamicProperties().put("buyPools", value);
        }

        public String[] getBuyPoolX_TokenTypes() {
            Object val = getDynamicProperties().get("buyPoolX_TokenTypes");
            if (val instanceof String[]) {
                return (String[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String[].class);
        }

        public void setBuyPoolX_TokenTypes(String[] value) {
            getDynamicProperties().put("buyPoolX_TokenTypes", value);
        }

        public String[] getBuyPoolY_TokenTypes() {
            Object val = getDynamicProperties().get("buyPoolY_TokenTypes");
            if (val instanceof String[]) {
                return (String[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String[].class);
        }

        public void setBuyPoolY_TokenTypes(String[] value) {
            getDynamicProperties().put("buyPoolY_TokenTypes", value);
        }

    }


}

