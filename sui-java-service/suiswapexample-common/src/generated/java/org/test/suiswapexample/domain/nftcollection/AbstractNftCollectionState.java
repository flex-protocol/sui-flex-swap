// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.domain.nftcollection;

import java.util.*;
import java.math.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.suiswapexample.domain.*;
import org.test.suiswapexample.specialization.*;
import org.test.suiswapexample.domain.nftcollection.NftCollectionEvent.*;

public abstract class AbstractNftCollectionState implements NftCollectionState.SqlNftCollectionState, Saveable {

    private String collectionType;

    public String getCollectionType() {
        return this.collectionType;
    }

    public void setCollectionType(String collectionType) {
        this.collectionType = collectionType;
    }

    private String name;

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    private String imageUrl;

    public String getImageUrl() {
        return this.imageUrl;
    }

    public void setImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
    }

    private String diPackageId;

    public String getDiPackageId() {
        return this.diPackageId;
    }

    public void setDiPackageId(String diPackageId) {
        this.diPackageId = diPackageId;
    }

    private String diBuyPoolServiceModuleName;

    public String getDiBuyPoolServiceModuleName() {
        return this.diBuyPoolServiceModuleName;
    }

    public void setDiBuyPoolServiceModuleName(String diBuyPoolServiceModuleName) {
        this.diBuyPoolServiceModuleName = diBuyPoolServiceModuleName;
    }

    private String diSellPoolServiceModuleName;

    public String getDiSellPoolServiceModuleName() {
        return this.diSellPoolServiceModuleName;
    }

    public void setDiSellPoolServiceModuleName(String diSellPoolServiceModuleName) {
        this.diSellPoolServiceModuleName = diSellPoolServiceModuleName;
    }

    private String diTradePoolServiceModuleName;

    public String getDiTradePoolServiceModuleName() {
        return this.diTradePoolServiceModuleName;
    }

    public void setDiTradePoolServiceModuleName(String diTradePoolServiceModuleName) {
        this.diTradePoolServiceModuleName = diTradePoolServiceModuleName;
    }

    private BigInteger basicUnitAmount;

    public BigInteger getBasicUnitAmount() {
        return this.basicUnitAmount;
    }

    public void setBasicUnitAmount(BigInteger basicUnitAmount) {
        this.basicUnitAmount = basicUnitAmount;
    }

    private BigInteger version;

    public BigInteger getVersion() {
        return this.version;
    }

    public void setVersion(BigInteger version) {
        this.version = version;
    }

    private Long offChainVersion;

    public Long getOffChainVersion() {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion) {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean active;

    public Boolean getActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public boolean isStateUnsaved() {
        return this.getOffChainVersion() == null;
    }

    private Set<NftCollectionSubtypeState> protectedSubtypes = new HashSet<>();

    protected Set<NftCollectionSubtypeState> getProtectedSubtypes() {
        return this.protectedSubtypes;
    }

    protected void setProtectedSubtypes(Set<NftCollectionSubtypeState> protectedSubtypes) {
        this.protectedSubtypes = protectedSubtypes;
    }

    private EntityStateCollection<String, NftCollectionSubtypeState> subtypes;

    public EntityStateCollection<String, NftCollectionSubtypeState> getSubtypes() {
        return this.subtypes;
    }

    public void setSubtypes(EntityStateCollection<String, NftCollectionSubtypeState> subtypes) {
        this.subtypes = subtypes;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractNftCollectionState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setCollectionType(((NftCollectionEvent.SqlNftCollectionEvent) events.get(0)).getNftCollectionEventId().getCollectionType());
            for (Event e : events) {
                mutate(e);
                this.setOffChainVersion((this.getOffChainVersion() == null ? NftCollectionState.VERSION_NULL : this.getOffChainVersion()) + 1);
            }
        }
    }


    public AbstractNftCollectionState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
        subtypes = new SimpleNftCollectionSubtypeStateCollection();
    }

    @Override
    public int hashCode() {
        return getCollectionType().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof NftCollectionState) {
            return Objects.equals(this.getCollectionType(), ((NftCollectionState)obj).getCollectionType());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (false) { 
            ;
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void merge(NftCollectionState s) {
        if (s == this) {
            return;
        }
        this.setName(s.getName());
        this.setImageUrl(s.getImageUrl());
        this.setDiPackageId(s.getDiPackageId());
        this.setDiBuyPoolServiceModuleName(s.getDiBuyPoolServiceModuleName());
        this.setDiSellPoolServiceModuleName(s.getDiSellPoolServiceModuleName());
        this.setDiTradePoolServiceModuleName(s.getDiTradePoolServiceModuleName());
        this.setBasicUnitAmount(s.getBasicUnitAmount());
        this.setVersion(s.getVersion());
        this.setActive(s.getActive());

        if (s.getSubtypes() != null) {
            Iterable<NftCollectionSubtypeState> iterable;
            if (s.getSubtypes().isLazy()) {
                iterable = s.getSubtypes().getLoadedStates();
            } else {
                iterable = s.getSubtypes();
            }
            if (iterable != null) {
                for (NftCollectionSubtypeState ss : iterable) {
                    NftCollectionSubtypeState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, NftCollectionSubtypeState>)this.getSubtypes()).getOrAddDefault(ss.getName());
                    ((AbstractNftCollectionSubtypeState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getSubtypes() != null) {
            if (s.getSubtypes() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getSubtypes()).getRemovedStates() != null) {
                    for (NftCollectionSubtypeState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<String, NftCollectionSubtypeState>)s.getSubtypes()).getRemovedStates()) {
                        NftCollectionSubtypeState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, NftCollectionSubtypeState>)this.getSubtypes()).getOrAddDefault(ss.getName());
                        ((EntityStateCollection.ModifiableEntityStateCollection)this.getSubtypes()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getSubtypes().isAllLoaded()) {
                    Set<String> removedStateIds = new HashSet<>(this.getSubtypes().stream().map(i -> i.getName()).collect(java.util.stream.Collectors.toList()));
                    s.getSubtypes().forEach(i -> removedStateIds.remove(i.getName()));
                    for (String i : removedStateIds) {
                        NftCollectionSubtypeState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, NftCollectionSubtypeState>)this.getSubtypes()).getOrAddDefault(i);
                        ((EntityStateCollection.ModifiableEntityStateCollection)this.getSubtypes()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }
    }

    public void save() {
        if (subtypes instanceof Saveable) {
            ((Saveable)subtypes).save();
        }
    }

    protected void throwOnWrongEvent(NftCollectionEvent event) {
        String stateEntityId = this.getCollectionType(); // Aggregate Id
        String eventEntityId = ((NftCollectionEvent.SqlNftCollectionEvent)event).getNftCollectionEventId().getCollectionType(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getOffChainVersion();

    }


    public static class SimpleNftCollectionState extends AbstractNftCollectionState {

        public SimpleNftCollectionState() {
        }

        public SimpleNftCollectionState(List<Event> events) {
            super(events);
        }

        public static SimpleNftCollectionState newForReapplying() {
            SimpleNftCollectionState s = new SimpleNftCollectionState();
            s.initializeForReapplying();
            return s;
        }

    }


    class SimpleNftCollectionSubtypeStateCollection implements EntityStateCollection.ModifiableEntityStateCollection<String, NftCollectionSubtypeState>, Collection<NftCollectionSubtypeState> {

        @Override
        public NftCollectionSubtypeState get(String name) {
            return protectedSubtypes.stream().filter(
                            e -> e.getName().equals(name))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<NftCollectionSubtypeState> getLoadedStates() {
            return protectedSubtypes;
        }

        @Override
        public NftCollectionSubtypeState getOrAddDefault(String name) {
            NftCollectionSubtypeState s = get(name);
            if (s == null) {
                NftCollectionSubtypeId globalId = new NftCollectionSubtypeId(getCollectionType(), name);
                AbstractNftCollectionSubtypeState state = new AbstractNftCollectionSubtypeState.SimpleNftCollectionSubtypeState();
                state.setNftCollectionSubtypeId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedSubtypes.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedSubtypes.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedSubtypes.contains(o);
        }

        @Override
        public Iterator<NftCollectionSubtypeState> iterator() {
            return protectedSubtypes.iterator();
        }

        @Override
        public java.util.stream.Stream<NftCollectionSubtypeState> stream() {
            return protectedSubtypes.stream();
        }

        @Override
        public Object[] toArray() {
            return protectedSubtypes.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedSubtypes.toArray(a);
        }

        @Override
        public boolean add(NftCollectionSubtypeState s) {
            if (s instanceof AbstractNftCollectionSubtypeState) {
                AbstractNftCollectionSubtypeState state = (AbstractNftCollectionSubtypeState) s;
                state.setProtectedNftCollectionState(AbstractNftCollectionState.this);
            }
            return protectedSubtypes.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractNftCollectionSubtypeState) {
                AbstractNftCollectionSubtypeState s = (AbstractNftCollectionSubtypeState) o;
                s.setProtectedNftCollectionState(null);
            }
            return protectedSubtypes.remove(o);
        }

        @Override
        public boolean removeState(NftCollectionSubtypeState s) {
            return remove(s);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedSubtypes.contains(c);
        }

        @Override
        public boolean addAll(Collection<? extends NftCollectionSubtypeState> c) {
            return protectedSubtypes.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedSubtypes.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedSubtypes.retainAll(c);
        }

        @Override
        public void clear() {
            protectedSubtypes.clear();
        }
    }


}

