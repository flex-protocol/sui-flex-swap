// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.domain.tradepool;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.suiswapexample.domain.*;
import org.test.suiswapexample.specialization.*;
import org.test.suiswapexample.domain.AbstractEvent;

public abstract class AbstractTradePoolEvent extends AbstractEvent implements TradePoolEvent.SqlTradePoolEvent, SuiEventEnvelope.MutableSuiEventEnvelope, SuiMoveEvent.MutableSuiMoveEvent, HasStatus.MutableHasStatus {
    private TradePoolEventId tradePoolEventId = new TradePoolEventId();

    public TradePoolEventId getTradePoolEventId() {
        return this.tradePoolEventId;
    }

    public void setTradePoolEventId(TradePoolEventId eventId) {
        this.tradePoolEventId = eventId;
    }
    
    public String getId() {
        return getTradePoolEventId().getId();
    }

    public void setId(String id) {
        getTradePoolEventId().setId(id);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public BigInteger getVersion() {
        return getTradePoolEventId().getVersion();
    }
    
    public void setVersion(BigInteger version) {
        getTradePoolEventId().setVersion(version);
    }

    private Long suiTimestamp;

    public Long getSuiTimestamp() {
        return this.suiTimestamp;
    }
    
    public void setSuiTimestamp(Long suiTimestamp) {
        this.suiTimestamp = suiTimestamp;
    }

    private String suiTxDigest;

    public String getSuiTxDigest() {
        return this.suiTxDigest;
    }
    
    public void setSuiTxDigest(String suiTxDigest) {
        this.suiTxDigest = suiTxDigest;
    }

    private BigInteger suiEventSeq;

    public BigInteger getSuiEventSeq() {
        return this.suiEventSeq;
    }
    
    public void setSuiEventSeq(BigInteger suiEventSeq) {
        this.suiEventSeq = suiEventSeq;
    }

    private String suiPackageId;

    public String getSuiPackageId() {
        return this.suiPackageId;
    }
    
    public void setSuiPackageId(String suiPackageId) {
        this.suiPackageId = suiPackageId;
    }

    private String suiTransactionModule;

    public String getSuiTransactionModule() {
        return this.suiTransactionModule;
    }
    
    public void setSuiTransactionModule(String suiTransactionModule) {
        this.suiTransactionModule = suiTransactionModule;
    }

    private String suiSender;

    public String getSuiSender() {
        return this.suiSender;
    }
    
    public void setSuiSender(String suiSender) {
        this.suiSender = suiSender;
    }

    private String suiType;

    public String getSuiType() {
        return this.suiType;
    }
    
    public void setSuiType(String suiType) {
        this.suiType = suiType;
    }

    private String status;

    public String getStatus() {
        return this.status;
    }
    
    public void setStatus(String status) {
        this.status = status;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    private String commandType;

    public String getCommandType() {
        return commandType;
    }

    public void setCommandType(String commandType) {
        this.commandType = commandType;
    }

    protected AbstractTradePoolEvent() {
    }

    protected AbstractTradePoolEvent(TradePoolEventId eventId) {
        this.tradePoolEventId = eventId;
    }

    protected TradePoolX_ReserveItemEventDao getTradePoolX_ReserveItemEventDao() {
        return (TradePoolX_ReserveItemEventDao)ApplicationContext.current.get("tradePoolX_ReserveItemEventDao");
    }

    protected TradePoolX_ReserveItemEventId newTradePoolX_ReserveItemEventId(String key)
    {
        TradePoolX_ReserveItemEventId eventId = new TradePoolX_ReserveItemEventId(this.getTradePoolEventId().getId(), 
            key, 
            this.getTradePoolEventId().getVersion());
        return eventId;
    }

    protected void throwOnInconsistentEventIds(TradePoolX_ReserveItemEvent.SqlTradePoolX_ReserveItemEvent e)
    {
        throwOnInconsistentEventIds(this, e);
    }

    public static void throwOnInconsistentEventIds(TradePoolEvent.SqlTradePoolEvent oe, TradePoolX_ReserveItemEvent.SqlTradePoolX_ReserveItemEvent e)
    {
        if (!oe.getTradePoolEventId().getId().equals(e.getTradePoolX_ReserveItemEventId().getTradePoolId()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id Id %1$s but inner id TradePoolId %2$s", 
                oe.getTradePoolEventId().getId(), e.getTradePoolX_ReserveItemEventId().getTradePoolId());
        }
    }

    protected TradePoolX_AmountsItemEventDao getTradePoolX_AmountsItemEventDao() {
        return (TradePoolX_AmountsItemEventDao)ApplicationContext.current.get("tradePoolX_AmountsItemEventDao");
    }

    protected TradePoolX_AmountsItemEventId newTradePoolX_AmountsItemEventId(String key)
    {
        TradePoolX_AmountsItemEventId eventId = new TradePoolX_AmountsItemEventId(this.getTradePoolEventId().getId(), 
            key, 
            this.getTradePoolEventId().getVersion());
        return eventId;
    }

    protected void throwOnInconsistentEventIds(TradePoolX_AmountsItemEvent.SqlTradePoolX_AmountsItemEvent e)
    {
        throwOnInconsistentEventIds(this, e);
    }

    public static void throwOnInconsistentEventIds(TradePoolEvent.SqlTradePoolEvent oe, TradePoolX_AmountsItemEvent.SqlTradePoolX_AmountsItemEvent e)
    {
        if (!oe.getTradePoolEventId().getId().equals(e.getTradePoolX_AmountsItemEventId().getTradePoolId()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id Id %1$s but inner id TradePoolId %2$s", 
                oe.getTradePoolEventId().getId(), e.getTradePoolX_AmountsItemEventId().getTradePoolId());
        }
    }


    public abstract String getEventType();

    public static class TradePoolClobEvent extends AbstractTradePoolEvent {

        protected Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        protected void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        protected String getDynamicPropertiesLob() {
            return ApplicationContext.current.getClobConverter().toString(getDynamicProperties());
        }

        protected void setDynamicPropertiesLob(String text) {
            getDynamicProperties().clear();
            Map<String, Object> ps = ApplicationContext.current.getClobConverter().parseLobProperties(text);
            if (ps != null) {
                for (Map.Entry<String, Object> kv : ps.entrySet()) {
                    getDynamicProperties().put(kv.getKey(), kv.getValue());
                }
            }
        }

        @Override
        public String getEventType() {
            return "TradePoolClobEvent";
        }

    }

    public static class TradePoolInitialized extends TradePoolClobEvent implements TradePoolEvent.TradePoolInitialized {

        @Override
        public String getEventType() {
            return "TradePoolInitialized";
        }

        public String getExchangeId() {
            Object val = getDynamicProperties().get("exchangeId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setExchangeId(String value) {
            getDynamicProperties().put("exchangeId", value);
        }

        public BigInteger getExchangeRateNumerator() {
            Object val = getDynamicProperties().get("exchangeRateNumerator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setExchangeRateNumerator(BigInteger value) {
            getDynamicProperties().put("exchangeRateNumerator", value);
        }

        public BigInteger getExchangeRateDenominator() {
            Object val = getDynamicProperties().get("exchangeRateDenominator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setExchangeRateDenominator(BigInteger value) {
            getDynamicProperties().put("exchangeRateDenominator", value);
        }

        public Integer getPriceCurveType() {
            Object val = getDynamicProperties().get("priceCurveType");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setPriceCurveType(Integer value) {
            getDynamicProperties().put("priceCurveType", value);
        }

        public BigInteger getPriceDeltaX_Amount() {
            Object val = getDynamicProperties().get("priceDeltaX_Amount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setPriceDeltaX_Amount(BigInteger value) {
            getDynamicProperties().put("priceDeltaX_Amount", value);
        }

        public BigInteger getPriceDeltaNumerator() {
            Object val = getDynamicProperties().get("priceDeltaNumerator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setPriceDeltaNumerator(BigInteger value) {
            getDynamicProperties().put("priceDeltaNumerator", value);
        }

        public BigInteger getPriceDeltaDenominator() {
            Object val = getDynamicProperties().get("priceDeltaDenominator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setPriceDeltaDenominator(BigInteger value) {
            getDynamicProperties().put("priceDeltaDenominator", value);
        }

        public String getProvider() {
            Object val = getDynamicProperties().get("provider");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setProvider(String value) {
            getDynamicProperties().put("provider", value);
        }

        public String getX_TokenType() {
            Object val = getDynamicProperties().get("x_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setX_TokenType(String value) {
            getDynamicProperties().put("x_TokenType", value);
        }

        public String getY_TokenType() {
            Object val = getDynamicProperties().get("y_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setY_TokenType(String value) {
            getDynamicProperties().put("y_TokenType", value);
        }

        public BigInteger getX_Amount() {
            Object val = getDynamicProperties().get("x_Amount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setX_Amount(BigInteger value) {
            getDynamicProperties().put("x_Amount", value);
        }

        public BigInteger getY_Amount() {
            Object val = getDynamicProperties().get("y_Amount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setY_Amount(BigInteger value) {
            getDynamicProperties().put("y_Amount", value);
        }

        public String getLiquidityTokenId() {
            Object val = getDynamicProperties().get("liquidityTokenId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setLiquidityTokenId(String value) {
            getDynamicProperties().put("liquidityTokenId", value);
        }

        public String getX_Id() {
            Object val = getDynamicProperties().get("x_Id");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setX_Id(String value) {
            getDynamicProperties().put("x_Id", value);
        }

    }

    public static class TradePoolWithEmptyXReserveInitialized extends TradePoolClobEvent implements TradePoolEvent.TradePoolWithEmptyXReserveInitialized {

        @Override
        public String getEventType() {
            return "TradePoolWithEmptyXReserveInitialized";
        }

        public String getExchangeId() {
            Object val = getDynamicProperties().get("exchangeId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setExchangeId(String value) {
            getDynamicProperties().put("exchangeId", value);
        }

        public BigInteger getExchangeRateNumerator() {
            Object val = getDynamicProperties().get("exchangeRateNumerator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setExchangeRateNumerator(BigInteger value) {
            getDynamicProperties().put("exchangeRateNumerator", value);
        }

        public BigInteger getExchangeRateDenominator() {
            Object val = getDynamicProperties().get("exchangeRateDenominator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setExchangeRateDenominator(BigInteger value) {
            getDynamicProperties().put("exchangeRateDenominator", value);
        }

        public Integer getPriceCurveType() {
            Object val = getDynamicProperties().get("priceCurveType");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setPriceCurveType(Integer value) {
            getDynamicProperties().put("priceCurveType", value);
        }

        public BigInteger getPriceDeltaX_Amount() {
            Object val = getDynamicProperties().get("priceDeltaX_Amount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setPriceDeltaX_Amount(BigInteger value) {
            getDynamicProperties().put("priceDeltaX_Amount", value);
        }

        public BigInteger getPriceDeltaNumerator() {
            Object val = getDynamicProperties().get("priceDeltaNumerator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setPriceDeltaNumerator(BigInteger value) {
            getDynamicProperties().put("priceDeltaNumerator", value);
        }

        public BigInteger getPriceDeltaDenominator() {
            Object val = getDynamicProperties().get("priceDeltaDenominator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setPriceDeltaDenominator(BigInteger value) {
            getDynamicProperties().put("priceDeltaDenominator", value);
        }

        public String getProvider() {
            Object val = getDynamicProperties().get("provider");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setProvider(String value) {
            getDynamicProperties().put("provider", value);
        }

        public String getX_TokenType() {
            Object val = getDynamicProperties().get("x_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setX_TokenType(String value) {
            getDynamicProperties().put("x_TokenType", value);
        }

        public String getY_TokenType() {
            Object val = getDynamicProperties().get("y_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setY_TokenType(String value) {
            getDynamicProperties().put("y_TokenType", value);
        }

        public BigInteger getY_Amount() {
            Object val = getDynamicProperties().get("y_Amount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setY_Amount(BigInteger value) {
            getDynamicProperties().put("y_Amount", value);
        }

        public String getLiquidityTokenId() {
            Object val = getDynamicProperties().get("liquidityTokenId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setLiquidityTokenId(String value) {
            getDynamicProperties().put("liquidityTokenId", value);
        }

    }

    public static class SellPoolInitialized extends TradePoolClobEvent implements TradePoolEvent.SellPoolInitialized {

        @Override
        public String getEventType() {
            return "SellPoolInitialized";
        }

        public String getExchangeId() {
            Object val = getDynamicProperties().get("exchangeId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setExchangeId(String value) {
            getDynamicProperties().put("exchangeId", value);
        }

        public BigInteger getExchangeRateNumerator() {
            Object val = getDynamicProperties().get("exchangeRateNumerator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setExchangeRateNumerator(BigInteger value) {
            getDynamicProperties().put("exchangeRateNumerator", value);
        }

        public BigInteger getExchangeRateDenominator() {
            Object val = getDynamicProperties().get("exchangeRateDenominator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setExchangeRateDenominator(BigInteger value) {
            getDynamicProperties().put("exchangeRateDenominator", value);
        }

        public Integer getPriceCurveType() {
            Object val = getDynamicProperties().get("priceCurveType");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setPriceCurveType(Integer value) {
            getDynamicProperties().put("priceCurveType", value);
        }

        public BigInteger getPriceDeltaX_Amount() {
            Object val = getDynamicProperties().get("priceDeltaX_Amount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setPriceDeltaX_Amount(BigInteger value) {
            getDynamicProperties().put("priceDeltaX_Amount", value);
        }

        public BigInteger getPriceDeltaNumerator() {
            Object val = getDynamicProperties().get("priceDeltaNumerator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setPriceDeltaNumerator(BigInteger value) {
            getDynamicProperties().put("priceDeltaNumerator", value);
        }

        public BigInteger getPriceDeltaDenominator() {
            Object val = getDynamicProperties().get("priceDeltaDenominator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setPriceDeltaDenominator(BigInteger value) {
            getDynamicProperties().put("priceDeltaDenominator", value);
        }

        public String getProvider() {
            Object val = getDynamicProperties().get("provider");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setProvider(String value) {
            getDynamicProperties().put("provider", value);
        }

        public String getX_TokenType() {
            Object val = getDynamicProperties().get("x_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setX_TokenType(String value) {
            getDynamicProperties().put("x_TokenType", value);
        }

        public String getY_TokenType() {
            Object val = getDynamicProperties().get("y_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setY_TokenType(String value) {
            getDynamicProperties().put("y_TokenType", value);
        }

        public BigInteger getX_Amount() {
            Object val = getDynamicProperties().get("x_Amount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setX_Amount(BigInteger value) {
            getDynamicProperties().put("x_Amount", value);
        }

        public String getLiquidityTokenId() {
            Object val = getDynamicProperties().get("liquidityTokenId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setLiquidityTokenId(String value) {
            getDynamicProperties().put("liquidityTokenId", value);
        }

        public String getX_Id() {
            Object val = getDynamicProperties().get("x_Id");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setX_Id(String value) {
            getDynamicProperties().put("x_Id", value);
        }

    }

    public static class BuyPoolInitialized extends TradePoolClobEvent implements TradePoolEvent.BuyPoolInitialized {

        @Override
        public String getEventType() {
            return "BuyPoolInitialized";
        }

        public String getExchangeId() {
            Object val = getDynamicProperties().get("exchangeId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setExchangeId(String value) {
            getDynamicProperties().put("exchangeId", value);
        }

        public BigInteger getExchangeRateNumerator() {
            Object val = getDynamicProperties().get("exchangeRateNumerator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setExchangeRateNumerator(BigInteger value) {
            getDynamicProperties().put("exchangeRateNumerator", value);
        }

        public BigInteger getExchangeRateDenominator() {
            Object val = getDynamicProperties().get("exchangeRateDenominator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setExchangeRateDenominator(BigInteger value) {
            getDynamicProperties().put("exchangeRateDenominator", value);
        }

        public Integer getPriceCurveType() {
            Object val = getDynamicProperties().get("priceCurveType");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setPriceCurveType(Integer value) {
            getDynamicProperties().put("priceCurveType", value);
        }

        public BigInteger getPriceDeltaX_Amount() {
            Object val = getDynamicProperties().get("priceDeltaX_Amount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setPriceDeltaX_Amount(BigInteger value) {
            getDynamicProperties().put("priceDeltaX_Amount", value);
        }

        public BigInteger getPriceDeltaNumerator() {
            Object val = getDynamicProperties().get("priceDeltaNumerator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setPriceDeltaNumerator(BigInteger value) {
            getDynamicProperties().put("priceDeltaNumerator", value);
        }

        public BigInteger getPriceDeltaDenominator() {
            Object val = getDynamicProperties().get("priceDeltaDenominator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setPriceDeltaDenominator(BigInteger value) {
            getDynamicProperties().put("priceDeltaDenominator", value);
        }

        public String getProvider() {
            Object val = getDynamicProperties().get("provider");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setProvider(String value) {
            getDynamicProperties().put("provider", value);
        }

        public String getX_TokenType() {
            Object val = getDynamicProperties().get("x_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setX_TokenType(String value) {
            getDynamicProperties().put("x_TokenType", value);
        }

        public String getY_TokenType() {
            Object val = getDynamicProperties().get("y_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setY_TokenType(String value) {
            getDynamicProperties().put("y_TokenType", value);
        }

        public BigInteger getY_Amount() {
            Object val = getDynamicProperties().get("y_Amount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setY_Amount(BigInteger value) {
            getDynamicProperties().put("y_Amount", value);
        }

        public String getLiquidityTokenId() {
            Object val = getDynamicProperties().get("liquidityTokenId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setLiquidityTokenId(String value) {
            getDynamicProperties().put("liquidityTokenId", value);
        }

    }

    public static class PoolExchangeRateUpdated extends TradePoolClobEvent implements TradePoolEvent.PoolExchangeRateUpdated {

        @Override
        public String getEventType() {
            return "PoolExchangeRateUpdated";
        }

        public String getLiquidityTokenId() {
            Object val = getDynamicProperties().get("liquidityTokenId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setLiquidityTokenId(String value) {
            getDynamicProperties().put("liquidityTokenId", value);
        }

        public BigInteger getStartExchangeRateNumerator() {
            Object val = getDynamicProperties().get("startExchangeRateNumerator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setStartExchangeRateNumerator(BigInteger value) {
            getDynamicProperties().put("startExchangeRateNumerator", value);
        }

        public BigInteger getExchangeRateNumerator() {
            Object val = getDynamicProperties().get("exchangeRateNumerator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setExchangeRateNumerator(BigInteger value) {
            getDynamicProperties().put("exchangeRateNumerator", value);
        }

        public BigInteger getExchangeRateDenominator() {
            Object val = getDynamicProperties().get("exchangeRateDenominator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setExchangeRateDenominator(BigInteger value) {
            getDynamicProperties().put("exchangeRateDenominator", value);
        }

        public BigInteger getPriceDeltaX_Amount() {
            Object val = getDynamicProperties().get("priceDeltaX_Amount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setPriceDeltaX_Amount(BigInteger value) {
            getDynamicProperties().put("priceDeltaX_Amount", value);
        }

        public BigInteger getPriceDeltaNumerator() {
            Object val = getDynamicProperties().get("priceDeltaNumerator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setPriceDeltaNumerator(BigInteger value) {
            getDynamicProperties().put("priceDeltaNumerator", value);
        }

        public BigInteger getPriceDeltaDenominator() {
            Object val = getDynamicProperties().get("priceDeltaDenominator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setPriceDeltaDenominator(BigInteger value) {
            getDynamicProperties().put("priceDeltaDenominator", value);
        }

        public String getProvider() {
            Object val = getDynamicProperties().get("provider");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setProvider(String value) {
            getDynamicProperties().put("provider", value);
        }

        public String getX_TokenType() {
            Object val = getDynamicProperties().get("x_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setX_TokenType(String value) {
            getDynamicProperties().put("x_TokenType", value);
        }

        public String getY_TokenType() {
            Object val = getDynamicProperties().get("y_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setY_TokenType(String value) {
            getDynamicProperties().put("y_TokenType", value);
        }

    }

    public static class PoolXTokenAdded extends TradePoolClobEvent implements TradePoolEvent.PoolXTokenAdded {

        @Override
        public String getEventType() {
            return "PoolXTokenAdded";
        }

        public String getLiquidityTokenId() {
            Object val = getDynamicProperties().get("liquidityTokenId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setLiquidityTokenId(String value) {
            getDynamicProperties().put("liquidityTokenId", value);
        }

        public String getProvider() {
            Object val = getDynamicProperties().get("provider");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setProvider(String value) {
            getDynamicProperties().put("provider", value);
        }

        public String getX_TokenType() {
            Object val = getDynamicProperties().get("x_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setX_TokenType(String value) {
            getDynamicProperties().put("x_TokenType", value);
        }

        public String getY_TokenType() {
            Object val = getDynamicProperties().get("y_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setY_TokenType(String value) {
            getDynamicProperties().put("y_TokenType", value);
        }

        public BigInteger getX_Amount() {
            Object val = getDynamicProperties().get("x_Amount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setX_Amount(BigInteger value) {
            getDynamicProperties().put("x_Amount", value);
        }

        public String getX_Id() {
            Object val = getDynamicProperties().get("x_Id");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setX_Id(String value) {
            getDynamicProperties().put("x_Id", value);
        }

    }

    public static class PoolXTokenRemoved extends TradePoolClobEvent implements TradePoolEvent.PoolXTokenRemoved {

        @Override
        public String getEventType() {
            return "PoolXTokenRemoved";
        }

        public String getLiquidityTokenId() {
            Object val = getDynamicProperties().get("liquidityTokenId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setLiquidityTokenId(String value) {
            getDynamicProperties().put("liquidityTokenId", value);
        }

        public String getX_Id() {
            Object val = getDynamicProperties().get("x_Id");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setX_Id(String value) {
            getDynamicProperties().put("x_Id", value);
        }

        public String getProvider() {
            Object val = getDynamicProperties().get("provider");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setProvider(String value) {
            getDynamicProperties().put("provider", value);
        }

        public String getX_TokenType() {
            Object val = getDynamicProperties().get("x_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setX_TokenType(String value) {
            getDynamicProperties().put("x_TokenType", value);
        }

        public String getY_TokenType() {
            Object val = getDynamicProperties().get("y_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setY_TokenType(String value) {
            getDynamicProperties().put("y_TokenType", value);
        }

        public BigInteger getX_Amount() {
            Object val = getDynamicProperties().get("x_Amount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setX_Amount(BigInteger value) {
            getDynamicProperties().put("x_Amount", value);
        }

    }

    public static class PoolYReserveDeposited extends TradePoolClobEvent implements TradePoolEvent.PoolYReserveDeposited {

        @Override
        public String getEventType() {
            return "PoolYReserveDeposited";
        }

        public String getLiquidityTokenId() {
            Object val = getDynamicProperties().get("liquidityTokenId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setLiquidityTokenId(String value) {
            getDynamicProperties().put("liquidityTokenId", value);
        }

        public String getX_TokenType() {
            Object val = getDynamicProperties().get("x_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setX_TokenType(String value) {
            getDynamicProperties().put("x_TokenType", value);
        }

        public String getY_TokenType() {
            Object val = getDynamicProperties().get("y_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setY_TokenType(String value) {
            getDynamicProperties().put("y_TokenType", value);
        }

        public BigInteger getY_Amount() {
            Object val = getDynamicProperties().get("y_Amount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setY_Amount(BigInteger value) {
            getDynamicProperties().put("y_Amount", value);
        }

    }

    public static class PoolYReserveWithdrawn extends TradePoolClobEvent implements TradePoolEvent.PoolYReserveWithdrawn {

        @Override
        public String getEventType() {
            return "PoolYReserveWithdrawn";
        }

        public String getLiquidityTokenId() {
            Object val = getDynamicProperties().get("liquidityTokenId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setLiquidityTokenId(String value) {
            getDynamicProperties().put("liquidityTokenId", value);
        }

        public BigInteger getY_Amount() {
            Object val = getDynamicProperties().get("y_Amount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setY_Amount(BigInteger value) {
            getDynamicProperties().put("y_Amount", value);
        }

        public String getX_TokenType() {
            Object val = getDynamicProperties().get("x_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setX_TokenType(String value) {
            getDynamicProperties().put("x_TokenType", value);
        }

        public String getY_TokenType() {
            Object val = getDynamicProperties().get("y_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setY_TokenType(String value) {
            getDynamicProperties().put("y_TokenType", value);
        }

    }

    public static class PoolDestroyed extends TradePoolClobEvent implements TradePoolEvent.PoolDestroyed {

        @Override
        public String getEventType() {
            return "PoolDestroyed";
        }

        public String getLiquidityTokenId() {
            Object val = getDynamicProperties().get("liquidityTokenId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setLiquidityTokenId(String value) {
            getDynamicProperties().put("liquidityTokenId", value);
        }

    }

    public static class PoolYSwappedForX extends TradePoolClobEvent implements TradePoolEvent.PoolYSwappedForX {

        @Override
        public String getEventType() {
            return "PoolYSwappedForX";
        }

        public String getX_Id() {
            Object val = getDynamicProperties().get("x_Id");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setX_Id(String value) {
            getDynamicProperties().put("x_Id", value);
        }

        public String getSender() {
            Object val = getDynamicProperties().get("sender");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setSender(String value) {
            getDynamicProperties().put("sender", value);
        }

        public String getX_TokenType() {
            Object val = getDynamicProperties().get("x_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setX_TokenType(String value) {
            getDynamicProperties().put("x_TokenType", value);
        }

        public String getY_TokenType() {
            Object val = getDynamicProperties().get("y_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setY_TokenType(String value) {
            getDynamicProperties().put("y_TokenType", value);
        }

        public BigInteger getX_Amount() {
            Object val = getDynamicProperties().get("x_Amount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setX_Amount(BigInteger value) {
            getDynamicProperties().put("x_Amount", value);
        }

        public BigInteger getY_Amount() {
            Object val = getDynamicProperties().get("y_Amount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setY_Amount(BigInteger value) {
            getDynamicProperties().put("y_Amount", value);
        }

        public BigInteger getNewExchangeRateNumerator() {
            Object val = getDynamicProperties().get("newExchangeRateNumerator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setNewExchangeRateNumerator(BigInteger value) {
            getDynamicProperties().put("newExchangeRateNumerator", value);
        }

    }

    public static class PoolXSwappedForY extends TradePoolClobEvent implements TradePoolEvent.PoolXSwappedForY {

        @Override
        public String getEventType() {
            return "PoolXSwappedForY";
        }

        public BigInteger getExpectedY_AmountOut() {
            Object val = getDynamicProperties().get("expectedY_AmountOut");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setExpectedY_AmountOut(BigInteger value) {
            getDynamicProperties().put("expectedY_AmountOut", value);
        }

        public String getSender() {
            Object val = getDynamicProperties().get("sender");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setSender(String value) {
            getDynamicProperties().put("sender", value);
        }

        public String getX_TokenType() {
            Object val = getDynamicProperties().get("x_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setX_TokenType(String value) {
            getDynamicProperties().put("x_TokenType", value);
        }

        public String getY_TokenType() {
            Object val = getDynamicProperties().get("y_TokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setY_TokenType(String value) {
            getDynamicProperties().put("y_TokenType", value);
        }

        public BigInteger getX_Amount() {
            Object val = getDynamicProperties().get("x_Amount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setX_Amount(BigInteger value) {
            getDynamicProperties().put("x_Amount", value);
        }

        public BigInteger getY_Amount() {
            Object val = getDynamicProperties().get("y_Amount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setY_Amount(BigInteger value) {
            getDynamicProperties().put("y_Amount", value);
        }

        public String getX_Id() {
            Object val = getDynamicProperties().get("x_Id");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setX_Id(String value) {
            getDynamicProperties().put("x_Id", value);
        }

        public BigInteger getNewExchangeRateNumerator() {
            Object val = getDynamicProperties().get("newExchangeRateNumerator");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setNewExchangeRateNumerator(BigInteger value) {
            getDynamicProperties().put("newExchangeRateNumerator", value);
        }

    }


}

