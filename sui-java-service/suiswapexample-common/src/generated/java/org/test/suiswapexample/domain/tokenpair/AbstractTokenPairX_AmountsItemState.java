// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.domain.tokenpair;

import java.util.*;
import java.math.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.suiswapexample.domain.*;
import org.test.suiswapexample.specialization.*;
import org.test.suiswapexample.domain.tokenpair.TokenPairX_AmountsItemEvent.*;

public abstract class AbstractTokenPairX_AmountsItemState implements TokenPairX_AmountsItemState.SqlTokenPairX_AmountsItemState {

    private TokenPairX_AmountsItemId tokenPairX_AmountsItemId = new TokenPairX_AmountsItemId();

    public TokenPairX_AmountsItemId getTokenPairX_AmountsItemId() {
        return this.tokenPairX_AmountsItemId;
    }

    public void setTokenPairX_AmountsItemId(TokenPairX_AmountsItemId tokenPairX_AmountsItemId) {
        this.tokenPairX_AmountsItemId = tokenPairX_AmountsItemId;
    }

    private transient TokenPairState tokenPairState;

    public TokenPairState getTokenPairState() {
        return tokenPairState;
    }

    public void setTokenPairState(TokenPairState s) {
        tokenPairState = s;
    }
    
    private TokenPairState protectedTokenPairState;

    protected TokenPairState getProtectedTokenPairState() {
        return protectedTokenPairState;
    }

    protected void setProtectedTokenPairState(TokenPairState protectedTokenPairState) {
        this.protectedTokenPairState = protectedTokenPairState;
    }

    public String getTokenPairId() {
        return this.getTokenPairX_AmountsItemId().getTokenPairId();
    }
        
    public void setTokenPairId(String tokenPairId) {
        this.getTokenPairX_AmountsItemId().setTokenPairId(tokenPairId);
    }

    public String getKey() {
        return this.getTokenPairX_AmountsItemId().getKey();
    }
        
    public void setKey(String key) {
        this.getTokenPairX_AmountsItemId().setKey(key);
    }

    private BigInteger value;

    public BigInteger getValue() {
        return this.value;
    }

    public void setValue(BigInteger value) {
        this.value = value;
    }

    private Long offChainVersion;

    public Long getOffChainVersion() {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion) {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean active;

    public Boolean getActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public boolean isStateUnsaved() {
        return this.getOffChainVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }


    public AbstractTokenPairX_AmountsItemState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getKey().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof TokenPairX_AmountsItemState) {
            return Objects.equals(this.getKey(), ((TokenPairX_AmountsItemState)obj).getKey());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (false) { 
            ;
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void merge(TokenPairX_AmountsItemState s) {
        if (s == this) {
            return;
        }
        this.setValue(s.getValue());
        this.setActive(s.getActive());
    }

    public void save() {
    }

    protected void throwOnWrongEvent(TokenPairX_AmountsItemEvent event) {
        String stateEntityIdTokenPairId = this.getTokenPairX_AmountsItemId().getTokenPairId();
        String eventEntityIdTokenPairId = ((TokenPairX_AmountsItemEvent.SqlTokenPairX_AmountsItemEvent)event).getTokenPairX_AmountsItemEventId().getTokenPairId();
        if (!stateEntityIdTokenPairId.equals(eventEntityIdTokenPairId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id TokenPairId %1$s in state but entity id TokenPairId %2$s in event", stateEntityIdTokenPairId, eventEntityIdTokenPairId);
        }

        String stateEntityIdKey = this.getTokenPairX_AmountsItemId().getKey();
        String eventEntityIdKey = ((TokenPairX_AmountsItemEvent.SqlTokenPairX_AmountsItemEvent)event).getTokenPairX_AmountsItemEventId().getKey();
        if (!stateEntityIdKey.equals(eventEntityIdKey)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id Key %1$s in state but entity id Key %2$s in event", stateEntityIdKey, eventEntityIdKey);
        }


        if (getForReapplying()) { return; }

    }


    public static class SimpleTokenPairX_AmountsItemState extends AbstractTokenPairX_AmountsItemState {

        public SimpleTokenPairX_AmountsItemState() {
        }

        public static SimpleTokenPairX_AmountsItemState newForReapplying() {
            SimpleTokenPairX_AmountsItemState s = new SimpleTokenPairX_AmountsItemState();
            s.initializeForReapplying();
            return s;
        }

    }



}

