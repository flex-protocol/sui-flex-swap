// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.domain.tradepool;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.suiswapexample.domain.*;
import org.test.suiswapexample.specialization.*;

public abstract class AbstractTradePoolAggregate extends AbstractAggregate implements TradePoolAggregate {
    private TradePoolState.MutableTradePoolState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractTradePoolAggregate(TradePoolState state) {
        this.state = (TradePoolState.MutableTradePoolState)state;
    }

    public TradePoolState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        TradePoolCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleTradePoolAggregate extends AbstractTradePoolAggregate {
        public SimpleTradePoolAggregate(TradePoolState state) {
            super(state);
        }

        @Override
        public void updateExchangeRate(String liquidityToken, BigInteger startExchangeRateNumerator, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, Long offChainVersion, String commandId, String requesterId, TradePoolCommands.UpdateExchangeRate c) {
            java.util.function.Supplier<TradePoolEvent.PoolExchangeRateUpdated> eventFactory = () -> newPoolExchangeRateUpdated(liquidityToken, startExchangeRateNumerator, exchangeRateNumerator, exchangeRateDenominator, priceDeltaX_Amount, priceDeltaNumerator, priceDeltaDenominator, offChainVersion, commandId, requesterId);
            TradePoolEvent.PoolExchangeRateUpdated e;
            try {
                e = verifyUpdateExchangeRate(eventFactory, startExchangeRateNumerator, exchangeRateNumerator, exchangeRateDenominator, priceDeltaX_Amount, priceDeltaNumerator, priceDeltaDenominator, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void destroy(String liquidityToken, Long offChainVersion, String commandId, String requesterId, TradePoolCommands.Destroy c) {
            java.util.function.Supplier<TradePoolEvent.PoolDestroyed> eventFactory = () -> newPoolDestroyed(liquidityToken, offChainVersion, commandId, requesterId);
            TradePoolEvent.PoolDestroyed e;
            try {
                e = verifyDestroy(eventFactory, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected TradePoolEvent.TradePoolInitialized verifyInitializeTradePool(java.util.function.Supplier<TradePoolEvent.TradePoolInitialized> eventFactory, String exchange, BigInteger x_Amount, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, Integer priceCurveType, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, TradePoolCommands.InitializeTradePool c) {
            String Exchange = exchange;
            BigInteger X_Amount = x_Amount;
            BigInteger ExchangeRateNumerator = exchangeRateNumerator;
            BigInteger ExchangeRateDenominator = exchangeRateDenominator;
            Integer PriceCurveType = priceCurveType;
            BigInteger PriceDeltaX_Amount = priceDeltaX_Amount;
            BigInteger PriceDeltaNumerator = priceDeltaNumerator;
            BigInteger PriceDeltaDenominator = priceDeltaDenominator;

            TradePoolEvent.TradePoolInitialized e = (TradePoolEvent.TradePoolInitialized) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tradepool.InitializeTradePoolLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TradePoolState.class, String.class, BigInteger.class, BigInteger.class, BigInteger.class, Integer.class, BigInteger.class, BigInteger.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), exchange, x_Amount, exchangeRateNumerator, exchangeRateDenominator, priceCurveType, priceDeltaX_Amount, priceDeltaNumerator, priceDeltaDenominator, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tradepool;
//
//public class InitializeTradePoolLogic {
//    public static TradePoolEvent.TradePoolInitialized verify(java.util.function.Supplier<TradePoolEvent.TradePoolInitialized> eventFactory, TradePoolState tradePoolState, String exchange, BigInteger x_Amount, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, Integer priceCurveType, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected TradePoolEvent.TradePoolWithEmptyXReserveInitialized verifyInitializeTradePoolWithEmptyX_Reserve(java.util.function.Supplier<TradePoolEvent.TradePoolWithEmptyXReserveInitialized> eventFactory, String exchange, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, Integer priceCurveType, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, TradePoolCommands.InitializeTradePoolWithEmptyX_Reserve c) {
            String Exchange = exchange;
            BigInteger ExchangeRateNumerator = exchangeRateNumerator;
            BigInteger ExchangeRateDenominator = exchangeRateDenominator;
            Integer PriceCurveType = priceCurveType;
            BigInteger PriceDeltaX_Amount = priceDeltaX_Amount;
            BigInteger PriceDeltaNumerator = priceDeltaNumerator;
            BigInteger PriceDeltaDenominator = priceDeltaDenominator;

            TradePoolEvent.TradePoolWithEmptyXReserveInitialized e = (TradePoolEvent.TradePoolWithEmptyXReserveInitialized) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tradepool.InitializeTradePoolWithEmptyX_ReserveLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TradePoolState.class, String.class, BigInteger.class, BigInteger.class, Integer.class, BigInteger.class, BigInteger.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), exchange, exchangeRateNumerator, exchangeRateDenominator, priceCurveType, priceDeltaX_Amount, priceDeltaNumerator, priceDeltaDenominator, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tradepool;
//
//public class InitializeTradePoolWithEmptyX_ReserveLogic {
//    public static TradePoolEvent.TradePoolWithEmptyXReserveInitialized verify(java.util.function.Supplier<TradePoolEvent.TradePoolWithEmptyXReserveInitialized> eventFactory, TradePoolState tradePoolState, String exchange, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, Integer priceCurveType, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected TradePoolEvent.SellPoolInitialized verifyInitializeSellPool(java.util.function.Supplier<TradePoolEvent.SellPoolInitialized> eventFactory, String exchange, BigInteger x_Amount, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, Integer priceCurveType, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, TradePoolCommands.InitializeSellPool c) {
            String Exchange = exchange;
            BigInteger X_Amount = x_Amount;
            BigInteger ExchangeRateNumerator = exchangeRateNumerator;
            BigInteger ExchangeRateDenominator = exchangeRateDenominator;
            Integer PriceCurveType = priceCurveType;
            BigInteger PriceDeltaX_Amount = priceDeltaX_Amount;
            BigInteger PriceDeltaNumerator = priceDeltaNumerator;
            BigInteger PriceDeltaDenominator = priceDeltaDenominator;

            TradePoolEvent.SellPoolInitialized e = (TradePoolEvent.SellPoolInitialized) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tradepool.InitializeSellPoolLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TradePoolState.class, String.class, BigInteger.class, BigInteger.class, BigInteger.class, Integer.class, BigInteger.class, BigInteger.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), exchange, x_Amount, exchangeRateNumerator, exchangeRateDenominator, priceCurveType, priceDeltaX_Amount, priceDeltaNumerator, priceDeltaDenominator, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tradepool;
//
//public class InitializeSellPoolLogic {
//    public static TradePoolEvent.SellPoolInitialized verify(java.util.function.Supplier<TradePoolEvent.SellPoolInitialized> eventFactory, TradePoolState tradePoolState, String exchange, BigInteger x_Amount, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, Integer priceCurveType, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected TradePoolEvent.BuyPoolInitialized verifyInitializeBuyPool(java.util.function.Supplier<TradePoolEvent.BuyPoolInitialized> eventFactory, String exchange, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, Integer priceCurveType, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, TradePoolCommands.InitializeBuyPool c) {
            String Exchange = exchange;
            BigInteger ExchangeRateNumerator = exchangeRateNumerator;
            BigInteger ExchangeRateDenominator = exchangeRateDenominator;
            Integer PriceCurveType = priceCurveType;
            BigInteger PriceDeltaX_Amount = priceDeltaX_Amount;
            BigInteger PriceDeltaNumerator = priceDeltaNumerator;
            BigInteger PriceDeltaDenominator = priceDeltaDenominator;

            TradePoolEvent.BuyPoolInitialized e = (TradePoolEvent.BuyPoolInitialized) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tradepool.InitializeBuyPoolLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TradePoolState.class, String.class, BigInteger.class, BigInteger.class, Integer.class, BigInteger.class, BigInteger.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), exchange, exchangeRateNumerator, exchangeRateDenominator, priceCurveType, priceDeltaX_Amount, priceDeltaNumerator, priceDeltaDenominator, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tradepool;
//
//public class InitializeBuyPoolLogic {
//    public static TradePoolEvent.BuyPoolInitialized verify(java.util.function.Supplier<TradePoolEvent.BuyPoolInitialized> eventFactory, TradePoolState tradePoolState, String exchange, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, Integer priceCurveType, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected TradePoolEvent.PoolExchangeRateUpdated verifyUpdateExchangeRate(java.util.function.Supplier<TradePoolEvent.PoolExchangeRateUpdated> eventFactory, BigInteger startExchangeRateNumerator, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, TradePoolCommands.UpdateExchangeRate c) {
            BigInteger StartExchangeRateNumerator = startExchangeRateNumerator;
            BigInteger ExchangeRateNumerator = exchangeRateNumerator;
            BigInteger ExchangeRateDenominator = exchangeRateDenominator;
            BigInteger PriceDeltaX_Amount = priceDeltaX_Amount;
            BigInteger PriceDeltaNumerator = priceDeltaNumerator;
            BigInteger PriceDeltaDenominator = priceDeltaDenominator;

            TradePoolEvent.PoolExchangeRateUpdated e = (TradePoolEvent.PoolExchangeRateUpdated) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tradepool.UpdateExchangeRateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TradePoolState.class, BigInteger.class, BigInteger.class, BigInteger.class, BigInteger.class, BigInteger.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), startExchangeRateNumerator, exchangeRateNumerator, exchangeRateDenominator, priceDeltaX_Amount, priceDeltaNumerator, priceDeltaDenominator, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tradepool;
//
//public class UpdateExchangeRateLogic {
//    public static TradePoolEvent.PoolExchangeRateUpdated verify(java.util.function.Supplier<TradePoolEvent.PoolExchangeRateUpdated> eventFactory, TradePoolState tradePoolState, BigInteger startExchangeRateNumerator, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected TradePoolEvent.PoolXTokenAdded verifyAddXToken(java.util.function.Supplier<TradePoolEvent.PoolXTokenAdded> eventFactory, BigInteger x_Amount, TradePoolCommands.AddXToken c) {
            BigInteger X_Amount = x_Amount;

            TradePoolEvent.PoolXTokenAdded e = (TradePoolEvent.PoolXTokenAdded) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tradepool.AddXTokenLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TradePoolState.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), x_Amount, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tradepool;
//
//public class AddXTokenLogic {
//    public static TradePoolEvent.PoolXTokenAdded verify(java.util.function.Supplier<TradePoolEvent.PoolXTokenAdded> eventFactory, TradePoolState tradePoolState, BigInteger x_Amount, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected TradePoolEvent.PoolXTokenRemoved verifyRemoveXToken(java.util.function.Supplier<TradePoolEvent.PoolXTokenRemoved> eventFactory, String x_Id, TradePoolCommands.RemoveXToken c) {
            String X_Id = x_Id;

            TradePoolEvent.PoolXTokenRemoved e = (TradePoolEvent.PoolXTokenRemoved) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tradepool.RemoveXTokenLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TradePoolState.class, String.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), x_Id, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tradepool;
//
//public class RemoveXTokenLogic {
//    public static TradePoolEvent.PoolXTokenRemoved verify(java.util.function.Supplier<TradePoolEvent.PoolXTokenRemoved> eventFactory, TradePoolState tradePoolState, String x_Id, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected TradePoolEvent.PoolYReserveDeposited verifyDepositYReserve(java.util.function.Supplier<TradePoolEvent.PoolYReserveDeposited> eventFactory, TradePoolCommands.DepositYReserve c) {

            TradePoolEvent.PoolYReserveDeposited e = (TradePoolEvent.PoolYReserveDeposited) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tradepool.DepositYReserveLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TradePoolState.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tradepool;
//
//public class DepositYReserveLogic {
//    public static TradePoolEvent.PoolYReserveDeposited verify(java.util.function.Supplier<TradePoolEvent.PoolYReserveDeposited> eventFactory, TradePoolState tradePoolState, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected TradePoolEvent.PoolYReserveWithdrawn verifyWithdrawYReserve(java.util.function.Supplier<TradePoolEvent.PoolYReserveWithdrawn> eventFactory, BigInteger y_Amount, TradePoolCommands.WithdrawYReserve c) {
            BigInteger Y_Amount = y_Amount;

            TradePoolEvent.PoolYReserveWithdrawn e = (TradePoolEvent.PoolYReserveWithdrawn) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tradepool.WithdrawYReserveLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TradePoolState.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), y_Amount, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tradepool;
//
//public class WithdrawYReserveLogic {
//    public static TradePoolEvent.PoolYReserveWithdrawn verify(java.util.function.Supplier<TradePoolEvent.PoolYReserveWithdrawn> eventFactory, TradePoolState tradePoolState, BigInteger y_Amount, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected TradePoolEvent.PoolDestroyed verifyDestroy(java.util.function.Supplier<TradePoolEvent.PoolDestroyed> eventFactory, TradePoolCommands.Destroy c) {

            TradePoolEvent.PoolDestroyed e = (TradePoolEvent.PoolDestroyed) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tradepool.DestroyLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TradePoolState.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tradepool;
//
//public class DestroyLogic {
//    public static TradePoolEvent.PoolDestroyed verify(java.util.function.Supplier<TradePoolEvent.PoolDestroyed> eventFactory, TradePoolState tradePoolState, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected TradePoolEvent.PoolYSwappedForX verifyBuyX(java.util.function.Supplier<TradePoolEvent.PoolYSwappedForX> eventFactory, String x_Id, TradePoolCommands.BuyX c) {
            String X_Id = x_Id;

            TradePoolEvent.PoolYSwappedForX e = (TradePoolEvent.PoolYSwappedForX) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tradepool.BuyXLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TradePoolState.class, String.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), x_Id, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tradepool;
//
//public class BuyXLogic {
//    public static TradePoolEvent.PoolYSwappedForX verify(java.util.function.Supplier<TradePoolEvent.PoolYSwappedForX> eventFactory, TradePoolState tradePoolState, String x_Id, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected TradePoolEvent.PoolXSwappedForY verifySellX(java.util.function.Supplier<TradePoolEvent.PoolXSwappedForY> eventFactory, BigInteger x_Amount, BigInteger expectedY_AmountOut, TradePoolCommands.SellX c) {
            BigInteger X_Amount = x_Amount;
            BigInteger ExpectedY_AmountOut = expectedY_AmountOut;

            TradePoolEvent.PoolXSwappedForY e = (TradePoolEvent.PoolXSwappedForY) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tradepool.SellXLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TradePoolState.class, BigInteger.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), x_Amount, expectedY_AmountOut, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tradepool;
//
//public class SellXLogic {
//    public static TradePoolEvent.PoolXSwappedForY verify(java.util.function.Supplier<TradePoolEvent.PoolXSwappedForY> eventFactory, TradePoolState tradePoolState, BigInteger x_Amount, BigInteger expectedY_AmountOut, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected AbstractTradePoolEvent.PoolExchangeRateUpdated newPoolExchangeRateUpdated(String liquidityToken, BigInteger startExchangeRateNumerator, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, Long offChainVersion, String commandId, String requesterId) {
            TradePoolEventId eventId = new TradePoolEventId(getState().getId(), null);
            AbstractTradePoolEvent.PoolExchangeRateUpdated e = new AbstractTradePoolEvent.PoolExchangeRateUpdated();

            e.setLiquidityTokenId(null);
            e.setStartExchangeRateNumerator(startExchangeRateNumerator);
            e.setExchangeRateNumerator(exchangeRateNumerator);
            e.setExchangeRateDenominator(exchangeRateDenominator);
            e.setPriceDeltaX_Amount(priceDeltaX_Amount);
            e.setPriceDeltaNumerator(priceDeltaNumerator);
            e.setPriceDeltaDenominator(priceDeltaDenominator);
            e.setProvider(null);
            e.setX_TokenType(null);
            e.setY_TokenType(null);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setTradePoolEventId(eventId);
            return e;
        }

        protected AbstractTradePoolEvent.PoolDestroyed newPoolDestroyed(String liquidityToken, Long offChainVersion, String commandId, String requesterId) {
            TradePoolEventId eventId = new TradePoolEventId(getState().getId(), null);
            AbstractTradePoolEvent.PoolDestroyed e = new AbstractTradePoolEvent.PoolDestroyed();

            e.setLiquidityTokenId(null);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setTradePoolEventId(eventId);
            return e;
        }

    }

}

