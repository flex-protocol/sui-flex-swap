// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.domain.liquiditytoken;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.suiswapexample.domain.*;
import org.test.suiswapexample.specialization.*;

public abstract class AbstractLiquidityTokenAggregate extends AbstractAggregate implements LiquidityTokenAggregate {
    private LiquidityTokenState.MutableLiquidityTokenState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractLiquidityTokenAggregate(LiquidityTokenState state) {
        this.state = (LiquidityTokenState.MutableLiquidityTokenState)state;
    }

    public LiquidityTokenState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        LiquidityTokenCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleLiquidityTokenAggregate extends AbstractLiquidityTokenAggregate {
        public SimpleLiquidityTokenAggregate(LiquidityTokenState state) {
            super(state);
        }

        @Override
        public void mint(String x_TokenType, BigInteger amount, Long offChainVersion, String commandId, String requesterId, LiquidityTokenCommands.Mint c) {
            java.util.function.Supplier<LiquidityTokenEvent.LiquidityTokenMinted> eventFactory = () -> newLiquidityTokenMinted(x_TokenType, amount, offChainVersion, commandId, requesterId);
            LiquidityTokenEvent.LiquidityTokenMinted e;
            try {
                e = verifyMint(eventFactory, x_TokenType, amount, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void destroy(Long offChainVersion, String commandId, String requesterId, LiquidityTokenCommands.Destroy c) {
            java.util.function.Supplier<LiquidityTokenEvent.LiquidityTokenDestroyed> eventFactory = () -> newLiquidityTokenDestroyed(offChainVersion, commandId, requesterId);
            LiquidityTokenEvent.LiquidityTokenDestroyed e;
            try {
                e = verifyDestroy(eventFactory, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected LiquidityTokenEvent.LiquidityTokenMinted verifyMint(java.util.function.Supplier<LiquidityTokenEvent.LiquidityTokenMinted> eventFactory, String x_TokenType, BigInteger amount, LiquidityTokenCommands.Mint c) {
            String X_TokenType = x_TokenType;
            BigInteger Amount = amount;

            LiquidityTokenEvent.LiquidityTokenMinted e = (LiquidityTokenEvent.LiquidityTokenMinted) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.liquiditytoken.MintLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, LiquidityTokenState.class, String.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), x_TokenType, amount, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.liquiditytoken;
//
//public class MintLogic {
//    public static LiquidityTokenEvent.LiquidityTokenMinted verify(java.util.function.Supplier<LiquidityTokenEvent.LiquidityTokenMinted> eventFactory, LiquidityTokenState liquidityTokenState, String x_TokenType, BigInteger amount, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected LiquidityTokenEvent.LiquidityTokenDestroyed verifyDestroy(java.util.function.Supplier<LiquidityTokenEvent.LiquidityTokenDestroyed> eventFactory, LiquidityTokenCommands.Destroy c) {

            LiquidityTokenEvent.LiquidityTokenDestroyed e = (LiquidityTokenEvent.LiquidityTokenDestroyed) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.liquiditytoken.DestroyLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, LiquidityTokenState.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.liquiditytoken;
//
//public class DestroyLogic {
//    public static LiquidityTokenEvent.LiquidityTokenDestroyed verify(java.util.function.Supplier<LiquidityTokenEvent.LiquidityTokenDestroyed> eventFactory, LiquidityTokenState liquidityTokenState, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected LiquidityTokenEvent.LiquidityTokenSplit verifySplit(java.util.function.Supplier<LiquidityTokenEvent.LiquidityTokenSplit> eventFactory, BigInteger amount, LiquidityTokenCommands.Split c) {
            BigInteger Amount = amount;

            LiquidityTokenEvent.LiquidityTokenSplit e = (LiquidityTokenEvent.LiquidityTokenSplit) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.liquiditytoken.SplitLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, LiquidityTokenState.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), amount, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.liquiditytoken;
//
//public class SplitLogic {
//    public static LiquidityTokenEvent.LiquidityTokenSplit verify(java.util.function.Supplier<LiquidityTokenEvent.LiquidityTokenSplit> eventFactory, LiquidityTokenState liquidityTokenState, BigInteger amount, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected AbstractLiquidityTokenEvent.LiquidityTokenMinted newLiquidityTokenMinted(String x_TokenType, BigInteger amount, Long offChainVersion, String commandId, String requesterId) {
            LiquidityTokenEventId eventId = new LiquidityTokenEventId(getState().getId(), null);
            AbstractLiquidityTokenEvent.LiquidityTokenMinted e = new AbstractLiquidityTokenEvent.LiquidityTokenMinted();

            e.setX_TokenType(x_TokenType);
            e.setAmount(amount);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setLiquidityTokenEventId(eventId);
            return e;
        }

        protected AbstractLiquidityTokenEvent.LiquidityTokenDestroyed newLiquidityTokenDestroyed(Long offChainVersion, String commandId, String requesterId) {
            LiquidityTokenEventId eventId = new LiquidityTokenEventId(getState().getId(), null);
            AbstractLiquidityTokenEvent.LiquidityTokenDestroyed e = new AbstractLiquidityTokenEvent.LiquidityTokenDestroyed();

            e.setAmount(null);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setLiquidityTokenEventId(eventId);
            return e;
        }

    }

}

