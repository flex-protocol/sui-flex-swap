// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.domain.tokenpair;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.suiswapexample.domain.*;
import org.test.suiswapexample.specialization.*;

public abstract class AbstractTokenPairAggregate extends AbstractAggregate implements TokenPairAggregate {
    private TokenPairState.MutableTokenPairState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractTokenPairAggregate(TokenPairState state) {
        this.state = (TokenPairState.MutableTokenPairState)state;
    }

    public TokenPairState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        TokenPairCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleTokenPairAggregate extends AbstractTokenPairAggregate {
        public SimpleTokenPairAggregate(TokenPairState state) {
            super(state);
        }

        @Override
        public void destroy(String liquidityToken, Long offChainVersion, String commandId, String requesterId, TokenPairCommands.Destroy c) {
            java.util.function.Supplier<TokenPairEvent.TokenPairDestroyed> eventFactory = () -> newTokenPairDestroyed(liquidityToken, offChainVersion, commandId, requesterId);
            TokenPairEvent.TokenPairDestroyed e;
            try {
                e = verifyDestroy(eventFactory, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected TokenPairEvent.LiquidityInitialized verifyInitializeLiquidity(java.util.function.Supplier<TokenPairEvent.LiquidityInitialized> eventFactory, String exchange, BigInteger x_Amount, TokenPairCommands.InitializeLiquidity c) {
            String Exchange = exchange;
            BigInteger X_Amount = x_Amount;

            TokenPairEvent.LiquidityInitialized e = (TokenPairEvent.LiquidityInitialized) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tokenpair.InitializeLiquidityLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TokenPairState.class, String.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), exchange, x_Amount, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tokenpair;
//
//public class InitializeLiquidityLogic {
//    public static TokenPairEvent.LiquidityInitialized verify(java.util.function.Supplier<TokenPairEvent.LiquidityInitialized> eventFactory, TokenPairState tokenPairState, String exchange, BigInteger x_Amount, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected TokenPairEvent.LiquidityAdded verifyAddLiquidity(java.util.function.Supplier<TokenPairEvent.LiquidityAdded> eventFactory, BigInteger x_Amount, TokenPairCommands.AddLiquidity c) {
            BigInteger X_Amount = x_Amount;

            TokenPairEvent.LiquidityAdded e = (TokenPairEvent.LiquidityAdded) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tokenpair.AddLiquidityLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TokenPairState.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), x_Amount, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tokenpair;
//
//public class AddLiquidityLogic {
//    public static TokenPairEvent.LiquidityAdded verify(java.util.function.Supplier<TokenPairEvent.LiquidityAdded> eventFactory, TokenPairState tokenPairState, BigInteger x_Amount, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected TokenPairEvent.LiquidityRemoved verifyRemoveLiquidity(java.util.function.Supplier<TokenPairEvent.LiquidityRemoved> eventFactory, String x_Id, TokenPairCommands.RemoveLiquidity c) {
            String X_Id = x_Id;

            TokenPairEvent.LiquidityRemoved e = (TokenPairEvent.LiquidityRemoved) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tokenpair.RemoveLiquidityLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TokenPairState.class, String.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), x_Id, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tokenpair;
//
//public class RemoveLiquidityLogic {
//    public static TokenPairEvent.LiquidityRemoved verify(java.util.function.Supplier<TokenPairEvent.LiquidityRemoved> eventFactory, TokenPairState tokenPairState, String x_Id, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected TokenPairEvent.TokenPairDestroyed verifyDestroy(java.util.function.Supplier<TokenPairEvent.TokenPairDestroyed> eventFactory, TokenPairCommands.Destroy c) {

            TokenPairEvent.TokenPairDestroyed e = (TokenPairEvent.TokenPairDestroyed) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tokenpair.DestroyLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TokenPairState.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tokenpair;
//
//public class DestroyLogic {
//    public static TokenPairEvent.TokenPairDestroyed verify(java.util.function.Supplier<TokenPairEvent.TokenPairDestroyed> eventFactory, TokenPairState tokenPairState, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected TokenPairEvent.XSwappedForY verifySwapX(java.util.function.Supplier<TokenPairEvent.XSwappedForY> eventFactory, BigInteger x_Amount, BigInteger expectedY_AmountOut, TokenPairCommands.SwapX c) {
            BigInteger X_Amount = x_Amount;
            BigInteger ExpectedY_AmountOut = expectedY_AmountOut;

            TokenPairEvent.XSwappedForY e = (TokenPairEvent.XSwappedForY) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tokenpair.SwapXLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TokenPairState.class, BigInteger.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), x_Amount, expectedY_AmountOut, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tokenpair;
//
//public class SwapXLogic {
//    public static TokenPairEvent.XSwappedForY verify(java.util.function.Supplier<TokenPairEvent.XSwappedForY> eventFactory, TokenPairState tokenPairState, BigInteger x_Amount, BigInteger expectedY_AmountOut, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected TokenPairEvent.YSwappedForX verifySwapY(java.util.function.Supplier<TokenPairEvent.YSwappedForX> eventFactory, String x_Id, TokenPairCommands.SwapY c) {
            String X_Id = x_Id;

            TokenPairEvent.YSwappedForX e = (TokenPairEvent.YSwappedForX) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tokenpair.SwapYLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TokenPairState.class, String.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), x_Id, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tokenpair;
//
//public class SwapYLogic {
//    public static TokenPairEvent.YSwappedForX verify(java.util.function.Supplier<TokenPairEvent.YSwappedForX> eventFactory, TokenPairState tokenPairState, String x_Id, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected AbstractTokenPairEvent.TokenPairDestroyed newTokenPairDestroyed(String liquidityToken, Long offChainVersion, String commandId, String requesterId) {
            TokenPairEventId eventId = new TokenPairEventId(getState().getId(), null);
            AbstractTokenPairEvent.TokenPairDestroyed e = new AbstractTokenPairEvent.TokenPairDestroyed();

            e.setLiquidityTokenId(null);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setTokenPairEventId(eventId);
            return e;
        }

    }

}

