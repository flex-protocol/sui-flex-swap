// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.domain.tokenpair;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.suiswapexample.domain.*;
import org.test.suiswapexample.specialization.*;

public abstract class AbstractTokenPairAggregate extends AbstractAggregate implements TokenPairAggregate {
    private TokenPairState.MutableTokenPairState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractTokenPairAggregate(TokenPairState state) {
        this.state = (TokenPairState.MutableTokenPairState)state;
    }

    public TokenPairState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        TokenPairCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleTokenPairAggregate extends AbstractTokenPairAggregate {
        public SimpleTokenPairAggregate(TokenPairState state) {
            super(state);
        }

        @Override
        public void updateExchangeRate(String liquidityToken, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, Long offChainVersion, String commandId, String requesterId, TokenPairCommands.UpdateExchangeRate c) {
            java.util.function.Supplier<TokenPairEvent.ExchangeRateUpdated> eventFactory = () -> newExchangeRateUpdated(liquidityToken, exchangeRateNumerator, exchangeRateDenominator, offChainVersion, commandId, requesterId);
            TokenPairEvent.ExchangeRateUpdated e;
            try {
                e = verifyUpdateExchangeRate(eventFactory, exchangeRateNumerator, exchangeRateDenominator, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected TokenPairEvent.TokenPairInitialized verifyInitializeTokenPair(java.util.function.Supplier<TokenPairEvent.TokenPairInitialized> eventFactory, String exchange, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, TokenPairCommands.InitializeTokenPair c) {
            String Exchange = exchange;
            BigInteger ExchangeRateNumerator = exchangeRateNumerator;
            BigInteger ExchangeRateDenominator = exchangeRateDenominator;

            TokenPairEvent.TokenPairInitialized e = (TokenPairEvent.TokenPairInitialized) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tokenpair.InitializeTokenPairLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TokenPairState.class, String.class, BigInteger.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), exchange, exchangeRateNumerator, exchangeRateDenominator, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tokenpair;
//
//public class InitializeTokenPairLogic {
//    public static TokenPairEvent.TokenPairInitialized verify(java.util.function.Supplier<TokenPairEvent.TokenPairInitialized> eventFactory, TokenPairState tokenPairState, String exchange, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected TokenPairEvent.ExchangeRateUpdated verifyUpdateExchangeRate(java.util.function.Supplier<TokenPairEvent.ExchangeRateUpdated> eventFactory, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, TokenPairCommands.UpdateExchangeRate c) {
            BigInteger ExchangeRateNumerator = exchangeRateNumerator;
            BigInteger ExchangeRateDenominator = exchangeRateDenominator;

            TokenPairEvent.ExchangeRateUpdated e = (TokenPairEvent.ExchangeRateUpdated) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tokenpair.UpdateExchangeRateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TokenPairState.class, BigInteger.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), exchangeRateNumerator, exchangeRateDenominator, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tokenpair;
//
//public class UpdateExchangeRateLogic {
//    public static TokenPairEvent.ExchangeRateUpdated verify(java.util.function.Supplier<TokenPairEvent.ExchangeRateUpdated> eventFactory, TokenPairState tokenPairState, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected TokenPairEvent.Y_ReserveDeposited verifyDepositY_Reserve(java.util.function.Supplier<TokenPairEvent.Y_ReserveDeposited> eventFactory, TokenPairCommands.DepositY_Reserve c) {

            TokenPairEvent.Y_ReserveDeposited e = (TokenPairEvent.Y_ReserveDeposited) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tokenpair.DepositY_ReserveLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TokenPairState.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tokenpair;
//
//public class DepositY_ReserveLogic {
//    public static TokenPairEvent.Y_ReserveDeposited verify(java.util.function.Supplier<TokenPairEvent.Y_ReserveDeposited> eventFactory, TokenPairState tokenPairState, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected TokenPairEvent.X_ReserveWithdrawn verifyWithdrawX_Reserve(java.util.function.Supplier<TokenPairEvent.X_ReserveWithdrawn> eventFactory, BigInteger x_Amount, TokenPairCommands.WithdrawX_Reserve c) {
            BigInteger X_Amount = x_Amount;

            TokenPairEvent.X_ReserveWithdrawn e = (TokenPairEvent.X_ReserveWithdrawn) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tokenpair.WithdrawX_ReserveLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TokenPairState.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), x_Amount, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tokenpair;
//
//public class WithdrawX_ReserveLogic {
//    public static TokenPairEvent.X_ReserveWithdrawn verify(java.util.function.Supplier<TokenPairEvent.X_ReserveWithdrawn> eventFactory, TokenPairState tokenPairState, BigInteger x_Amount, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected TokenPairEvent.Y_ReserveWithdrawn verifyWithdrawY_Reserve(java.util.function.Supplier<TokenPairEvent.Y_ReserveWithdrawn> eventFactory, BigInteger y_Amount, TokenPairCommands.WithdrawY_Reserve c) {
            BigInteger Y_Amount = y_Amount;

            TokenPairEvent.Y_ReserveWithdrawn e = (TokenPairEvent.Y_ReserveWithdrawn) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tokenpair.WithdrawY_ReserveLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TokenPairState.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), y_Amount, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tokenpair;
//
//public class WithdrawY_ReserveLogic {
//    public static TokenPairEvent.Y_ReserveWithdrawn verify(java.util.function.Supplier<TokenPairEvent.Y_ReserveWithdrawn> eventFactory, TokenPairState tokenPairState, BigInteger y_Amount, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected TokenPairEvent.XSwappedForY verifySwapX(java.util.function.Supplier<TokenPairEvent.XSwappedForY> eventFactory, TokenPairCommands.SwapX c) {

            TokenPairEvent.XSwappedForY e = (TokenPairEvent.XSwappedForY) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tokenpair.SwapXLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, TokenPairState.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.tokenpair;
//
//public class SwapXLogic {
//    public static TokenPairEvent.XSwappedForY verify(java.util.function.Supplier<TokenPairEvent.XSwappedForY> eventFactory, TokenPairState tokenPairState, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected AbstractTokenPairEvent.ExchangeRateUpdated newExchangeRateUpdated(String liquidityToken, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, Long offChainVersion, String commandId, String requesterId) {
            TokenPairEventId eventId = new TokenPairEventId(getState().getId(), null);
            AbstractTokenPairEvent.ExchangeRateUpdated e = new AbstractTokenPairEvent.ExchangeRateUpdated();

            e.setLiquidityTokenId(null);
            e.setExchangeRateNumerator(exchangeRateNumerator);
            e.setExchangeRateDenominator(exchangeRateDenominator);
            e.setProvider(null);
            e.setX_TokenType(null);
            e.setY_TokenType(null);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setTokenPairEventId(eventId);
            return e;
        }

    }

}

