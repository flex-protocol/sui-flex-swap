// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.domain.nftcollection;

import java.util.*;
import java.math.*;
import java.util.Date;
import org.test.suiswapexample.domain.*;
import org.test.suiswapexample.specialization.*;


public class NftCollectionSubtypeStateDto {

    private String name;

    public String getName()
    {
        return this.name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    private String subtypeFieldName;

    public String getSubtypeFieldName()
    {
        return this.subtypeFieldName;
    }

    public void setSubtypeFieldName(String subtypeFieldName)
    {
        this.subtypeFieldName = subtypeFieldName;
    }

    private String subtypeValue;

    public String getSubtypeValue()
    {
        return this.subtypeValue;
    }

    public void setSubtypeValue(String subtypeValue)
    {
        this.subtypeValue = subtypeValue;
    }

    private String imageUrl;

    public String getImageUrl()
    {
        return this.imageUrl;
    }

    public void setImageUrl(String imageUrl)
    {
        this.imageUrl = imageUrl;
    }

    private Boolean active;

    public Boolean getActive()
    {
        return this.active;
    }

    public void setActive(Boolean active)
    {
        this.active = active;
    }

    private Long offChainVersion;

    public Long getOffChainVersion()
    {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion)
    {
        this.offChainVersion = offChainVersion;
    }

    private String nftCollectionCollectionType;

    public String getNftCollectionCollectionType()
    {
        return this.nftCollectionCollectionType;
    }

    public void setNftCollectionCollectionType(String nftCollectionCollectionType)
    {
        this.nftCollectionCollectionType = nftCollectionCollectionType;
    }

    private String createdBy;

    public String getCreatedBy()
    {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy)
    {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt()
    {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt)
    {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy()
    {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy)
    {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt()
    {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt)
    {
        this.updatedAt = updatedAt;
    }


    public static class DtoConverter extends AbstractStateDtoConverter
    {
        public static Collection<String> collectionFieldNames = Arrays.asList(new String[]{});

        @Override
        protected boolean isCollectionField(String fieldName) {
            return CollectionUtils.collectionContainsIgnoringCase(collectionFieldNames, fieldName);
        }

        public NftCollectionSubtypeStateDto[] toNftCollectionSubtypeStateDtoArray(Iterable<NftCollectionSubtypeState> states) {
            return toNftCollectionSubtypeStateDtoList(states).toArray(new NftCollectionSubtypeStateDto[0]);
        }

        public List<NftCollectionSubtypeStateDto> toNftCollectionSubtypeStateDtoList(Iterable<NftCollectionSubtypeState> states) {
            ArrayList<NftCollectionSubtypeStateDto> stateDtos = new ArrayList();
            for (NftCollectionSubtypeState s : states) {
                NftCollectionSubtypeStateDto dto = toNftCollectionSubtypeStateDto(s);
                stateDtos.add(dto);
            }
            return stateDtos;
        }

        public NftCollectionSubtypeStateDto toNftCollectionSubtypeStateDto(NftCollectionSubtypeState state)
        {
            if(state == null) {
                return null;
            }
            NftCollectionSubtypeStateDto dto = new NftCollectionSubtypeStateDto();
            if (returnedFieldsContains("Name")) {
                dto.setName(state.getName());
            }
            if (returnedFieldsContains("SubtypeFieldName")) {
                dto.setSubtypeFieldName(state.getSubtypeFieldName());
            }
            if (returnedFieldsContains("SubtypeValue")) {
                dto.setSubtypeValue(state.getSubtypeValue());
            }
            if (returnedFieldsContains("ImageUrl")) {
                dto.setImageUrl(state.getImageUrl());
            }
            if (returnedFieldsContains("Active")) {
                dto.setActive(state.getActive());
            }
            if (returnedFieldsContains("OffChainVersion")) {
                dto.setOffChainVersion(state.getOffChainVersion());
            }
            if (returnedFieldsContains("NftCollectionCollectionType")) {
                dto.setNftCollectionCollectionType(state.getNftCollectionCollectionType());
            }
            if (returnedFieldsContains("CreatedBy")) {
                dto.setCreatedBy(state.getCreatedBy());
            }
            if (returnedFieldsContains("CreatedAt")) {
                dto.setCreatedAt(state.getCreatedAt());
            }
            if (returnedFieldsContains("UpdatedBy")) {
                dto.setUpdatedBy(state.getUpdatedBy());
            }
            if (returnedFieldsContains("UpdatedAt")) {
                dto.setUpdatedAt(state.getUpdatedAt());
            }
            return dto;
        }

    }
}

