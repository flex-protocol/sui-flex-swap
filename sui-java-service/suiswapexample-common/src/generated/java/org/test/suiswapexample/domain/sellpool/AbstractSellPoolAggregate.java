// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.domain.sellpool;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.suiswapexample.domain.*;
import org.test.suiswapexample.specialization.*;

public abstract class AbstractSellPoolAggregate extends AbstractAggregate implements SellPoolAggregate {
    private SellPoolState.MutableSellPoolState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractSellPoolAggregate(SellPoolState state) {
        this.state = (SellPoolState.MutableSellPoolState)state;
    }

    public SellPoolState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        SellPoolCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleSellPoolAggregate extends AbstractSellPoolAggregate {
        public SimpleSellPoolAggregate(SellPoolState state) {
            super(state);
        }

        @Override
        public void updateExchangeRate(String liquidityToken, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, Long offChainVersion, String commandId, String requesterId, SellPoolCommands.UpdateExchangeRate c) {
            java.util.function.Supplier<SellPoolEvent.SellPoolExchangeRateUpdated> eventFactory = () -> newSellPoolExchangeRateUpdated(liquidityToken, exchangeRateNumerator, exchangeRateDenominator, priceDeltaX_Amount, priceDeltaNumerator, priceDeltaDenominator, offChainVersion, commandId, requesterId);
            SellPoolEvent.SellPoolExchangeRateUpdated e;
            try {
                e = verifyUpdateExchangeRate(eventFactory, exchangeRateNumerator, exchangeRateDenominator, priceDeltaX_Amount, priceDeltaNumerator, priceDeltaDenominator, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void destroy(String liquidityToken, Long offChainVersion, String commandId, String requesterId, SellPoolCommands.Destroy c) {
            java.util.function.Supplier<SellPoolEvent.SellPoolDestroyed> eventFactory = () -> newSellPoolDestroyed(liquidityToken, offChainVersion, commandId, requesterId);
            SellPoolEvent.SellPoolDestroyed e;
            try {
                e = verifyDestroy(eventFactory, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected SellPoolEvent.SellPoolInitialized verifyInitializeSellPool(java.util.function.Supplier<SellPoolEvent.SellPoolInitialized> eventFactory, String exchange, BigInteger x_Amount, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, Integer priceCurveType, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, SellPoolCommands.InitializeSellPool c) {
            String Exchange = exchange;
            BigInteger X_Amount = x_Amount;
            BigInteger ExchangeRateNumerator = exchangeRateNumerator;
            BigInteger ExchangeRateDenominator = exchangeRateDenominator;
            Integer PriceCurveType = priceCurveType;
            BigInteger PriceDeltaX_Amount = priceDeltaX_Amount;
            BigInteger PriceDeltaNumerator = priceDeltaNumerator;
            BigInteger PriceDeltaDenominator = priceDeltaDenominator;

            SellPoolEvent.SellPoolInitialized e = (SellPoolEvent.SellPoolInitialized) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.sellpool.InitializeSellPoolLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SellPoolState.class, String.class, BigInteger.class, BigInteger.class, BigInteger.class, Integer.class, BigInteger.class, BigInteger.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), exchange, x_Amount, exchangeRateNumerator, exchangeRateDenominator, priceCurveType, priceDeltaX_Amount, priceDeltaNumerator, priceDeltaDenominator, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.sellpool;
//
//public class InitializeSellPoolLogic {
//    public static SellPoolEvent.SellPoolInitialized verify(java.util.function.Supplier<SellPoolEvent.SellPoolInitialized> eventFactory, SellPoolState sellPoolState, String exchange, BigInteger x_Amount, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, Integer priceCurveType, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected SellPoolEvent.SellPoolExchangeRateUpdated verifyUpdateExchangeRate(java.util.function.Supplier<SellPoolEvent.SellPoolExchangeRateUpdated> eventFactory, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, SellPoolCommands.UpdateExchangeRate c) {
            BigInteger ExchangeRateNumerator = exchangeRateNumerator;
            BigInteger ExchangeRateDenominator = exchangeRateDenominator;
            BigInteger PriceDeltaX_Amount = priceDeltaX_Amount;
            BigInteger PriceDeltaNumerator = priceDeltaNumerator;
            BigInteger PriceDeltaDenominator = priceDeltaDenominator;

            SellPoolEvent.SellPoolExchangeRateUpdated e = (SellPoolEvent.SellPoolExchangeRateUpdated) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.sellpool.UpdateExchangeRateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SellPoolState.class, BigInteger.class, BigInteger.class, BigInteger.class, BigInteger.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), exchangeRateNumerator, exchangeRateDenominator, priceDeltaX_Amount, priceDeltaNumerator, priceDeltaDenominator, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.sellpool;
//
//public class UpdateExchangeRateLogic {
//    public static SellPoolEvent.SellPoolExchangeRateUpdated verify(java.util.function.Supplier<SellPoolEvent.SellPoolExchangeRateUpdated> eventFactory, SellPoolState sellPoolState, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected SellPoolEvent.SellPoolXTokenAdded verifyAddXToken(java.util.function.Supplier<SellPoolEvent.SellPoolXTokenAdded> eventFactory, BigInteger x_Amount, SellPoolCommands.AddXToken c) {
            BigInteger X_Amount = x_Amount;

            SellPoolEvent.SellPoolXTokenAdded e = (SellPoolEvent.SellPoolXTokenAdded) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.sellpool.AddXTokenLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SellPoolState.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), x_Amount, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.sellpool;
//
//public class AddXTokenLogic {
//    public static SellPoolEvent.SellPoolXTokenAdded verify(java.util.function.Supplier<SellPoolEvent.SellPoolXTokenAdded> eventFactory, SellPoolState sellPoolState, BigInteger x_Amount, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected SellPoolEvent.SellPoolXTokenRemoved verifyRemoveXToken(java.util.function.Supplier<SellPoolEvent.SellPoolXTokenRemoved> eventFactory, String x_Id, SellPoolCommands.RemoveXToken c) {
            String X_Id = x_Id;

            SellPoolEvent.SellPoolXTokenRemoved e = (SellPoolEvent.SellPoolXTokenRemoved) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.sellpool.RemoveXTokenLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SellPoolState.class, String.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), x_Id, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.sellpool;
//
//public class RemoveXTokenLogic {
//    public static SellPoolEvent.SellPoolXTokenRemoved verify(java.util.function.Supplier<SellPoolEvent.SellPoolXTokenRemoved> eventFactory, SellPoolState sellPoolState, String x_Id, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected SellPoolEvent.YReserveWithdrawn verifyWithdrawYReserve(java.util.function.Supplier<SellPoolEvent.YReserveWithdrawn> eventFactory, BigInteger y_Amount, SellPoolCommands.WithdrawYReserve c) {
            BigInteger Y_Amount = y_Amount;

            SellPoolEvent.YReserveWithdrawn e = (SellPoolEvent.YReserveWithdrawn) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.sellpool.WithdrawYReserveLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SellPoolState.class, BigInteger.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), y_Amount, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.sellpool;
//
//public class WithdrawYReserveLogic {
//    public static SellPoolEvent.YReserveWithdrawn verify(java.util.function.Supplier<SellPoolEvent.YReserveWithdrawn> eventFactory, SellPoolState sellPoolState, BigInteger y_Amount, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected SellPoolEvent.SellPoolDestroyed verifyDestroy(java.util.function.Supplier<SellPoolEvent.SellPoolDestroyed> eventFactory, SellPoolCommands.Destroy c) {

            SellPoolEvent.SellPoolDestroyed e = (SellPoolEvent.SellPoolDestroyed) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.sellpool.DestroyLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SellPoolState.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.sellpool;
//
//public class DestroyLogic {
//    public static SellPoolEvent.SellPoolDestroyed verify(java.util.function.Supplier<SellPoolEvent.SellPoolDestroyed> eventFactory, SellPoolState sellPoolState, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected SellPoolEvent.SellPoolYSwappedForX verifyBuyX(java.util.function.Supplier<SellPoolEvent.SellPoolYSwappedForX> eventFactory, String x_Id, SellPoolCommands.BuyX c) {
            String X_Id = x_Id;

            SellPoolEvent.SellPoolYSwappedForX e = (SellPoolEvent.SellPoolYSwappedForX) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.sellpool.BuyXLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SellPoolState.class, String.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), x_Id, VerificationContext.forCommand(c)}
            );

//package org.test.suiswapexample.domain.sellpool;
//
//public class BuyXLogic {
//    public static SellPoolEvent.SellPoolYSwappedForX verify(java.util.function.Supplier<SellPoolEvent.SellPoolYSwappedForX> eventFactory, SellPoolState sellPoolState, String x_Id, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected AbstractSellPoolEvent.SellPoolExchangeRateUpdated newSellPoolExchangeRateUpdated(String liquidityToken, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, Long offChainVersion, String commandId, String requesterId) {
            SellPoolEventId eventId = new SellPoolEventId(getState().getId(), null);
            AbstractSellPoolEvent.SellPoolExchangeRateUpdated e = new AbstractSellPoolEvent.SellPoolExchangeRateUpdated();

            e.setLiquidityTokenId(null);
            e.setExchangeRateNumerator(exchangeRateNumerator);
            e.setExchangeRateDenominator(exchangeRateDenominator);
            e.setPriceDeltaX_Amount(priceDeltaX_Amount);
            e.setPriceDeltaNumerator(priceDeltaNumerator);
            e.setPriceDeltaDenominator(priceDeltaDenominator);
            e.setProvider(null);
            e.setX_TokenType(null);
            e.setY_TokenType(null);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setSellPoolEventId(eventId);
            return e;
        }

        protected AbstractSellPoolEvent.SellPoolDestroyed newSellPoolDestroyed(String liquidityToken, Long offChainVersion, String commandId, String requesterId) {
            SellPoolEventId eventId = new SellPoolEventId(getState().getId(), null);
            AbstractSellPoolEvent.SellPoolDestroyed e = new AbstractSellPoolEvent.SellPoolDestroyed();

            e.setLiquidityTokenId(null);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setSellPoolEventId(eventId);
            return e;
        }

    }

}

