// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.domain.tradepool;

import java.util.*;
import java.math.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.suiswapexample.domain.*;
import org.test.suiswapexample.specialization.*;
import org.test.suiswapexample.domain.tradepool.TradePoolEvent.*;

public abstract class AbstractTradePoolState implements TradePoolState.SqlTradePoolState, Saveable {

    private String id;

    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    private Integer poolType;

    public Integer getPoolType() {
        return this.poolType;
    }

    public void setPoolType(Integer poolType) {
        this.poolType = poolType;
    }

    private BigInteger version;

    public BigInteger getVersion() {
        return this.version;
    }

    public void setVersion(BigInteger version) {
        this.version = version;
    }

    private ObjectTable x_Reserve;

    public ObjectTable getX_Reserve() {
        return this.x_Reserve;
    }

    public void setX_Reserve(ObjectTable x_Reserve) {
        this.x_Reserve = x_Reserve;
    }

    private Table x_Amounts;

    public Table getX_Amounts() {
        return this.x_Amounts;
    }

    public void setX_Amounts(Table x_Amounts) {
        this.x_Amounts = x_Amounts;
    }

    private BigInteger x_TotalAmount;

    public BigInteger getX_TotalAmount() {
        return this.x_TotalAmount;
    }

    public void setX_TotalAmount(BigInteger x_TotalAmount) {
        this.x_TotalAmount = x_TotalAmount;
    }

    private java.math.BigInteger y_Reserve;

    public java.math.BigInteger getY_Reserve() {
        return this.y_Reserve;
    }

    public void setY_Reserve(java.math.BigInteger y_Reserve) {
        this.y_Reserve = y_Reserve;
    }

    private String liquidityTokenId;

    public String getLiquidityTokenId() {
        return this.liquidityTokenId;
    }

    public void setLiquidityTokenId(String liquidityTokenId) {
        this.liquidityTokenId = liquidityTokenId;
    }

    private BigInteger x_SoldAmount;

    public BigInteger getX_SoldAmount() {
        return this.x_SoldAmount;
    }

    public void setX_SoldAmount(BigInteger x_SoldAmount) {
        this.x_SoldAmount = x_SoldAmount;
    }

    private BigInteger x_BoughtAmount;

    public BigInteger getX_BoughtAmount() {
        return this.x_BoughtAmount;
    }

    public void setX_BoughtAmount(BigInteger x_BoughtAmount) {
        this.x_BoughtAmount = x_BoughtAmount;
    }

    private BigInteger startExchangeRateNumerator;

    public BigInteger getStartExchangeRateNumerator() {
        return this.startExchangeRateNumerator;
    }

    public void setStartExchangeRateNumerator(BigInteger startExchangeRateNumerator) {
        this.startExchangeRateNumerator = startExchangeRateNumerator;
    }

    private BigInteger exchangeRateNumerator;

    public BigInteger getExchangeRateNumerator() {
        return this.exchangeRateNumerator;
    }

    public void setExchangeRateNumerator(BigInteger exchangeRateNumerator) {
        this.exchangeRateNumerator = exchangeRateNumerator;
    }

    private BigInteger exchangeRateDenominator;

    public BigInteger getExchangeRateDenominator() {
        return this.exchangeRateDenominator;
    }

    public void setExchangeRateDenominator(BigInteger exchangeRateDenominator) {
        this.exchangeRateDenominator = exchangeRateDenominator;
    }

    private Integer priceCurveType;

    public Integer getPriceCurveType() {
        return this.priceCurveType;
    }

    public void setPriceCurveType(Integer priceCurveType) {
        this.priceCurveType = priceCurveType;
    }

    private BigInteger priceDeltaX_Amount;

    public BigInteger getPriceDeltaX_Amount() {
        return this.priceDeltaX_Amount;
    }

    public void setPriceDeltaX_Amount(BigInteger priceDeltaX_Amount) {
        this.priceDeltaX_Amount = priceDeltaX_Amount;
    }

    private BigInteger priceDeltaNumerator;

    public BigInteger getPriceDeltaNumerator() {
        return this.priceDeltaNumerator;
    }

    public void setPriceDeltaNumerator(BigInteger priceDeltaNumerator) {
        this.priceDeltaNumerator = priceDeltaNumerator;
    }

    private BigInteger priceDeltaDenominator;

    public BigInteger getPriceDeltaDenominator() {
        return this.priceDeltaDenominator;
    }

    public void setPriceDeltaDenominator(BigInteger priceDeltaDenominator) {
        this.priceDeltaDenominator = priceDeltaDenominator;
    }

    private Long offChainVersion;

    public Long getOffChainVersion() {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion) {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean active;

    public Boolean getActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    private String x_TokenType;

    public String getX_TokenType() {
        return this.x_TokenType;
    }

    public void setX_TokenType(String x_TokenType) {
        this.x_TokenType = x_TokenType;
    }

    private String y_TokenType;

    public String getY_TokenType() {
        return this.y_TokenType;
    }

    public void setY_TokenType(String y_TokenType) {
        this.y_TokenType = y_TokenType;
    }

    public boolean isStateUnsaved() {
        return this.getOffChainVersion() == null;
    }

    private Set<TradePoolX_ReserveItemState> protectedTradePoolX_ReserveItems = new HashSet<>();

    protected Set<TradePoolX_ReserveItemState> getProtectedTradePoolX_ReserveItems() {
        return this.protectedTradePoolX_ReserveItems;
    }

    protected void setProtectedTradePoolX_ReserveItems(Set<TradePoolX_ReserveItemState> protectedTradePoolX_ReserveItems) {
        this.protectedTradePoolX_ReserveItems = protectedTradePoolX_ReserveItems;
    }

    private EntityStateCollection<String, TradePoolX_ReserveItemState> tradePoolX_ReserveItems;

    public EntityStateCollection<String, TradePoolX_ReserveItemState> getTradePoolX_ReserveItems() {
        return this.tradePoolX_ReserveItems;
    }

    public void setTradePoolX_ReserveItems(EntityStateCollection<String, TradePoolX_ReserveItemState> tradePoolX_ReserveItems) {
        this.tradePoolX_ReserveItems = tradePoolX_ReserveItems;
    }

    private Set<TradePoolX_AmountsItemState> protectedTradePoolX_AmountsItems = new HashSet<>();

    protected Set<TradePoolX_AmountsItemState> getProtectedTradePoolX_AmountsItems() {
        return this.protectedTradePoolX_AmountsItems;
    }

    protected void setProtectedTradePoolX_AmountsItems(Set<TradePoolX_AmountsItemState> protectedTradePoolX_AmountsItems) {
        this.protectedTradePoolX_AmountsItems = protectedTradePoolX_AmountsItems;
    }

    private EntityStateCollection<String, TradePoolX_AmountsItemState> tradePoolX_AmountsItems;

    public EntityStateCollection<String, TradePoolX_AmountsItemState> getTradePoolX_AmountsItems() {
        return this.tradePoolX_AmountsItems;
    }

    public void setTradePoolX_AmountsItems(EntityStateCollection<String, TradePoolX_AmountsItemState> tradePoolX_AmountsItems) {
        this.tradePoolX_AmountsItems = tradePoolX_AmountsItems;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractTradePoolState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setId(((TradePoolEvent.SqlTradePoolEvent) events.get(0)).getTradePoolEventId().getId());
            for (Event e : events) {
                mutate(e);
                this.setOffChainVersion((this.getOffChainVersion() == null ? TradePoolState.VERSION_NULL : this.getOffChainVersion()) + 1);
            }
        }
    }


    public AbstractTradePoolState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
        tradePoolX_ReserveItems = new SimpleTradePoolX_ReserveItemStateCollection();
        tradePoolX_AmountsItems = new SimpleTradePoolX_AmountsItemStateCollection();
    }

    @Override
    public int hashCode() {
        return getId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof TradePoolState) {
            return Objects.equals(this.getId(), ((TradePoolState)obj).getId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (false) { 
            ;
        } else if (e instanceof AbstractTradePoolEvent.PoolExchangeRateUpdated) {
            when((AbstractTradePoolEvent.PoolExchangeRateUpdated)e);
        } else if (e instanceof AbstractTradePoolEvent.PoolDestroyed) {
            when((AbstractTradePoolEvent.PoolDestroyed)e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void merge(TradePoolState s) {
        if (s == this) {
            return;
        }
        this.setPoolType(s.getPoolType());
        this.setVersion(s.getVersion());
        this.setX_Reserve(s.getX_Reserve());
        this.setX_Amounts(s.getX_Amounts());
        this.setX_TotalAmount(s.getX_TotalAmount());
        this.setY_Reserve(s.getY_Reserve());
        this.setLiquidityTokenId(s.getLiquidityTokenId());
        this.setX_SoldAmount(s.getX_SoldAmount());
        this.setX_BoughtAmount(s.getX_BoughtAmount());
        this.setStartExchangeRateNumerator(s.getStartExchangeRateNumerator());
        this.setExchangeRateNumerator(s.getExchangeRateNumerator());
        this.setExchangeRateDenominator(s.getExchangeRateDenominator());
        this.setPriceCurveType(s.getPriceCurveType());
        this.setPriceDeltaX_Amount(s.getPriceDeltaX_Amount());
        this.setPriceDeltaNumerator(s.getPriceDeltaNumerator());
        this.setPriceDeltaDenominator(s.getPriceDeltaDenominator());
        this.setActive(s.getActive());
        this.setX_TokenType(s.getX_TokenType());
        this.setY_TokenType(s.getY_TokenType());

        if (s.getTradePoolX_ReserveItems() != null) {
            Iterable<TradePoolX_ReserveItemState> iterable;
            if (s.getTradePoolX_ReserveItems().isLazy()) {
                iterable = s.getTradePoolX_ReserveItems().getLoadedStates();
            } else {
                iterable = s.getTradePoolX_ReserveItems();
            }
            if (iterable != null) {
                for (TradePoolX_ReserveItemState ss : iterable) {
                    TradePoolX_ReserveItemState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, TradePoolX_ReserveItemState>)this.getTradePoolX_ReserveItems()).getOrAddDefault(ss.getKey());
                    ((AbstractTradePoolX_ReserveItemState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getTradePoolX_ReserveItems() != null) {
            if (s.getTradePoolX_ReserveItems() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getTradePoolX_ReserveItems()).getRemovedStates() != null) {
                    for (TradePoolX_ReserveItemState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<String, TradePoolX_ReserveItemState>)s.getTradePoolX_ReserveItems()).getRemovedStates()) {
                        TradePoolX_ReserveItemState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, TradePoolX_ReserveItemState>)this.getTradePoolX_ReserveItems()).getOrAddDefault(ss.getKey());
                        ((EntityStateCollection.ModifiableEntityStateCollection)this.getTradePoolX_ReserveItems()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getTradePoolX_ReserveItems().isAllLoaded()) {
                    Set<String> removedStateIds = new HashSet<>(this.getTradePoolX_ReserveItems().stream().map(i -> i.getKey()).collect(java.util.stream.Collectors.toList()));
                    s.getTradePoolX_ReserveItems().forEach(i -> removedStateIds.remove(i.getKey()));
                    for (String i : removedStateIds) {
                        TradePoolX_ReserveItemState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, TradePoolX_ReserveItemState>)this.getTradePoolX_ReserveItems()).getOrAddDefault(i);
                        ((EntityStateCollection.ModifiableEntityStateCollection)this.getTradePoolX_ReserveItems()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }

        if (s.getTradePoolX_AmountsItems() != null) {
            Iterable<TradePoolX_AmountsItemState> iterable;
            if (s.getTradePoolX_AmountsItems().isLazy()) {
                iterable = s.getTradePoolX_AmountsItems().getLoadedStates();
            } else {
                iterable = s.getTradePoolX_AmountsItems();
            }
            if (iterable != null) {
                for (TradePoolX_AmountsItemState ss : iterable) {
                    TradePoolX_AmountsItemState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, TradePoolX_AmountsItemState>)this.getTradePoolX_AmountsItems()).getOrAddDefault(ss.getKey());
                    ((AbstractTradePoolX_AmountsItemState) thisInnerState).merge(ss);
                }
            }
        }
        if (s.getTradePoolX_AmountsItems() != null) {
            if (s.getTradePoolX_AmountsItems() instanceof EntityStateCollection.RemovalLoggedEntityStateCollection) {
                if (((EntityStateCollection.RemovalLoggedEntityStateCollection)s.getTradePoolX_AmountsItems()).getRemovedStates() != null) {
                    for (TradePoolX_AmountsItemState ss : ((EntityStateCollection.RemovalLoggedEntityStateCollection<String, TradePoolX_AmountsItemState>)s.getTradePoolX_AmountsItems()).getRemovedStates()) {
                        TradePoolX_AmountsItemState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, TradePoolX_AmountsItemState>)this.getTradePoolX_AmountsItems()).getOrAddDefault(ss.getKey());
                        ((EntityStateCollection.ModifiableEntityStateCollection)this.getTradePoolX_AmountsItems()).removeState(thisInnerState);
                    }
                }
            } else {
                if (s.getTradePoolX_AmountsItems().isAllLoaded()) {
                    Set<String> removedStateIds = new HashSet<>(this.getTradePoolX_AmountsItems().stream().map(i -> i.getKey()).collect(java.util.stream.Collectors.toList()));
                    s.getTradePoolX_AmountsItems().forEach(i -> removedStateIds.remove(i.getKey()));
                    for (String i : removedStateIds) {
                        TradePoolX_AmountsItemState thisInnerState = ((EntityStateCollection.ModifiableEntityStateCollection<String, TradePoolX_AmountsItemState>)this.getTradePoolX_AmountsItems()).getOrAddDefault(i);
                        ((EntityStateCollection.ModifiableEntityStateCollection)this.getTradePoolX_AmountsItems()).removeState(thisInnerState);
                    }
                } else {
                    throw new UnsupportedOperationException();
                }
            }
        }
    }

    public void when(AbstractTradePoolEvent.PoolExchangeRateUpdated e) {
        throwOnWrongEvent(e);

        String liquidityTokenId = e.getLiquidityTokenId();
        String LiquidityTokenId = liquidityTokenId;
        BigInteger startExchangeRateNumerator = e.getStartExchangeRateNumerator();
        BigInteger StartExchangeRateNumerator = startExchangeRateNumerator;
        BigInteger exchangeRateNumerator = e.getExchangeRateNumerator();
        BigInteger ExchangeRateNumerator = exchangeRateNumerator;
        BigInteger exchangeRateDenominator = e.getExchangeRateDenominator();
        BigInteger ExchangeRateDenominator = exchangeRateDenominator;
        BigInteger priceDeltaX_Amount = e.getPriceDeltaX_Amount();
        BigInteger PriceDeltaX_Amount = priceDeltaX_Amount;
        BigInteger priceDeltaNumerator = e.getPriceDeltaNumerator();
        BigInteger PriceDeltaNumerator = priceDeltaNumerator;
        BigInteger priceDeltaDenominator = e.getPriceDeltaDenominator();
        BigInteger PriceDeltaDenominator = priceDeltaDenominator;
        String provider = e.getProvider();
        String Provider = provider;
        String x_TokenType = e.getX_TokenType();
        String X_TokenType = x_TokenType;
        String y_TokenType = e.getY_TokenType();
        String Y_TokenType = y_TokenType;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String status = e.getStatus();
        String Status = status;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        TradePoolState updatedTradePoolState = (TradePoolState) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tradepool.UpdateExchangeRateLogic",
                    "mutate",
                    new Class[]{TradePoolState.class, String.class, BigInteger.class, BigInteger.class, BigInteger.class, BigInteger.class, BigInteger.class, BigInteger.class, String.class, String.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, liquidityTokenId, startExchangeRateNumerator, exchangeRateNumerator, exchangeRateDenominator, priceDeltaX_Amount, priceDeltaNumerator, priceDeltaDenominator, provider, x_TokenType, y_TokenType, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, status, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.test.suiswapexample.domain.tradepool;
//
//public class UpdateExchangeRateLogic {
//    public static TradePoolState mutate(TradePoolState tradePoolState, String liquidityTokenId, BigInteger startExchangeRateNumerator, BigInteger exchangeRateNumerator, BigInteger exchangeRateDenominator, BigInteger priceDeltaX_Amount, BigInteger priceDeltaNumerator, BigInteger priceDeltaDenominator, String provider, String x_TokenType, String y_TokenType, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String status, MutationContext<TradePoolState, TradePoolState.MutableTradePoolState> mutationContext) {
//    }
//}

        if (this != updatedTradePoolState) { merge(updatedTradePoolState); } //else do nothing

    }

    public void when(AbstractTradePoolEvent.PoolXTokenAdded e) {
        throwOnWrongEvent(e);

        String liquidityTokenId = e.getLiquidityTokenId();
        String LiquidityTokenId = liquidityTokenId;
        String provider = e.getProvider();
        String Provider = provider;
        String x_TokenType = e.getX_TokenType();
        String X_TokenType = x_TokenType;
        String y_TokenType = e.getY_TokenType();
        String Y_TokenType = y_TokenType;
        BigInteger x_Amount = e.getX_Amount();
        BigInteger X_Amount = x_Amount;
        String x_Id = e.getX_Id();
        String X_Id = x_Id;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String status = e.getStatus();
        String Status = status;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        TradePoolState updatedTradePoolState = (TradePoolState) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tradepool.AddXTokenLogic",
                    "mutate",
                    new Class[]{TradePoolState.class, String.class, String.class, String.class, String.class, BigInteger.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, liquidityTokenId, provider, x_TokenType, y_TokenType, x_Amount, x_Id, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, status, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.test.suiswapexample.domain.tradepool;
//
//public class AddXTokenLogic {
//    public static TradePoolState mutate(TradePoolState tradePoolState, String liquidityTokenId, String provider, String x_TokenType, String y_TokenType, BigInteger x_Amount, String x_Id, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String status, MutationContext<TradePoolState, TradePoolState.MutableTradePoolState> mutationContext) {
//    }
//}

        if (this != updatedTradePoolState) { merge(updatedTradePoolState); } //else do nothing

    }

    public void when(AbstractTradePoolEvent.PoolYReserveDeposited e) {
        throwOnWrongEvent(e);

        String liquidityTokenId = e.getLiquidityTokenId();
        String LiquidityTokenId = liquidityTokenId;
        String x_TokenType = e.getX_TokenType();
        String X_TokenType = x_TokenType;
        String y_TokenType = e.getY_TokenType();
        String Y_TokenType = y_TokenType;
        BigInteger y_Amount = e.getY_Amount();
        BigInteger Y_Amount = y_Amount;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String status = e.getStatus();
        String Status = status;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        TradePoolState updatedTradePoolState = (TradePoolState) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tradepool.DepositYReserveLogic",
                    "mutate",
                    new Class[]{TradePoolState.class, String.class, String.class, String.class, BigInteger.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, liquidityTokenId, x_TokenType, y_TokenType, y_Amount, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, status, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.test.suiswapexample.domain.tradepool;
//
//public class DepositYReserveLogic {
//    public static TradePoolState mutate(TradePoolState tradePoolState, String liquidityTokenId, String x_TokenType, String y_TokenType, BigInteger y_Amount, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String status, MutationContext<TradePoolState, TradePoolState.MutableTradePoolState> mutationContext) {
//    }
//}

        if (this != updatedTradePoolState) { merge(updatedTradePoolState); } //else do nothing

    }

    public void when(AbstractTradePoolEvent.PoolDestroyed e) {
        throwOnWrongEvent(e);

        String liquidityTokenId = e.getLiquidityTokenId();
        String LiquidityTokenId = liquidityTokenId;
        Long suiTimestamp = e.getSuiTimestamp();
        Long SuiTimestamp = suiTimestamp;
        String suiTxDigest = e.getSuiTxDigest();
        String SuiTxDigest = suiTxDigest;
        BigInteger suiEventSeq = e.getSuiEventSeq();
        BigInteger SuiEventSeq = suiEventSeq;
        String suiPackageId = e.getSuiPackageId();
        String SuiPackageId = suiPackageId;
        String suiTransactionModule = e.getSuiTransactionModule();
        String SuiTransactionModule = suiTransactionModule;
        String suiSender = e.getSuiSender();
        String SuiSender = suiSender;
        String suiType = e.getSuiType();
        String SuiType = suiType;
        String status = e.getStatus();
        String Status = status;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        TradePoolState updatedTradePoolState = (TradePoolState) ReflectUtils.invokeStaticMethod(
                    "org.test.suiswapexample.domain.tradepool.DestroyLogic",
                    "mutate",
                    new Class[]{TradePoolState.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new Object[]{this, liquidityTokenId, suiTimestamp, suiTxDigest, suiEventSeq, suiPackageId, suiTransactionModule, suiSender, suiType, status, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.test.suiswapexample.domain.tradepool;
//
//public class DestroyLogic {
//    public static TradePoolState mutate(TradePoolState tradePoolState, String liquidityTokenId, Long suiTimestamp, String suiTxDigest, BigInteger suiEventSeq, String suiPackageId, String suiTransactionModule, String suiSender, String suiType, String status, MutationContext<TradePoolState, TradePoolState.MutableTradePoolState> mutationContext) {
//    }
//}

        if (this != updatedTradePoolState) { merge(updatedTradePoolState); } //else do nothing

    }

    public void save() {
        if (tradePoolX_ReserveItems instanceof Saveable) {
            ((Saveable)tradePoolX_ReserveItems).save();
        }
        if (tradePoolX_AmountsItems instanceof Saveable) {
            ((Saveable)tradePoolX_AmountsItems).save();
        }
    }

    protected void throwOnWrongEvent(TradePoolEvent event) {
        String stateEntityId = this.getId(); // Aggregate Id
        String eventEntityId = ((TradePoolEvent.SqlTradePoolEvent)event).getTradePoolEventId().getId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getOffChainVersion();

    }


    public static class SimpleTradePoolState extends AbstractTradePoolState {

        public SimpleTradePoolState() {
        }

        public SimpleTradePoolState(List<Event> events) {
            super(events);
        }

        public static SimpleTradePoolState newForReapplying() {
            SimpleTradePoolState s = new SimpleTradePoolState();
            s.initializeForReapplying();
            return s;
        }

    }


    class SimpleTradePoolX_ReserveItemStateCollection implements EntityStateCollection.ModifiableEntityStateCollection<String, TradePoolX_ReserveItemState>, Collection<TradePoolX_ReserveItemState> {

        @Override
        public TradePoolX_ReserveItemState get(String key) {
            return protectedTradePoolX_ReserveItems.stream().filter(
                            e -> e.getKey().equals(key))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<TradePoolX_ReserveItemState> getLoadedStates() {
            return protectedTradePoolX_ReserveItems;
        }

        @Override
        public TradePoolX_ReserveItemState getOrAddDefault(String key) {
            TradePoolX_ReserveItemState s = get(key);
            if (s == null) {
                TradePoolX_ReserveItemId globalId = new TradePoolX_ReserveItemId(getId(), key);
                AbstractTradePoolX_ReserveItemState state = new AbstractTradePoolX_ReserveItemState.SimpleTradePoolX_ReserveItemState();
                state.setTradePoolX_ReserveItemId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedTradePoolX_ReserveItems.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedTradePoolX_ReserveItems.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedTradePoolX_ReserveItems.contains(o);
        }

        @Override
        public Iterator<TradePoolX_ReserveItemState> iterator() {
            return protectedTradePoolX_ReserveItems.iterator();
        }

        @Override
        public java.util.stream.Stream<TradePoolX_ReserveItemState> stream() {
            return protectedTradePoolX_ReserveItems.stream();
        }

        @Override
        public Object[] toArray() {
            return protectedTradePoolX_ReserveItems.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedTradePoolX_ReserveItems.toArray(a);
        }

        @Override
        public boolean add(TradePoolX_ReserveItemState s) {
            if (s instanceof AbstractTradePoolX_ReserveItemState) {
                AbstractTradePoolX_ReserveItemState state = (AbstractTradePoolX_ReserveItemState) s;
                state.setProtectedTradePoolState(AbstractTradePoolState.this);
            }
            return protectedTradePoolX_ReserveItems.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractTradePoolX_ReserveItemState) {
                AbstractTradePoolX_ReserveItemState s = (AbstractTradePoolX_ReserveItemState) o;
                s.setProtectedTradePoolState(null);
            }
            return protectedTradePoolX_ReserveItems.remove(o);
        }

        @Override
        public boolean removeState(TradePoolX_ReserveItemState s) {
            return remove(s);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedTradePoolX_ReserveItems.contains(c);
        }

        @Override
        public boolean addAll(Collection<? extends TradePoolX_ReserveItemState> c) {
            return protectedTradePoolX_ReserveItems.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedTradePoolX_ReserveItems.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedTradePoolX_ReserveItems.retainAll(c);
        }

        @Override
        public void clear() {
            protectedTradePoolX_ReserveItems.clear();
        }
    }

    class SimpleTradePoolX_AmountsItemStateCollection implements EntityStateCollection.ModifiableEntityStateCollection<String, TradePoolX_AmountsItemState>, Collection<TradePoolX_AmountsItemState> {

        @Override
        public TradePoolX_AmountsItemState get(String key) {
            return protectedTradePoolX_AmountsItems.stream().filter(
                            e -> e.getKey().equals(key))
                    .findFirst().orElse(null);
        }

        @Override
        public boolean isLazy() {
            return false;
        }

        @Override
        public boolean isAllLoaded() {
            return true;
        }

        @Override
        public Collection<TradePoolX_AmountsItemState> getLoadedStates() {
            return protectedTradePoolX_AmountsItems;
        }

        @Override
        public TradePoolX_AmountsItemState getOrAddDefault(String key) {
            TradePoolX_AmountsItemState s = get(key);
            if (s == null) {
                TradePoolX_AmountsItemId globalId = new TradePoolX_AmountsItemId(getId(), key);
                AbstractTradePoolX_AmountsItemState state = new AbstractTradePoolX_AmountsItemState.SimpleTradePoolX_AmountsItemState();
                state.setTradePoolX_AmountsItemId(globalId);
                add(state);
                s = state;
            }
            return s;
        }

        @Override
        public int size() {
            return protectedTradePoolX_AmountsItems.size();
        }

        @Override
        public boolean isEmpty() {
            return protectedTradePoolX_AmountsItems.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return protectedTradePoolX_AmountsItems.contains(o);
        }

        @Override
        public Iterator<TradePoolX_AmountsItemState> iterator() {
            return protectedTradePoolX_AmountsItems.iterator();
        }

        @Override
        public java.util.stream.Stream<TradePoolX_AmountsItemState> stream() {
            return protectedTradePoolX_AmountsItems.stream();
        }

        @Override
        public Object[] toArray() {
            return protectedTradePoolX_AmountsItems.toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
            return protectedTradePoolX_AmountsItems.toArray(a);
        }

        @Override
        public boolean add(TradePoolX_AmountsItemState s) {
            if (s instanceof AbstractTradePoolX_AmountsItemState) {
                AbstractTradePoolX_AmountsItemState state = (AbstractTradePoolX_AmountsItemState) s;
                state.setProtectedTradePoolState(AbstractTradePoolState.this);
            }
            return protectedTradePoolX_AmountsItems.add(s);
        }

        @Override
        public boolean remove(Object o) {
            if (o instanceof AbstractTradePoolX_AmountsItemState) {
                AbstractTradePoolX_AmountsItemState s = (AbstractTradePoolX_AmountsItemState) o;
                s.setProtectedTradePoolState(null);
            }
            return protectedTradePoolX_AmountsItems.remove(o);
        }

        @Override
        public boolean removeState(TradePoolX_AmountsItemState s) {
            return remove(s);
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            return protectedTradePoolX_AmountsItems.contains(c);
        }

        @Override
        public boolean addAll(Collection<? extends TradePoolX_AmountsItemState> c) {
            return protectedTradePoolX_AmountsItems.addAll(c);
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            return protectedTradePoolX_AmountsItems.removeAll(c);
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            return protectedTradePoolX_AmountsItems.retainAll(c);
        }

        @Override
        public void clear() {
            protectedTradePoolX_AmountsItems.clear();
        }
    }


}

