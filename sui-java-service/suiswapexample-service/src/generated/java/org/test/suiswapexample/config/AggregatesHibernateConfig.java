// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.config;

import org.test.suiswapexample.domain.tokenpair.*;
import org.test.suiswapexample.domain.*;
import org.test.suiswapexample.domain.tokenpair.hibernate.*;
import org.test.suiswapexample.domain.sellpool.*;
import org.test.suiswapexample.domain.*;
import org.test.suiswapexample.domain.sellpool.hibernate.*;
import org.test.suiswapexample.domain.buypool.*;
import org.test.suiswapexample.domain.*;
import org.test.suiswapexample.domain.buypool.hibernate.*;
import org.test.suiswapexample.domain.liquiditytoken.*;
import org.test.suiswapexample.domain.*;
import org.test.suiswapexample.domain.liquiditytoken.hibernate.*;
import org.test.suiswapexample.domain.exchange.*;
import org.test.suiswapexample.domain.*;
import org.test.suiswapexample.domain.exchange.hibernate.*;
import org.test.suiswapexample.specialization.AggregateEventListener;
import org.test.suiswapexample.specialization.EventStore;
import org.test.suiswapexample.specialization.IdGenerator;
import org.test.suiswapexample.specialization.ReadOnlyProxyGenerator;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AggregatesHibernateConfig {


    @Bean
    public TokenPairStateRepository tokenPairStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateTokenPairStateRepository repository = new HibernateTokenPairStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public TokenPairStateQueryRepository tokenPairStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateTokenPairStateQueryRepository repository = new HibernateTokenPairStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateTokenPairEventStore tokenPairEventStore(SessionFactory hibernateSessionFactory) {
        HibernateTokenPairEventStore eventStore = new HibernateTokenPairEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractTokenPairApplicationService.SimpleTokenPairApplicationService tokenPairApplicationService(
            @Qualifier("tokenPairEventStore") EventStore tokenPairEventStore,
            TokenPairStateRepository tokenPairStateRepository,
            TokenPairStateQueryRepository tokenPairStateQueryRepository
    ) {
        AbstractTokenPairApplicationService.SimpleTokenPairApplicationService applicationService = new AbstractTokenPairApplicationService.SimpleTokenPairApplicationService(
                tokenPairEventStore,
                tokenPairStateRepository,
                tokenPairStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public SellPoolStateRepository sellPoolStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateSellPoolStateRepository repository = new HibernateSellPoolStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public SellPoolStateQueryRepository sellPoolStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateSellPoolStateQueryRepository repository = new HibernateSellPoolStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateSellPoolEventStore sellPoolEventStore(SessionFactory hibernateSessionFactory) {
        HibernateSellPoolEventStore eventStore = new HibernateSellPoolEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractSellPoolApplicationService.SimpleSellPoolApplicationService sellPoolApplicationService(
            @Qualifier("sellPoolEventStore") EventStore sellPoolEventStore,
            SellPoolStateRepository sellPoolStateRepository,
            SellPoolStateQueryRepository sellPoolStateQueryRepository
    ) {
        AbstractSellPoolApplicationService.SimpleSellPoolApplicationService applicationService = new AbstractSellPoolApplicationService.SimpleSellPoolApplicationService(
                sellPoolEventStore,
                sellPoolStateRepository,
                sellPoolStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public BuyPoolStateRepository buyPoolStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateBuyPoolStateRepository repository = new HibernateBuyPoolStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public BuyPoolStateQueryRepository buyPoolStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateBuyPoolStateQueryRepository repository = new HibernateBuyPoolStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateBuyPoolEventStore buyPoolEventStore(SessionFactory hibernateSessionFactory) {
        HibernateBuyPoolEventStore eventStore = new HibernateBuyPoolEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractBuyPoolApplicationService.SimpleBuyPoolApplicationService buyPoolApplicationService(
            @Qualifier("buyPoolEventStore") EventStore buyPoolEventStore,
            BuyPoolStateRepository buyPoolStateRepository,
            BuyPoolStateQueryRepository buyPoolStateQueryRepository
    ) {
        AbstractBuyPoolApplicationService.SimpleBuyPoolApplicationService applicationService = new AbstractBuyPoolApplicationService.SimpleBuyPoolApplicationService(
                buyPoolEventStore,
                buyPoolStateRepository,
                buyPoolStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public LiquidityTokenStateRepository liquidityTokenStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateLiquidityTokenStateRepository repository = new HibernateLiquidityTokenStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public LiquidityTokenStateQueryRepository liquidityTokenStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateLiquidityTokenStateQueryRepository repository = new HibernateLiquidityTokenStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateLiquidityTokenEventStore liquidityTokenEventStore(SessionFactory hibernateSessionFactory) {
        HibernateLiquidityTokenEventStore eventStore = new HibernateLiquidityTokenEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractLiquidityTokenApplicationService.SimpleLiquidityTokenApplicationService liquidityTokenApplicationService(
            @Qualifier("liquidityTokenEventStore") EventStore liquidityTokenEventStore,
            LiquidityTokenStateRepository liquidityTokenStateRepository,
            LiquidityTokenStateQueryRepository liquidityTokenStateQueryRepository
    ) {
        AbstractLiquidityTokenApplicationService.SimpleLiquidityTokenApplicationService applicationService = new AbstractLiquidityTokenApplicationService.SimpleLiquidityTokenApplicationService(
                liquidityTokenEventStore,
                liquidityTokenStateRepository,
                liquidityTokenStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public ExchangeStateRepository exchangeStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateExchangeStateRepository repository = new HibernateExchangeStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public ExchangeStateQueryRepository exchangeStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateExchangeStateQueryRepository repository = new HibernateExchangeStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateExchangeEventStore exchangeEventStore(SessionFactory hibernateSessionFactory) {
        HibernateExchangeEventStore eventStore = new HibernateExchangeEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractExchangeApplicationService.SimpleExchangeApplicationService exchangeApplicationService(
            @Qualifier("exchangeEventStore") EventStore exchangeEventStore,
            ExchangeStateRepository exchangeStateRepository,
            ExchangeStateQueryRepository exchangeStateQueryRepository
    ) {
        AbstractExchangeApplicationService.SimpleExchangeApplicationService applicationService = new AbstractExchangeApplicationService.SimpleExchangeApplicationService(
                exchangeEventStore,
                exchangeStateRepository,
                exchangeStateQueryRepository
        );
        return applicationService;
    }


}
