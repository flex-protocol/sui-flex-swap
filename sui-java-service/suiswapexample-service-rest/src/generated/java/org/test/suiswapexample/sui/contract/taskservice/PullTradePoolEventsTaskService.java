// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.sui.contract.taskservice;

import org.test.suiswapexample.sui.contract.service.TradePoolEventService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

@Service
public class PullTradePoolEventsTaskService {

    @Autowired
    private TradePoolEventService tradePoolEventService;

    @Scheduled(fixedDelayString = "${sui.contract.pull-trade-pool-events.trade-pool-initialized.fixed-delay:5000}")
    public void pullTradePoolInitializedEvents() {
        tradePoolEventService.pullTradePoolInitializedEvents();
    }

    @Scheduled(fixedDelayString = "${sui.contract.pull-trade-pool-events.trade-pool-with-empty-x-reserve-initialized.fixed-delay:5000}")
    public void pullTradePoolWithEmptyXReserveInitializedEvents() {
        tradePoolEventService.pullTradePoolWithEmptyXReserveInitializedEvents();
    }

    @Scheduled(fixedDelayString = "${sui.contract.pull-trade-pool-events.sell-pool-initialized.fixed-delay:5000}")
    public void pullSellPoolInitializedEvents() {
        tradePoolEventService.pullSellPoolInitializedEvents();
    }

    @Scheduled(fixedDelayString = "${sui.contract.pull-trade-pool-events.buy-pool-initialized.fixed-delay:5000}")
    public void pullBuyPoolInitializedEvents() {
        tradePoolEventService.pullBuyPoolInitializedEvents();
    }

    @Scheduled(fixedDelayString = "${sui.contract.pull-trade-pool-events.pool-exchange-rate-updated.fixed-delay:5000}")
    public void pullPoolExchangeRateUpdatedEvents() {
        tradePoolEventService.pullPoolExchangeRateUpdatedEvents();
    }

    @Scheduled(fixedDelayString = "${sui.contract.pull-trade-pool-events.pool-x-token-added.fixed-delay:5000}")
    public void pullPoolXTokenAddedEvents() {
        tradePoolEventService.pullPoolXTokenAddedEvents();
    }

    @Scheduled(fixedDelayString = "${sui.contract.pull-trade-pool-events.pool-x-token-removed.fixed-delay:5000}")
    public void pullPoolXTokenRemovedEvents() {
        tradePoolEventService.pullPoolXTokenRemovedEvents();
    }

    @Scheduled(fixedDelayString = "${sui.contract.pull-trade-pool-events.pool-y-reserve-deposited.fixed-delay:5000}")
    public void pullPoolYReserveDepositedEvents() {
        tradePoolEventService.pullPoolYReserveDepositedEvents();
    }

    @Scheduled(fixedDelayString = "${sui.contract.pull-trade-pool-events.pool-y-reserve-withdrawn.fixed-delay:5000}")
    public void pullPoolYReserveWithdrawnEvents() {
        tradePoolEventService.pullPoolYReserveWithdrawnEvents();
    }

    @Scheduled(fixedDelayString = "${sui.contract.pull-trade-pool-events.pool-destroyed.fixed-delay:5000}")
    public void pullPoolDestroyedEvents() {
        tradePoolEventService.pullPoolDestroyedEvents();
    }

    @Scheduled(fixedDelayString = "${sui.contract.pull-trade-pool-events.pool-y-swapped-for-x.fixed-delay:5000}")
    public void pullPoolYSwappedForXEvents() {
        tradePoolEventService.pullPoolYSwappedForXEvents();
    }

    @Scheduled(fixedDelayString = "${sui.contract.pull-trade-pool-events.pool-x-swapped-for-y.fixed-delay:5000}")
    public void pullPoolXSwappedForYEvents() {
        tradePoolEventService.pullPoolXSwappedForYEvents();
    }

}
