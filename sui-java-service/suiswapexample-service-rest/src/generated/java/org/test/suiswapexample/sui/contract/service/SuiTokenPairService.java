// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.sui.contract.service;

import com.github.wubuku.sui.utils.SuiJsonRpcClient;
import org.test.suiswapexample.domain.*;
import org.test.suiswapexample.domain.tokenpair.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import org.springframework.transaction.annotation.Transactional;

import java.util.*;
import java.math.*;

@Service
public class SuiTokenPairService {

    @Autowired
    private TokenPairStateRepository tokenPairStateRepository;

    private SuiTokenPairStateRetriever suiTokenPairStateRetriever;

    @Autowired
    public SuiTokenPairService(SuiJsonRpcClient suiJsonRpcClient) {
        this.suiTokenPairStateRetriever = new SuiTokenPairStateRetriever(suiJsonRpcClient,
                id -> {
                    TokenPairState.MutableTokenPairState s = new AbstractTokenPairState.SimpleTokenPairState();
                    s.setId(id);
                    return s;
                },
                (tokenPairState, key) -> (TokenPairX_ReserveItemState.MutableTokenPairX_ReserveItemState)
                        ((EntityStateCollection.ModifiableEntityStateCollection<String, TokenPairX_ReserveItemState>) tokenPairState.getTokenPairX_ReserveItems()).getOrAddDefault(key),
                (tokenPairState, key) -> (TokenPairX_AmountsItemState.MutableTokenPairX_AmountsItemState)
                        ((EntityStateCollection.ModifiableEntityStateCollection<String, TokenPairX_AmountsItemState>) tokenPairState.getTokenPairX_AmountsItems()).getOrAddDefault(key)
        );
    }

    @Transactional
    public void updateTokenPairState(String objectId) {
        TokenPairState tokenPairState = suiTokenPairStateRetriever.retrieveTokenPairState(objectId);
        if (tokenPairState == null) {
            return;
        }
        tokenPairStateRepository.merge(tokenPairState);
    }

    @Transactional
    public void deleteTokenPair(String objectId) {
        TokenPairState.MutableTokenPairState s = (TokenPairState.MutableTokenPairState) tokenPairStateRepository.get(objectId, true);
        if (s != null) {
            s.setDeleted(true);
            tokenPairStateRepository.merge(s);
        }
    }

}

