// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.sui.contract.service;

import com.github.wubuku.sui.bean.EventId;
import com.github.wubuku.sui.bean.Page;
import com.github.wubuku.sui.bean.PaginatedMoveEvents;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.utils.SuiJsonRpcClient;
import org.test.suiswapexample.domain.liquiditytoken.AbstractLiquidityTokenEvent;
import org.test.suiswapexample.sui.contract.ContractConstants;
import org.test.suiswapexample.sui.contract.DomainBeanUtils;
import org.test.suiswapexample.sui.contract.SuiPackage;
import org.test.suiswapexample.sui.contract.liquiditytoken.LiquidityTokenMinted;
import org.test.suiswapexample.sui.contract.liquiditytoken.LiquidityTokenDestroyed;
import org.test.suiswapexample.sui.contract.repository.LiquidityTokenEventRepository;
import org.test.suiswapexample.sui.contract.repository.SuiPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class LiquidityTokenEventService {

    public static final java.util.Set<String> DELETION_COMMAND_EVENTS = new java.util.HashSet<>(java.util.Arrays.asList("LiquidityTokenDestroyed"));

    public static boolean isDeletionCommand(String eventType) {
        return DELETION_COMMAND_EVENTS.contains(eventType);
    }

    public static boolean isDeletionCommand(AbstractLiquidityTokenEvent e) {
        if (isDeletionCommand(e.getEventType())) {
            return true;
        }
        return false;
    }

    @Autowired
    private SuiPackageRepository suiPackageRepository;

    @Autowired
    private SuiJsonRpcClient suiJsonRpcClient;

    @Autowired
    private LiquidityTokenEventRepository liquidityTokenEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractLiquidityTokenEvent event) {
        event.setStatus("D");
        liquidityTokenEventRepository.save(event);
    }

    @Transactional
    public void pullLiquidityTokenMintedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getLiquidityTokenMintedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<LiquidityTokenMinted> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.LIQUIDITY_TOKEN_MODULE_LIQUIDITY_TOKEN_MINTED,
                    cursor, limit, false, LiquidityTokenMinted.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<LiquidityTokenMinted> eventEnvelope : eventPage.getData()) {
                    saveLiquidityTokenMinted(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getLiquidityTokenMintedEventNextCursor() {
        AbstractLiquidityTokenEvent lastEvent = liquidityTokenEventRepository.findFirstLiquidityTokenMintedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveLiquidityTokenMinted(SuiMoveEventEnvelope<LiquidityTokenMinted> eventEnvelope) {
        AbstractLiquidityTokenEvent.LiquidityTokenMinted liquidityTokenMinted = DomainBeanUtils.toLiquidityTokenMinted(eventEnvelope);
        if (liquidityTokenEventRepository.findById(liquidityTokenMinted.getLiquidityTokenEventId()).isPresent()) {
            return;
        }
        liquidityTokenEventRepository.save(liquidityTokenMinted);
    }

    @Transactional
    public void pullLiquidityTokenDestroyedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getLiquidityTokenDestroyedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<LiquidityTokenDestroyed> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.LIQUIDITY_TOKEN_MODULE_LIQUIDITY_TOKEN_DESTROYED,
                    cursor, limit, false, LiquidityTokenDestroyed.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<LiquidityTokenDestroyed> eventEnvelope : eventPage.getData()) {
                    saveLiquidityTokenDestroyed(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getLiquidityTokenDestroyedEventNextCursor() {
        AbstractLiquidityTokenEvent lastEvent = liquidityTokenEventRepository.findFirstLiquidityTokenDestroyedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveLiquidityTokenDestroyed(SuiMoveEventEnvelope<LiquidityTokenDestroyed> eventEnvelope) {
        AbstractLiquidityTokenEvent.LiquidityTokenDestroyed liquidityTokenDestroyed = DomainBeanUtils.toLiquidityTokenDestroyed(eventEnvelope);
        if (liquidityTokenEventRepository.findById(liquidityTokenDestroyed.getLiquidityTokenEventId()).isPresent()) {
            return;
        }
        liquidityTokenEventRepository.save(liquidityTokenDestroyed);
    }


    private String getDefaultSuiPackageId() {
        return suiPackageRepository.findById(ContractConstants.DEFAULT_SUI_PACKAGE_NAME)
                .map(SuiPackage::getObjectId).orElse(null);
    }
}
