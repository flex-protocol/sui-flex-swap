// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.sui.contract.service;

import com.github.wubuku.sui.bean.EventId;
import com.github.wubuku.sui.bean.Page;
import com.github.wubuku.sui.bean.PaginatedMoveEvents;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.utils.SuiJsonRpcClient;
import org.test.suiswapexample.domain.tokenpair.AbstractTokenPairEvent;
import org.test.suiswapexample.sui.contract.ContractConstants;
import org.test.suiswapexample.sui.contract.DomainBeanUtils;
import org.test.suiswapexample.sui.contract.SuiPackage;
import org.test.suiswapexample.sui.contract.tokenpair.TokenPairInitialized;
import org.test.suiswapexample.sui.contract.tokenpair.ExchangeRateUpdated;
import org.test.suiswapexample.sui.contract.tokenpair.Y_ReserveDeposited;
import org.test.suiswapexample.sui.contract.tokenpair.X_ReserveWithdrawn;
import org.test.suiswapexample.sui.contract.tokenpair.Y_ReserveWithdrawn;
import org.test.suiswapexample.sui.contract.tokenpair.XSwappedForY;
import org.test.suiswapexample.sui.contract.repository.TokenPairEventRepository;
import org.test.suiswapexample.sui.contract.repository.SuiPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class TokenPairEventService {

    @Autowired
    private SuiPackageRepository suiPackageRepository;

    @Autowired
    private SuiJsonRpcClient suiJsonRpcClient;

    @Autowired
    private TokenPairEventRepository tokenPairEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractTokenPairEvent event) {
        event.setStatus("D");
        tokenPairEventRepository.save(event);
    }

    @Transactional
    public void pullTokenPairInitializedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getTokenPairInitializedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<TokenPairInitialized> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.TOKEN_PAIR_MODULE_TOKEN_PAIR_INITIALIZED,
                    cursor, limit, false, TokenPairInitialized.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<TokenPairInitialized> eventEnvelope : eventPage.getData()) {
                    saveTokenPairInitialized(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getTokenPairInitializedEventNextCursor() {
        AbstractTokenPairEvent lastEvent = tokenPairEventRepository.findFirstTokenPairInitializedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveTokenPairInitialized(SuiMoveEventEnvelope<TokenPairInitialized> eventEnvelope) {
        AbstractTokenPairEvent.TokenPairInitialized tokenPairInitialized = DomainBeanUtils.toTokenPairInitialized(eventEnvelope);
        if (tokenPairEventRepository.findById(tokenPairInitialized.getTokenPairEventId()).isPresent()) {
            return;
        }
        tokenPairEventRepository.save(tokenPairInitialized);
    }

    @Transactional
    public void pullExchangeRateUpdatedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getExchangeRateUpdatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<ExchangeRateUpdated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.TOKEN_PAIR_MODULE_EXCHANGE_RATE_UPDATED,
                    cursor, limit, false, ExchangeRateUpdated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<ExchangeRateUpdated> eventEnvelope : eventPage.getData()) {
                    saveExchangeRateUpdated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getExchangeRateUpdatedEventNextCursor() {
        AbstractTokenPairEvent lastEvent = tokenPairEventRepository.findFirstExchangeRateUpdatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveExchangeRateUpdated(SuiMoveEventEnvelope<ExchangeRateUpdated> eventEnvelope) {
        AbstractTokenPairEvent.ExchangeRateUpdated exchangeRateUpdated = DomainBeanUtils.toExchangeRateUpdated(eventEnvelope);
        if (tokenPairEventRepository.findById(exchangeRateUpdated.getTokenPairEventId()).isPresent()) {
            return;
        }
        tokenPairEventRepository.save(exchangeRateUpdated);
    }

    @Transactional
    public void pullY_ReserveDepositedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getY_ReserveDepositedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<Y_ReserveDeposited> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.TOKEN_PAIR_MODULE_Y_RESERVE_DEPOSITED,
                    cursor, limit, false, Y_ReserveDeposited.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<Y_ReserveDeposited> eventEnvelope : eventPage.getData()) {
                    saveY_ReserveDeposited(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getY_ReserveDepositedEventNextCursor() {
        AbstractTokenPairEvent lastEvent = tokenPairEventRepository.findFirstY_ReserveDepositedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveY_ReserveDeposited(SuiMoveEventEnvelope<Y_ReserveDeposited> eventEnvelope) {
        AbstractTokenPairEvent.Y_ReserveDeposited y_ReserveDeposited = DomainBeanUtils.toY_ReserveDeposited(eventEnvelope);
        if (tokenPairEventRepository.findById(y_ReserveDeposited.getTokenPairEventId()).isPresent()) {
            return;
        }
        tokenPairEventRepository.save(y_ReserveDeposited);
    }

    @Transactional
    public void pullX_ReserveWithdrawnEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getX_ReserveWithdrawnEventNextCursor();
        while (true) {
            PaginatedMoveEvents<X_ReserveWithdrawn> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.TOKEN_PAIR_MODULE_X_RESERVE_WITHDRAWN,
                    cursor, limit, false, X_ReserveWithdrawn.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<X_ReserveWithdrawn> eventEnvelope : eventPage.getData()) {
                    saveX_ReserveWithdrawn(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getX_ReserveWithdrawnEventNextCursor() {
        AbstractTokenPairEvent lastEvent = tokenPairEventRepository.findFirstX_ReserveWithdrawnByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveX_ReserveWithdrawn(SuiMoveEventEnvelope<X_ReserveWithdrawn> eventEnvelope) {
        AbstractTokenPairEvent.X_ReserveWithdrawn x_ReserveWithdrawn = DomainBeanUtils.toX_ReserveWithdrawn(eventEnvelope);
        if (tokenPairEventRepository.findById(x_ReserveWithdrawn.getTokenPairEventId()).isPresent()) {
            return;
        }
        tokenPairEventRepository.save(x_ReserveWithdrawn);
    }

    @Transactional
    public void pullY_ReserveWithdrawnEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getY_ReserveWithdrawnEventNextCursor();
        while (true) {
            PaginatedMoveEvents<Y_ReserveWithdrawn> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.TOKEN_PAIR_MODULE_Y_RESERVE_WITHDRAWN,
                    cursor, limit, false, Y_ReserveWithdrawn.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<Y_ReserveWithdrawn> eventEnvelope : eventPage.getData()) {
                    saveY_ReserveWithdrawn(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getY_ReserveWithdrawnEventNextCursor() {
        AbstractTokenPairEvent lastEvent = tokenPairEventRepository.findFirstY_ReserveWithdrawnByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveY_ReserveWithdrawn(SuiMoveEventEnvelope<Y_ReserveWithdrawn> eventEnvelope) {
        AbstractTokenPairEvent.Y_ReserveWithdrawn y_ReserveWithdrawn = DomainBeanUtils.toY_ReserveWithdrawn(eventEnvelope);
        if (tokenPairEventRepository.findById(y_ReserveWithdrawn.getTokenPairEventId()).isPresent()) {
            return;
        }
        tokenPairEventRepository.save(y_ReserveWithdrawn);
    }

    @Transactional
    public void pullXSwappedForYEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getXSwappedForYEventNextCursor();
        while (true) {
            PaginatedMoveEvents<XSwappedForY> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.TOKEN_PAIR_MODULE_X_SWAPPED_FOR_Y,
                    cursor, limit, false, XSwappedForY.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<XSwappedForY> eventEnvelope : eventPage.getData()) {
                    saveXSwappedForY(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getXSwappedForYEventNextCursor() {
        AbstractTokenPairEvent lastEvent = tokenPairEventRepository.findFirstXSwappedForYByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveXSwappedForY(SuiMoveEventEnvelope<XSwappedForY> eventEnvelope) {
        AbstractTokenPairEvent.XSwappedForY xSwappedForY = DomainBeanUtils.toXSwappedForY(eventEnvelope);
        if (tokenPairEventRepository.findById(xSwappedForY.getTokenPairEventId()).isPresent()) {
            return;
        }
        tokenPairEventRepository.save(xSwappedForY);
    }


    private String getDefaultSuiPackageId() {
        return suiPackageRepository.findById(ContractConstants.DEFAULT_SUI_PACKAGE_NAME)
                .map(SuiPackage::getObjectId).orElse(null);
    }
}
