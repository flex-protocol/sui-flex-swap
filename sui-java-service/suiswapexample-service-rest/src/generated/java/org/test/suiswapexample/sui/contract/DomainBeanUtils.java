// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.sui.contract;

import java.math.*;
import java.util.*;

import com.github.wubuku.sui.bean.MoveEvent;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.bean.Table;
import com.github.wubuku.sui.bean.ObjectTable;
import org.test.suiswapexample.domain.tokenpair.AbstractTokenPairEvent;
import org.test.suiswapexample.sui.contract.tokenpair.TokenPairInitialized;
import org.test.suiswapexample.sui.contract.tokenpair.ExchangeRateUpdated;
import org.test.suiswapexample.sui.contract.tokenpair.Y_ReserveDeposited;
import org.test.suiswapexample.sui.contract.tokenpair.X_ReserveWithdrawn;
import org.test.suiswapexample.sui.contract.tokenpair.Y_ReserveWithdrawn;
import org.test.suiswapexample.sui.contract.tokenpair.XSwappedForY;
import org.test.suiswapexample.domain.liquiditytoken.AbstractLiquidityTokenEvent;
import org.test.suiswapexample.sui.contract.liquiditytoken.LiquidityTokenMinted;
import org.test.suiswapexample.sui.contract.liquiditytoken.LiquidityTokenDestroyed;
import org.test.suiswapexample.domain.exchange.AbstractExchangeEvent;
import org.test.suiswapexample.sui.contract.exchange.InitExchangeEvent;
import org.test.suiswapexample.sui.contract.exchange.TokenPairAddedToExchange;
import org.test.suiswapexample.sui.contract.exchange.ExchangeUpdated;

/**
 * Utils that convert beans in the contract package to domain beans.
 */
public class DomainBeanUtils {
    private DomainBeanUtils() {
    }

    public static org.test.suiswapexample.domain.ObjectTable toObjectTable(ObjectTable contractObjectTable) {
        if (contractObjectTable == null) {
            return null;
        }
        org.test.suiswapexample.domain.ObjectTable objectTable = new org.test.suiswapexample.domain.ObjectTable();
        objectTable.setId(contractObjectTable.getFields().getId().getId());
        objectTable.setSize(contractObjectTable.getFields().getSize());
        return objectTable;
    }

    public static org.test.suiswapexample.domain.Table toTable(Table contractTable) {
        if (contractTable == null) {
            return null;
        }
        org.test.suiswapexample.domain.Table table = new org.test.suiswapexample.domain.Table();
        table.setId(contractTable.getFields().getId().getId());
        table.setSize(contractTable.getFields().getSize());
        return table;
    }


    public static AbstractTokenPairEvent.TokenPairInitialized toTokenPairInitialized(SuiMoveEventEnvelope<TokenPairInitialized> eventEnvelope) {
        TokenPairInitialized contractEvent = eventEnvelope.getParsedJson();

        AbstractTokenPairEvent.TokenPairInitialized tokenPairInitialized = new AbstractTokenPairEvent.TokenPairInitialized();
        tokenPairInitialized.setId(contractEvent.getId());
        tokenPairInitialized.setExchangeId(contractEvent.getExchangeId());
        tokenPairInitialized.setExchangeRateNumerator(contractEvent.getExchangeRateNumerator());
        tokenPairInitialized.setExchangeRateDenominator(contractEvent.getExchangeRateDenominator());
        tokenPairInitialized.setProvider(contractEvent.getProvider());
        tokenPairInitialized.setX_TokenType(contractEvent.getX_TokenType());
        tokenPairInitialized.setY_TokenType(contractEvent.getY_TokenType());
        tokenPairInitialized.setX_Amount(contractEvent.getX_Amount());
        tokenPairInitialized.setY_Amount(contractEvent.getY_Amount());
        tokenPairInitialized.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        tokenPairInitialized.setVersion(BigInteger.valueOf(-1));

        tokenPairInitialized.setSuiTimestamp(eventEnvelope.getTimestampMs());
        tokenPairInitialized.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        tokenPairInitialized.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        tokenPairInitialized.setSuiPackageId(eventEnvelope.getPackageId());
        tokenPairInitialized.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        tokenPairInitialized.setSuiSender(eventEnvelope.getSender());

        return tokenPairInitialized;
    }

    public static AbstractTokenPairEvent.ExchangeRateUpdated toExchangeRateUpdated(SuiMoveEventEnvelope<ExchangeRateUpdated> eventEnvelope) {
        ExchangeRateUpdated contractEvent = eventEnvelope.getParsedJson();

        AbstractTokenPairEvent.ExchangeRateUpdated exchangeRateUpdated = new AbstractTokenPairEvent.ExchangeRateUpdated();
        exchangeRateUpdated.setId(contractEvent.getId());
        exchangeRateUpdated.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        exchangeRateUpdated.setExchangeRateNumerator(contractEvent.getExchangeRateNumerator());
        exchangeRateUpdated.setExchangeRateDenominator(contractEvent.getExchangeRateDenominator());
        exchangeRateUpdated.setProvider(contractEvent.getProvider());
        exchangeRateUpdated.setX_TokenType(contractEvent.getX_TokenType());
        exchangeRateUpdated.setY_TokenType(contractEvent.getY_TokenType());
        exchangeRateUpdated.setVersion(contractEvent.getVersion());

        exchangeRateUpdated.setSuiTimestamp(eventEnvelope.getTimestampMs());
        exchangeRateUpdated.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        exchangeRateUpdated.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        exchangeRateUpdated.setSuiPackageId(eventEnvelope.getPackageId());
        exchangeRateUpdated.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        exchangeRateUpdated.setSuiSender(eventEnvelope.getSender());

        return exchangeRateUpdated;
    }

    public static AbstractTokenPairEvent.Y_ReserveDeposited toY_ReserveDeposited(SuiMoveEventEnvelope<Y_ReserveDeposited> eventEnvelope) {
        Y_ReserveDeposited contractEvent = eventEnvelope.getParsedJson();

        AbstractTokenPairEvent.Y_ReserveDeposited y_ReserveDeposited = new AbstractTokenPairEvent.Y_ReserveDeposited();
        y_ReserveDeposited.setId(contractEvent.getId());
        y_ReserveDeposited.setProvider(contractEvent.getProvider());
        y_ReserveDeposited.setX_TokenType(contractEvent.getX_TokenType());
        y_ReserveDeposited.setY_TokenType(contractEvent.getY_TokenType());
        y_ReserveDeposited.setY_Amount(contractEvent.getY_Amount());
        y_ReserveDeposited.setVersion(contractEvent.getVersion());

        y_ReserveDeposited.setSuiTimestamp(eventEnvelope.getTimestampMs());
        y_ReserveDeposited.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        y_ReserveDeposited.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        y_ReserveDeposited.setSuiPackageId(eventEnvelope.getPackageId());
        y_ReserveDeposited.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        y_ReserveDeposited.setSuiSender(eventEnvelope.getSender());

        return y_ReserveDeposited;
    }

    public static AbstractTokenPairEvent.X_ReserveWithdrawn toX_ReserveWithdrawn(SuiMoveEventEnvelope<X_ReserveWithdrawn> eventEnvelope) {
        X_ReserveWithdrawn contractEvent = eventEnvelope.getParsedJson();

        AbstractTokenPairEvent.X_ReserveWithdrawn x_ReserveWithdrawn = new AbstractTokenPairEvent.X_ReserveWithdrawn();
        x_ReserveWithdrawn.setId(contractEvent.getId());
        x_ReserveWithdrawn.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        x_ReserveWithdrawn.setX_Amount(contractEvent.getX_Amount());
        x_ReserveWithdrawn.setX_TokenType(contractEvent.getX_TokenType());
        x_ReserveWithdrawn.setY_TokenType(contractEvent.getY_TokenType());
        x_ReserveWithdrawn.setVersion(contractEvent.getVersion());

        x_ReserveWithdrawn.setSuiTimestamp(eventEnvelope.getTimestampMs());
        x_ReserveWithdrawn.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        x_ReserveWithdrawn.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        x_ReserveWithdrawn.setSuiPackageId(eventEnvelope.getPackageId());
        x_ReserveWithdrawn.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        x_ReserveWithdrawn.setSuiSender(eventEnvelope.getSender());

        return x_ReserveWithdrawn;
    }

    public static AbstractTokenPairEvent.Y_ReserveWithdrawn toY_ReserveWithdrawn(SuiMoveEventEnvelope<Y_ReserveWithdrawn> eventEnvelope) {
        Y_ReserveWithdrawn contractEvent = eventEnvelope.getParsedJson();

        AbstractTokenPairEvent.Y_ReserveWithdrawn y_ReserveWithdrawn = new AbstractTokenPairEvent.Y_ReserveWithdrawn();
        y_ReserveWithdrawn.setId(contractEvent.getId());
        y_ReserveWithdrawn.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        y_ReserveWithdrawn.setY_Amount(contractEvent.getY_Amount());
        y_ReserveWithdrawn.setX_TokenType(contractEvent.getX_TokenType());
        y_ReserveWithdrawn.setY_TokenType(contractEvent.getY_TokenType());
        y_ReserveWithdrawn.setVersion(contractEvent.getVersion());

        y_ReserveWithdrawn.setSuiTimestamp(eventEnvelope.getTimestampMs());
        y_ReserveWithdrawn.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        y_ReserveWithdrawn.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        y_ReserveWithdrawn.setSuiPackageId(eventEnvelope.getPackageId());
        y_ReserveWithdrawn.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        y_ReserveWithdrawn.setSuiSender(eventEnvelope.getSender());

        return y_ReserveWithdrawn;
    }

    public static AbstractTokenPairEvent.XSwappedForY toXSwappedForY(SuiMoveEventEnvelope<XSwappedForY> eventEnvelope) {
        XSwappedForY contractEvent = eventEnvelope.getParsedJson();

        AbstractTokenPairEvent.XSwappedForY xSwappedForY = new AbstractTokenPairEvent.XSwappedForY();
        xSwappedForY.setId(contractEvent.getId());
        xSwappedForY.setSender(contractEvent.getSender());
        xSwappedForY.setX_TokenType(contractEvent.getX_TokenType());
        xSwappedForY.setY_TokenType(contractEvent.getY_TokenType());
        xSwappedForY.setX_Amount(contractEvent.getX_Amount());
        xSwappedForY.setY_Amount(contractEvent.getY_Amount());
        xSwappedForY.setVersion(contractEvent.getVersion());

        xSwappedForY.setSuiTimestamp(eventEnvelope.getTimestampMs());
        xSwappedForY.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        xSwappedForY.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        xSwappedForY.setSuiPackageId(eventEnvelope.getPackageId());
        xSwappedForY.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        xSwappedForY.setSuiSender(eventEnvelope.getSender());

        return xSwappedForY;
    }

    public static AbstractLiquidityTokenEvent.LiquidityTokenMinted toLiquidityTokenMinted(SuiMoveEventEnvelope<LiquidityTokenMinted> eventEnvelope) {
        LiquidityTokenMinted contractEvent = eventEnvelope.getParsedJson();

        AbstractLiquidityTokenEvent.LiquidityTokenMinted liquidityTokenMinted = new AbstractLiquidityTokenEvent.LiquidityTokenMinted();
        liquidityTokenMinted.setId(contractEvent.getId());
        liquidityTokenMinted.setVersion(BigInteger.valueOf(eventEnvelope.getTimestampMs()));

        liquidityTokenMinted.setSuiTimestamp(eventEnvelope.getTimestampMs());
        liquidityTokenMinted.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        liquidityTokenMinted.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        liquidityTokenMinted.setSuiPackageId(eventEnvelope.getPackageId());
        liquidityTokenMinted.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        liquidityTokenMinted.setSuiSender(eventEnvelope.getSender());

        return liquidityTokenMinted;
    }

    public static AbstractLiquidityTokenEvent.LiquidityTokenDestroyed toLiquidityTokenDestroyed(SuiMoveEventEnvelope<LiquidityTokenDestroyed> eventEnvelope) {
        LiquidityTokenDestroyed contractEvent = eventEnvelope.getParsedJson();

        AbstractLiquidityTokenEvent.LiquidityTokenDestroyed liquidityTokenDestroyed = new AbstractLiquidityTokenEvent.LiquidityTokenDestroyed();
        liquidityTokenDestroyed.setId(contractEvent.getId());
        liquidityTokenDestroyed.setVersion(BigInteger.valueOf(eventEnvelope.getTimestampMs()));

        liquidityTokenDestroyed.setSuiTimestamp(eventEnvelope.getTimestampMs());
        liquidityTokenDestroyed.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        liquidityTokenDestroyed.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        liquidityTokenDestroyed.setSuiPackageId(eventEnvelope.getPackageId());
        liquidityTokenDestroyed.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        liquidityTokenDestroyed.setSuiSender(eventEnvelope.getSender());

        return liquidityTokenDestroyed;
    }

    public static AbstractExchangeEvent.InitExchangeEvent toInitExchangeEvent(SuiMoveEventEnvelope<InitExchangeEvent> eventEnvelope) {
        InitExchangeEvent contractEvent = eventEnvelope.getParsedJson();

        AbstractExchangeEvent.InitExchangeEvent initExchangeEvent = new AbstractExchangeEvent.InitExchangeEvent();
        initExchangeEvent.setId(contractEvent.getId());
        initExchangeEvent.setVersion(BigInteger.valueOf(-1));

        initExchangeEvent.setSuiTimestamp(eventEnvelope.getTimestampMs());
        initExchangeEvent.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        initExchangeEvent.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        initExchangeEvent.setSuiPackageId(eventEnvelope.getPackageId());
        initExchangeEvent.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        initExchangeEvent.setSuiSender(eventEnvelope.getSender());

        return initExchangeEvent;
    }

    public static AbstractExchangeEvent.TokenPairAddedToExchange toTokenPairAddedToExchange(SuiMoveEventEnvelope<TokenPairAddedToExchange> eventEnvelope) {
        TokenPairAddedToExchange contractEvent = eventEnvelope.getParsedJson();

        AbstractExchangeEvent.TokenPairAddedToExchange tokenPairAddedToExchange = new AbstractExchangeEvent.TokenPairAddedToExchange();
        tokenPairAddedToExchange.setId(contractEvent.getId());
        tokenPairAddedToExchange.setTokenPairId(contractEvent.getTokenPairId());
        tokenPairAddedToExchange.setX_TokenType(contractEvent.getX_TokenType());
        tokenPairAddedToExchange.setY_TokenType(contractEvent.getY_TokenType());
        tokenPairAddedToExchange.setVersion(contractEvent.getVersion());

        tokenPairAddedToExchange.setSuiTimestamp(eventEnvelope.getTimestampMs());
        tokenPairAddedToExchange.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        tokenPairAddedToExchange.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        tokenPairAddedToExchange.setSuiPackageId(eventEnvelope.getPackageId());
        tokenPairAddedToExchange.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        tokenPairAddedToExchange.setSuiSender(eventEnvelope.getSender());

        return tokenPairAddedToExchange;
    }

    public static AbstractExchangeEvent.ExchangeUpdated toExchangeUpdated(SuiMoveEventEnvelope<ExchangeUpdated> eventEnvelope) {
        ExchangeUpdated contractEvent = eventEnvelope.getParsedJson();

        AbstractExchangeEvent.ExchangeUpdated exchangeUpdated = new AbstractExchangeEvent.ExchangeUpdated();
        exchangeUpdated.setId(contractEvent.getId());
        exchangeUpdated.setName(contractEvent.getName());
        exchangeUpdated.setVersion(contractEvent.getVersion());

        exchangeUpdated.setSuiTimestamp(eventEnvelope.getTimestampMs());
        exchangeUpdated.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        exchangeUpdated.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        exchangeUpdated.setSuiPackageId(eventEnvelope.getPackageId());
        exchangeUpdated.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        exchangeUpdated.setSuiSender(eventEnvelope.getSender());

        return exchangeUpdated;
    }


    public static List<String> extractTypeArguments(String type) {
        int i = type.indexOf("<");
        int j = type.lastIndexOf(">");
        if (i > 0 && j > i && j == type.length() - 1) {
            String typeArguments = type.substring(i + 1, j);
            String[] typeArgumentArray = typeArguments.split(",");
            return Arrays.stream(typeArgumentArray).map(String::trim).collect(java.util.stream.Collectors.toList());
        } else {
            return Collections.emptyList();
        }
    }
}
