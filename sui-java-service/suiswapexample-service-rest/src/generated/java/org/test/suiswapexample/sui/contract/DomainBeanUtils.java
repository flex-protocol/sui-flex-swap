// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.sui.contract;

import java.math.*;
import java.util.*;

import com.github.wubuku.sui.bean.MoveEvent;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.bean.Table;
import com.github.wubuku.sui.bean.ObjectTable;
import org.test.suiswapexample.domain.tokenpair.AbstractTokenPairEvent;
import org.test.suiswapexample.sui.contract.tokenpair.LiquidityInitialized;
import org.test.suiswapexample.sui.contract.tokenpair.LiquidityAdded;
import org.test.suiswapexample.sui.contract.tokenpair.LiquidityRemoved;
import org.test.suiswapexample.sui.contract.tokenpair.TokenPairDestroyed;
import org.test.suiswapexample.sui.contract.tokenpair.XSwappedForY;
import org.test.suiswapexample.sui.contract.tokenpair.YSwappedForX;
import org.test.suiswapexample.sui.contract.tokenpair.FeeRateUpdated;
import org.test.suiswapexample.domain.sellpool.AbstractSellPoolEvent;
import org.test.suiswapexample.sui.contract.sellpool.SellPoolInitialized;
import org.test.suiswapexample.sui.contract.sellpool.SellPoolExchangeRateUpdated;
import org.test.suiswapexample.sui.contract.sellpool.SellPoolXTokenAdded;
import org.test.suiswapexample.sui.contract.sellpool.SellPoolXTokenRemoved;
import org.test.suiswapexample.sui.contract.sellpool.SellPoolYReserveWithdrawn;
import org.test.suiswapexample.sui.contract.sellpool.SellPoolDestroyed;
import org.test.suiswapexample.sui.contract.sellpool.SellPoolYSwappedForX;
import org.test.suiswapexample.domain.buypool.AbstractBuyPoolEvent;
import org.test.suiswapexample.sui.contract.buypool.BuyPoolInitialized;
import org.test.suiswapexample.sui.contract.buypool.BuyPoolExchangeRateUpdated;
import org.test.suiswapexample.sui.contract.buypool.BuyPoolXTokenRemoved;
import org.test.suiswapexample.sui.contract.buypool.BuyPoolYReserveWithdrawn;
import org.test.suiswapexample.sui.contract.buypool.BuyPoolDestroyed;
import org.test.suiswapexample.sui.contract.buypool.BuyPoolXSwappedForY;
import org.test.suiswapexample.domain.liquiditytoken.AbstractLiquidityTokenEvent;
import org.test.suiswapexample.sui.contract.liquiditytoken.LiquidityTokenMinted;
import org.test.suiswapexample.sui.contract.liquiditytoken.LiquidityTokenDestroyed;
import org.test.suiswapexample.domain.exchange.AbstractExchangeEvent;
import org.test.suiswapexample.sui.contract.exchange.InitExchangeEvent;
import org.test.suiswapexample.sui.contract.exchange.TokenPairAddedToExchange;
import org.test.suiswapexample.sui.contract.exchange.SellPoolAddedToExchange;
import org.test.suiswapexample.sui.contract.exchange.BuyPoolAddedToExchange;
import org.test.suiswapexample.sui.contract.exchange.ExchangeUpdated;

/**
 * Utils that convert beans in the contract package to domain beans.
 */
public class DomainBeanUtils {
    private DomainBeanUtils() {
    }

    public static org.test.suiswapexample.domain.ObjectTable toObjectTable(ObjectTable contractObjectTable) {
        if (contractObjectTable == null) {
            return null;
        }
        org.test.suiswapexample.domain.ObjectTable objectTable = new org.test.suiswapexample.domain.ObjectTable();
        objectTable.setId(contractObjectTable.getFields().getId().getId());
        objectTable.setSize(contractObjectTable.getFields().getSize());
        return objectTable;
    }

    public static org.test.suiswapexample.domain.Table toTable(Table contractTable) {
        if (contractTable == null) {
            return null;
        }
        org.test.suiswapexample.domain.Table table = new org.test.suiswapexample.domain.Table();
        table.setId(contractTable.getFields().getId().getId());
        table.setSize(contractTable.getFields().getSize());
        return table;
    }


    public static AbstractTokenPairEvent.LiquidityInitialized toLiquidityInitialized(SuiMoveEventEnvelope<LiquidityInitialized> eventEnvelope) {
        LiquidityInitialized contractEvent = eventEnvelope.getParsedJson();

        AbstractTokenPairEvent.LiquidityInitialized liquidityInitialized = new AbstractTokenPairEvent.LiquidityInitialized();
        liquidityInitialized.setId(contractEvent.getId());
        liquidityInitialized.setExchangeId(contractEvent.getExchangeId());
        liquidityInitialized.setX_Amount(contractEvent.getX_Amount());
        liquidityInitialized.setFeeNumerator(contractEvent.getFeeNumerator());
        liquidityInitialized.setFeeDenominator(contractEvent.getFeeDenominator());
        liquidityInitialized.setProvider(contractEvent.getProvider());
        liquidityInitialized.setX_TokenType(contractEvent.getX_TokenType());
        liquidityInitialized.setY_TokenType(contractEvent.getY_TokenType());
        liquidityInitialized.setY_Amount(contractEvent.getY_Amount());
        liquidityInitialized.setLiquidityAmount(contractEvent.getLiquidityAmount());
        liquidityInitialized.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        liquidityInitialized.setX_Id(contractEvent.getX_Id());
        liquidityInitialized.setVersion(BigInteger.valueOf(-1));

        liquidityInitialized.setSuiTimestamp(eventEnvelope.getTimestampMs());
        liquidityInitialized.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        liquidityInitialized.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        liquidityInitialized.setSuiPackageId(eventEnvelope.getPackageId());
        liquidityInitialized.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        liquidityInitialized.setSuiSender(eventEnvelope.getSender());

        return liquidityInitialized;
    }

    public static AbstractTokenPairEvent.LiquidityAdded toLiquidityAdded(SuiMoveEventEnvelope<LiquidityAdded> eventEnvelope) {
        LiquidityAdded contractEvent = eventEnvelope.getParsedJson();

        AbstractTokenPairEvent.LiquidityAdded liquidityAdded = new AbstractTokenPairEvent.LiquidityAdded();
        liquidityAdded.setId(contractEvent.getId());
        liquidityAdded.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        liquidityAdded.setX_Amount(contractEvent.getX_Amount());
        liquidityAdded.setProvider(contractEvent.getProvider());
        liquidityAdded.setX_TokenType(contractEvent.getX_TokenType());
        liquidityAdded.setY_TokenType(contractEvent.getY_TokenType());
        liquidityAdded.setY_Amount(contractEvent.getY_Amount());
        liquidityAdded.setLiquidityAmount(contractEvent.getLiquidityAmount());
        liquidityAdded.setX_Id(contractEvent.getX_Id());
        liquidityAdded.setVersion(contractEvent.getVersion());

        liquidityAdded.setSuiTimestamp(eventEnvelope.getTimestampMs());
        liquidityAdded.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        liquidityAdded.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        liquidityAdded.setSuiPackageId(eventEnvelope.getPackageId());
        liquidityAdded.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        liquidityAdded.setSuiSender(eventEnvelope.getSender());

        return liquidityAdded;
    }

    public static AbstractTokenPairEvent.LiquidityRemoved toLiquidityRemoved(SuiMoveEventEnvelope<LiquidityRemoved> eventEnvelope) {
        LiquidityRemoved contractEvent = eventEnvelope.getParsedJson();

        AbstractTokenPairEvent.LiquidityRemoved liquidityRemoved = new AbstractTokenPairEvent.LiquidityRemoved();
        liquidityRemoved.setId(contractEvent.getId());
        liquidityRemoved.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        liquidityRemoved.setX_Id(contractEvent.getX_Id());
        liquidityRemoved.setProvider(contractEvent.getProvider());
        liquidityRemoved.setX_TokenType(contractEvent.getX_TokenType());
        liquidityRemoved.setY_TokenType(contractEvent.getY_TokenType());
        liquidityRemoved.setX_Amount(contractEvent.getX_Amount());
        liquidityRemoved.setY_Amount(contractEvent.getY_Amount());
        liquidityRemoved.setLiquidityAmount(contractEvent.getLiquidityAmount());
        liquidityRemoved.setVersion(contractEvent.getVersion());

        liquidityRemoved.setSuiTimestamp(eventEnvelope.getTimestampMs());
        liquidityRemoved.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        liquidityRemoved.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        liquidityRemoved.setSuiPackageId(eventEnvelope.getPackageId());
        liquidityRemoved.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        liquidityRemoved.setSuiSender(eventEnvelope.getSender());

        return liquidityRemoved;
    }

    public static AbstractTokenPairEvent.TokenPairDestroyed toTokenPairDestroyed(SuiMoveEventEnvelope<TokenPairDestroyed> eventEnvelope) {
        TokenPairDestroyed contractEvent = eventEnvelope.getParsedJson();

        AbstractTokenPairEvent.TokenPairDestroyed tokenPairDestroyed = new AbstractTokenPairEvent.TokenPairDestroyed();
        tokenPairDestroyed.setId(contractEvent.getId());
        tokenPairDestroyed.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        tokenPairDestroyed.setVersion(contractEvent.getVersion());

        tokenPairDestroyed.setSuiTimestamp(eventEnvelope.getTimestampMs());
        tokenPairDestroyed.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        tokenPairDestroyed.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        tokenPairDestroyed.setSuiPackageId(eventEnvelope.getPackageId());
        tokenPairDestroyed.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        tokenPairDestroyed.setSuiSender(eventEnvelope.getSender());

        return tokenPairDestroyed;
    }

    public static AbstractTokenPairEvent.XSwappedForY toXSwappedForY(SuiMoveEventEnvelope<XSwappedForY> eventEnvelope) {
        XSwappedForY contractEvent = eventEnvelope.getParsedJson();

        AbstractTokenPairEvent.XSwappedForY xSwappedForY = new AbstractTokenPairEvent.XSwappedForY();
        xSwappedForY.setId(contractEvent.getId());
        xSwappedForY.setX_Amount(contractEvent.getX_Amount());
        xSwappedForY.setExpectedY_AmountOut(contractEvent.getExpectedY_AmountOut());
        xSwappedForY.setSender(contractEvent.getSender());
        xSwappedForY.setX_TokenType(contractEvent.getX_TokenType());
        xSwappedForY.setY_TokenType(contractEvent.getY_TokenType());
        xSwappedForY.setY_Amount(contractEvent.getY_Amount());
        xSwappedForY.setX_Id(contractEvent.getX_Id());
        xSwappedForY.setVersion(contractEvent.getVersion());

        xSwappedForY.setSuiTimestamp(eventEnvelope.getTimestampMs());
        xSwappedForY.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        xSwappedForY.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        xSwappedForY.setSuiPackageId(eventEnvelope.getPackageId());
        xSwappedForY.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        xSwappedForY.setSuiSender(eventEnvelope.getSender());

        return xSwappedForY;
    }

    public static AbstractTokenPairEvent.YSwappedForX toYSwappedForX(SuiMoveEventEnvelope<YSwappedForX> eventEnvelope) {
        YSwappedForX contractEvent = eventEnvelope.getParsedJson();

        AbstractTokenPairEvent.YSwappedForX ySwappedForX = new AbstractTokenPairEvent.YSwappedForX();
        ySwappedForX.setId(contractEvent.getId());
        ySwappedForX.setX_Id(contractEvent.getX_Id());
        ySwappedForX.setSender(contractEvent.getSender());
        ySwappedForX.setX_TokenType(contractEvent.getX_TokenType());
        ySwappedForX.setY_TokenType(contractEvent.getY_TokenType());
        ySwappedForX.setX_Amount(contractEvent.getX_Amount());
        ySwappedForX.setY_Amount(contractEvent.getY_Amount());
        ySwappedForX.setVersion(contractEvent.getVersion());

        ySwappedForX.setSuiTimestamp(eventEnvelope.getTimestampMs());
        ySwappedForX.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        ySwappedForX.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        ySwappedForX.setSuiPackageId(eventEnvelope.getPackageId());
        ySwappedForX.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        ySwappedForX.setSuiSender(eventEnvelope.getSender());

        return ySwappedForX;
    }

    public static AbstractTokenPairEvent.FeeRateUpdated toFeeRateUpdated(SuiMoveEventEnvelope<FeeRateUpdated> eventEnvelope) {
        FeeRateUpdated contractEvent = eventEnvelope.getParsedJson();

        AbstractTokenPairEvent.FeeRateUpdated feeRateUpdated = new AbstractTokenPairEvent.FeeRateUpdated();
        feeRateUpdated.setId(contractEvent.getId());
        feeRateUpdated.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        feeRateUpdated.setFeeNumerator(contractEvent.getFeeNumerator());
        feeRateUpdated.setFeeDenominator(contractEvent.getFeeDenominator());
        feeRateUpdated.setVersion(contractEvent.getVersion());

        feeRateUpdated.setSuiTimestamp(eventEnvelope.getTimestampMs());
        feeRateUpdated.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        feeRateUpdated.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        feeRateUpdated.setSuiPackageId(eventEnvelope.getPackageId());
        feeRateUpdated.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        feeRateUpdated.setSuiSender(eventEnvelope.getSender());

        return feeRateUpdated;
    }

    public static AbstractSellPoolEvent.SellPoolInitialized toSellPoolInitialized(SuiMoveEventEnvelope<SellPoolInitialized> eventEnvelope) {
        SellPoolInitialized contractEvent = eventEnvelope.getParsedJson();

        AbstractSellPoolEvent.SellPoolInitialized sellPoolInitialized = new AbstractSellPoolEvent.SellPoolInitialized();
        sellPoolInitialized.setId(contractEvent.getId());
        sellPoolInitialized.setExchangeId(contractEvent.getExchangeId());
        sellPoolInitialized.setX_Amount(contractEvent.getX_Amount());
        sellPoolInitialized.setExchangeRateNumerator(contractEvent.getExchangeRateNumerator());
        sellPoolInitialized.setExchangeRateDenominator(contractEvent.getExchangeRateDenominator());
        sellPoolInitialized.setPriceCurveType(contractEvent.getPriceCurveType());
        sellPoolInitialized.setPriceDeltaX_Amount(contractEvent.getPriceDeltaX_Amount());
        sellPoolInitialized.setPriceDeltaNumerator(contractEvent.getPriceDeltaNumerator());
        sellPoolInitialized.setPriceDeltaDenominator(contractEvent.getPriceDeltaDenominator());
        sellPoolInitialized.setProvider(contractEvent.getProvider());
        sellPoolInitialized.setX_TokenType(contractEvent.getX_TokenType());
        sellPoolInitialized.setY_TokenType(contractEvent.getY_TokenType());
        sellPoolInitialized.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        sellPoolInitialized.setX_Id(contractEvent.getX_Id());
        sellPoolInitialized.setVersion(BigInteger.valueOf(-1));

        sellPoolInitialized.setSuiTimestamp(eventEnvelope.getTimestampMs());
        sellPoolInitialized.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        sellPoolInitialized.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        sellPoolInitialized.setSuiPackageId(eventEnvelope.getPackageId());
        sellPoolInitialized.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        sellPoolInitialized.setSuiSender(eventEnvelope.getSender());

        return sellPoolInitialized;
    }

    public static AbstractSellPoolEvent.SellPoolExchangeRateUpdated toSellPoolExchangeRateUpdated(SuiMoveEventEnvelope<SellPoolExchangeRateUpdated> eventEnvelope) {
        SellPoolExchangeRateUpdated contractEvent = eventEnvelope.getParsedJson();

        AbstractSellPoolEvent.SellPoolExchangeRateUpdated sellPoolExchangeRateUpdated = new AbstractSellPoolEvent.SellPoolExchangeRateUpdated();
        sellPoolExchangeRateUpdated.setId(contractEvent.getId());
        sellPoolExchangeRateUpdated.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        sellPoolExchangeRateUpdated.setStartExchangeRateNumerator(contractEvent.getStartExchangeRateNumerator());
        sellPoolExchangeRateUpdated.setExchangeRateNumerator(contractEvent.getExchangeRateNumerator());
        sellPoolExchangeRateUpdated.setExchangeRateDenominator(contractEvent.getExchangeRateDenominator());
        sellPoolExchangeRateUpdated.setPriceDeltaX_Amount(contractEvent.getPriceDeltaX_Amount());
        sellPoolExchangeRateUpdated.setPriceDeltaNumerator(contractEvent.getPriceDeltaNumerator());
        sellPoolExchangeRateUpdated.setPriceDeltaDenominator(contractEvent.getPriceDeltaDenominator());
        sellPoolExchangeRateUpdated.setProvider(contractEvent.getProvider());
        sellPoolExchangeRateUpdated.setX_TokenType(contractEvent.getX_TokenType());
        sellPoolExchangeRateUpdated.setY_TokenType(contractEvent.getY_TokenType());
        sellPoolExchangeRateUpdated.setVersion(contractEvent.getVersion());

        sellPoolExchangeRateUpdated.setSuiTimestamp(eventEnvelope.getTimestampMs());
        sellPoolExchangeRateUpdated.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        sellPoolExchangeRateUpdated.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        sellPoolExchangeRateUpdated.setSuiPackageId(eventEnvelope.getPackageId());
        sellPoolExchangeRateUpdated.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        sellPoolExchangeRateUpdated.setSuiSender(eventEnvelope.getSender());

        return sellPoolExchangeRateUpdated;
    }

    public static AbstractSellPoolEvent.SellPoolXTokenAdded toSellPoolXTokenAdded(SuiMoveEventEnvelope<SellPoolXTokenAdded> eventEnvelope) {
        SellPoolXTokenAdded contractEvent = eventEnvelope.getParsedJson();

        AbstractSellPoolEvent.SellPoolXTokenAdded sellPoolXTokenAdded = new AbstractSellPoolEvent.SellPoolXTokenAdded();
        sellPoolXTokenAdded.setId(contractEvent.getId());
        sellPoolXTokenAdded.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        sellPoolXTokenAdded.setX_Amount(contractEvent.getX_Amount());
        sellPoolXTokenAdded.setProvider(contractEvent.getProvider());
        sellPoolXTokenAdded.setX_TokenType(contractEvent.getX_TokenType());
        sellPoolXTokenAdded.setY_TokenType(contractEvent.getY_TokenType());
        sellPoolXTokenAdded.setX_Id(contractEvent.getX_Id());
        sellPoolXTokenAdded.setVersion(contractEvent.getVersion());

        sellPoolXTokenAdded.setSuiTimestamp(eventEnvelope.getTimestampMs());
        sellPoolXTokenAdded.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        sellPoolXTokenAdded.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        sellPoolXTokenAdded.setSuiPackageId(eventEnvelope.getPackageId());
        sellPoolXTokenAdded.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        sellPoolXTokenAdded.setSuiSender(eventEnvelope.getSender());

        return sellPoolXTokenAdded;
    }

    public static AbstractSellPoolEvent.SellPoolXTokenRemoved toSellPoolXTokenRemoved(SuiMoveEventEnvelope<SellPoolXTokenRemoved> eventEnvelope) {
        SellPoolXTokenRemoved contractEvent = eventEnvelope.getParsedJson();

        AbstractSellPoolEvent.SellPoolXTokenRemoved sellPoolXTokenRemoved = new AbstractSellPoolEvent.SellPoolXTokenRemoved();
        sellPoolXTokenRemoved.setId(contractEvent.getId());
        sellPoolXTokenRemoved.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        sellPoolXTokenRemoved.setX_Id(contractEvent.getX_Id());
        sellPoolXTokenRemoved.setProvider(contractEvent.getProvider());
        sellPoolXTokenRemoved.setX_TokenType(contractEvent.getX_TokenType());
        sellPoolXTokenRemoved.setY_TokenType(contractEvent.getY_TokenType());
        sellPoolXTokenRemoved.setX_Amount(contractEvent.getX_Amount());
        sellPoolXTokenRemoved.setVersion(contractEvent.getVersion());

        sellPoolXTokenRemoved.setSuiTimestamp(eventEnvelope.getTimestampMs());
        sellPoolXTokenRemoved.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        sellPoolXTokenRemoved.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        sellPoolXTokenRemoved.setSuiPackageId(eventEnvelope.getPackageId());
        sellPoolXTokenRemoved.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        sellPoolXTokenRemoved.setSuiSender(eventEnvelope.getSender());

        return sellPoolXTokenRemoved;
    }

    public static AbstractSellPoolEvent.SellPoolYReserveWithdrawn toSellPoolYReserveWithdrawn(SuiMoveEventEnvelope<SellPoolYReserveWithdrawn> eventEnvelope) {
        SellPoolYReserveWithdrawn contractEvent = eventEnvelope.getParsedJson();

        AbstractSellPoolEvent.SellPoolYReserveWithdrawn sellPoolYReserveWithdrawn = new AbstractSellPoolEvent.SellPoolYReserveWithdrawn();
        sellPoolYReserveWithdrawn.setId(contractEvent.getId());
        sellPoolYReserveWithdrawn.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        sellPoolYReserveWithdrawn.setY_Amount(contractEvent.getY_Amount());
        sellPoolYReserveWithdrawn.setX_TokenType(contractEvent.getX_TokenType());
        sellPoolYReserveWithdrawn.setY_TokenType(contractEvent.getY_TokenType());
        sellPoolYReserveWithdrawn.setVersion(contractEvent.getVersion());

        sellPoolYReserveWithdrawn.setSuiTimestamp(eventEnvelope.getTimestampMs());
        sellPoolYReserveWithdrawn.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        sellPoolYReserveWithdrawn.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        sellPoolYReserveWithdrawn.setSuiPackageId(eventEnvelope.getPackageId());
        sellPoolYReserveWithdrawn.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        sellPoolYReserveWithdrawn.setSuiSender(eventEnvelope.getSender());

        return sellPoolYReserveWithdrawn;
    }

    public static AbstractSellPoolEvent.SellPoolDestroyed toSellPoolDestroyed(SuiMoveEventEnvelope<SellPoolDestroyed> eventEnvelope) {
        SellPoolDestroyed contractEvent = eventEnvelope.getParsedJson();

        AbstractSellPoolEvent.SellPoolDestroyed sellPoolDestroyed = new AbstractSellPoolEvent.SellPoolDestroyed();
        sellPoolDestroyed.setId(contractEvent.getId());
        sellPoolDestroyed.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        sellPoolDestroyed.setVersion(contractEvent.getVersion());

        sellPoolDestroyed.setSuiTimestamp(eventEnvelope.getTimestampMs());
        sellPoolDestroyed.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        sellPoolDestroyed.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        sellPoolDestroyed.setSuiPackageId(eventEnvelope.getPackageId());
        sellPoolDestroyed.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        sellPoolDestroyed.setSuiSender(eventEnvelope.getSender());

        return sellPoolDestroyed;
    }

    public static AbstractSellPoolEvent.SellPoolYSwappedForX toSellPoolYSwappedForX(SuiMoveEventEnvelope<SellPoolYSwappedForX> eventEnvelope) {
        SellPoolYSwappedForX contractEvent = eventEnvelope.getParsedJson();

        AbstractSellPoolEvent.SellPoolYSwappedForX sellPoolYSwappedForX = new AbstractSellPoolEvent.SellPoolYSwappedForX();
        sellPoolYSwappedForX.setId(contractEvent.getId());
        sellPoolYSwappedForX.setX_Id(contractEvent.getX_Id());
        sellPoolYSwappedForX.setSender(contractEvent.getSender());
        sellPoolYSwappedForX.setX_TokenType(contractEvent.getX_TokenType());
        sellPoolYSwappedForX.setY_TokenType(contractEvent.getY_TokenType());
        sellPoolYSwappedForX.setX_Amount(contractEvent.getX_Amount());
        sellPoolYSwappedForX.setY_Amount(contractEvent.getY_Amount());
        sellPoolYSwappedForX.setNewExchangeRateNumerator(contractEvent.getNewExchangeRateNumerator());
        sellPoolYSwappedForX.setVersion(contractEvent.getVersion());

        sellPoolYSwappedForX.setSuiTimestamp(eventEnvelope.getTimestampMs());
        sellPoolYSwappedForX.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        sellPoolYSwappedForX.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        sellPoolYSwappedForX.setSuiPackageId(eventEnvelope.getPackageId());
        sellPoolYSwappedForX.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        sellPoolYSwappedForX.setSuiSender(eventEnvelope.getSender());

        return sellPoolYSwappedForX;
    }

    public static AbstractBuyPoolEvent.BuyPoolInitialized toBuyPoolInitialized(SuiMoveEventEnvelope<BuyPoolInitialized> eventEnvelope) {
        BuyPoolInitialized contractEvent = eventEnvelope.getParsedJson();

        AbstractBuyPoolEvent.BuyPoolInitialized buyPoolInitialized = new AbstractBuyPoolEvent.BuyPoolInitialized();
        buyPoolInitialized.setId(contractEvent.getId());
        buyPoolInitialized.setExchangeId(contractEvent.getExchangeId());
        buyPoolInitialized.setExchangeRateNumerator(contractEvent.getExchangeRateNumerator());
        buyPoolInitialized.setExchangeRateDenominator(contractEvent.getExchangeRateDenominator());
        buyPoolInitialized.setPriceCurveType(contractEvent.getPriceCurveType());
        buyPoolInitialized.setPriceDeltaX_Amount(contractEvent.getPriceDeltaX_Amount());
        buyPoolInitialized.setPriceDeltaNumerator(contractEvent.getPriceDeltaNumerator());
        buyPoolInitialized.setPriceDeltaDenominator(contractEvent.getPriceDeltaDenominator());
        buyPoolInitialized.setProvider(contractEvent.getProvider());
        buyPoolInitialized.setX_TokenType(contractEvent.getX_TokenType());
        buyPoolInitialized.setY_TokenType(contractEvent.getY_TokenType());
        buyPoolInitialized.setY_Amount(contractEvent.getY_Amount());
        buyPoolInitialized.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        buyPoolInitialized.setVersion(BigInteger.valueOf(-1));

        buyPoolInitialized.setSuiTimestamp(eventEnvelope.getTimestampMs());
        buyPoolInitialized.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        buyPoolInitialized.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        buyPoolInitialized.setSuiPackageId(eventEnvelope.getPackageId());
        buyPoolInitialized.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        buyPoolInitialized.setSuiSender(eventEnvelope.getSender());

        return buyPoolInitialized;
    }

    public static AbstractBuyPoolEvent.BuyPoolExchangeRateUpdated toBuyPoolExchangeRateUpdated(SuiMoveEventEnvelope<BuyPoolExchangeRateUpdated> eventEnvelope) {
        BuyPoolExchangeRateUpdated contractEvent = eventEnvelope.getParsedJson();

        AbstractBuyPoolEvent.BuyPoolExchangeRateUpdated buyPoolExchangeRateUpdated = new AbstractBuyPoolEvent.BuyPoolExchangeRateUpdated();
        buyPoolExchangeRateUpdated.setId(contractEvent.getId());
        buyPoolExchangeRateUpdated.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        buyPoolExchangeRateUpdated.setStartExchangeRateNumerator(contractEvent.getStartExchangeRateNumerator());
        buyPoolExchangeRateUpdated.setExchangeRateNumerator(contractEvent.getExchangeRateNumerator());
        buyPoolExchangeRateUpdated.setExchangeRateDenominator(contractEvent.getExchangeRateDenominator());
        buyPoolExchangeRateUpdated.setPriceDeltaX_Amount(contractEvent.getPriceDeltaX_Amount());
        buyPoolExchangeRateUpdated.setPriceDeltaNumerator(contractEvent.getPriceDeltaNumerator());
        buyPoolExchangeRateUpdated.setPriceDeltaDenominator(contractEvent.getPriceDeltaDenominator());
        buyPoolExchangeRateUpdated.setProvider(contractEvent.getProvider());
        buyPoolExchangeRateUpdated.setX_TokenType(contractEvent.getX_TokenType());
        buyPoolExchangeRateUpdated.setY_TokenType(contractEvent.getY_TokenType());
        buyPoolExchangeRateUpdated.setVersion(contractEvent.getVersion());

        buyPoolExchangeRateUpdated.setSuiTimestamp(eventEnvelope.getTimestampMs());
        buyPoolExchangeRateUpdated.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        buyPoolExchangeRateUpdated.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        buyPoolExchangeRateUpdated.setSuiPackageId(eventEnvelope.getPackageId());
        buyPoolExchangeRateUpdated.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        buyPoolExchangeRateUpdated.setSuiSender(eventEnvelope.getSender());

        return buyPoolExchangeRateUpdated;
    }

    public static AbstractBuyPoolEvent.BuyPoolXTokenRemoved toBuyPoolXTokenRemoved(SuiMoveEventEnvelope<BuyPoolXTokenRemoved> eventEnvelope) {
        BuyPoolXTokenRemoved contractEvent = eventEnvelope.getParsedJson();

        AbstractBuyPoolEvent.BuyPoolXTokenRemoved buyPoolXTokenRemoved = new AbstractBuyPoolEvent.BuyPoolXTokenRemoved();
        buyPoolXTokenRemoved.setId(contractEvent.getId());
        buyPoolXTokenRemoved.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        buyPoolXTokenRemoved.setX_Id(contractEvent.getX_Id());
        buyPoolXTokenRemoved.setProvider(contractEvent.getProvider());
        buyPoolXTokenRemoved.setX_TokenType(contractEvent.getX_TokenType());
        buyPoolXTokenRemoved.setY_TokenType(contractEvent.getY_TokenType());
        buyPoolXTokenRemoved.setX_Amount(contractEvent.getX_Amount());
        buyPoolXTokenRemoved.setVersion(contractEvent.getVersion());

        buyPoolXTokenRemoved.setSuiTimestamp(eventEnvelope.getTimestampMs());
        buyPoolXTokenRemoved.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        buyPoolXTokenRemoved.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        buyPoolXTokenRemoved.setSuiPackageId(eventEnvelope.getPackageId());
        buyPoolXTokenRemoved.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        buyPoolXTokenRemoved.setSuiSender(eventEnvelope.getSender());

        return buyPoolXTokenRemoved;
    }

    public static AbstractBuyPoolEvent.BuyPoolYReserveWithdrawn toBuyPoolYReserveWithdrawn(SuiMoveEventEnvelope<BuyPoolYReserveWithdrawn> eventEnvelope) {
        BuyPoolYReserveWithdrawn contractEvent = eventEnvelope.getParsedJson();

        AbstractBuyPoolEvent.BuyPoolYReserveWithdrawn buyPoolYReserveWithdrawn = new AbstractBuyPoolEvent.BuyPoolYReserveWithdrawn();
        buyPoolYReserveWithdrawn.setId(contractEvent.getId());
        buyPoolYReserveWithdrawn.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        buyPoolYReserveWithdrawn.setY_Amount(contractEvent.getY_Amount());
        buyPoolYReserveWithdrawn.setX_TokenType(contractEvent.getX_TokenType());
        buyPoolYReserveWithdrawn.setY_TokenType(contractEvent.getY_TokenType());
        buyPoolYReserveWithdrawn.setVersion(contractEvent.getVersion());

        buyPoolYReserveWithdrawn.setSuiTimestamp(eventEnvelope.getTimestampMs());
        buyPoolYReserveWithdrawn.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        buyPoolYReserveWithdrawn.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        buyPoolYReserveWithdrawn.setSuiPackageId(eventEnvelope.getPackageId());
        buyPoolYReserveWithdrawn.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        buyPoolYReserveWithdrawn.setSuiSender(eventEnvelope.getSender());

        return buyPoolYReserveWithdrawn;
    }

    public static AbstractBuyPoolEvent.BuyPoolDestroyed toBuyPoolDestroyed(SuiMoveEventEnvelope<BuyPoolDestroyed> eventEnvelope) {
        BuyPoolDestroyed contractEvent = eventEnvelope.getParsedJson();

        AbstractBuyPoolEvent.BuyPoolDestroyed buyPoolDestroyed = new AbstractBuyPoolEvent.BuyPoolDestroyed();
        buyPoolDestroyed.setId(contractEvent.getId());
        buyPoolDestroyed.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        buyPoolDestroyed.setVersion(contractEvent.getVersion());

        buyPoolDestroyed.setSuiTimestamp(eventEnvelope.getTimestampMs());
        buyPoolDestroyed.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        buyPoolDestroyed.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        buyPoolDestroyed.setSuiPackageId(eventEnvelope.getPackageId());
        buyPoolDestroyed.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        buyPoolDestroyed.setSuiSender(eventEnvelope.getSender());

        return buyPoolDestroyed;
    }

    public static AbstractBuyPoolEvent.BuyPoolXSwappedForY toBuyPoolXSwappedForY(SuiMoveEventEnvelope<BuyPoolXSwappedForY> eventEnvelope) {
        BuyPoolXSwappedForY contractEvent = eventEnvelope.getParsedJson();

        AbstractBuyPoolEvent.BuyPoolXSwappedForY buyPoolXSwappedForY = new AbstractBuyPoolEvent.BuyPoolXSwappedForY();
        buyPoolXSwappedForY.setId(contractEvent.getId());
        buyPoolXSwappedForY.setX_Amount(contractEvent.getX_Amount());
        buyPoolXSwappedForY.setExpectedY_AmountOut(contractEvent.getExpectedY_AmountOut());
        buyPoolXSwappedForY.setSender(contractEvent.getSender());
        buyPoolXSwappedForY.setX_TokenType(contractEvent.getX_TokenType());
        buyPoolXSwappedForY.setY_TokenType(contractEvent.getY_TokenType());
        buyPoolXSwappedForY.setY_Amount(contractEvent.getY_Amount());
        buyPoolXSwappedForY.setX_Id(contractEvent.getX_Id());
        buyPoolXSwappedForY.setVersion(contractEvent.getVersion());

        buyPoolXSwappedForY.setSuiTimestamp(eventEnvelope.getTimestampMs());
        buyPoolXSwappedForY.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        buyPoolXSwappedForY.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        buyPoolXSwappedForY.setSuiPackageId(eventEnvelope.getPackageId());
        buyPoolXSwappedForY.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        buyPoolXSwappedForY.setSuiSender(eventEnvelope.getSender());

        return buyPoolXSwappedForY;
    }

    public static AbstractLiquidityTokenEvent.LiquidityTokenMinted toLiquidityTokenMinted(SuiMoveEventEnvelope<LiquidityTokenMinted> eventEnvelope) {
        LiquidityTokenMinted contractEvent = eventEnvelope.getParsedJson();

        AbstractLiquidityTokenEvent.LiquidityTokenMinted liquidityTokenMinted = new AbstractLiquidityTokenEvent.LiquidityTokenMinted();
        liquidityTokenMinted.setId(contractEvent.getId());
        liquidityTokenMinted.setVersion(BigInteger.valueOf(eventEnvelope.getTimestampMs()));

        liquidityTokenMinted.setSuiTimestamp(eventEnvelope.getTimestampMs());
        liquidityTokenMinted.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        liquidityTokenMinted.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        liquidityTokenMinted.setSuiPackageId(eventEnvelope.getPackageId());
        liquidityTokenMinted.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        liquidityTokenMinted.setSuiSender(eventEnvelope.getSender());

        return liquidityTokenMinted;
    }

    public static AbstractLiquidityTokenEvent.LiquidityTokenDestroyed toLiquidityTokenDestroyed(SuiMoveEventEnvelope<LiquidityTokenDestroyed> eventEnvelope) {
        LiquidityTokenDestroyed contractEvent = eventEnvelope.getParsedJson();

        AbstractLiquidityTokenEvent.LiquidityTokenDestroyed liquidityTokenDestroyed = new AbstractLiquidityTokenEvent.LiquidityTokenDestroyed();
        liquidityTokenDestroyed.setId(contractEvent.getId());
        liquidityTokenDestroyed.setVersion(BigInteger.valueOf(eventEnvelope.getTimestampMs()));

        liquidityTokenDestroyed.setSuiTimestamp(eventEnvelope.getTimestampMs());
        liquidityTokenDestroyed.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        liquidityTokenDestroyed.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        liquidityTokenDestroyed.setSuiPackageId(eventEnvelope.getPackageId());
        liquidityTokenDestroyed.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        liquidityTokenDestroyed.setSuiSender(eventEnvelope.getSender());

        return liquidityTokenDestroyed;
    }

    public static AbstractExchangeEvent.InitExchangeEvent toInitExchangeEvent(SuiMoveEventEnvelope<InitExchangeEvent> eventEnvelope) {
        InitExchangeEvent contractEvent = eventEnvelope.getParsedJson();

        AbstractExchangeEvent.InitExchangeEvent initExchangeEvent = new AbstractExchangeEvent.InitExchangeEvent();
        initExchangeEvent.setId(contractEvent.getId());
        initExchangeEvent.setVersion(BigInteger.valueOf(-1));

        initExchangeEvent.setSuiTimestamp(eventEnvelope.getTimestampMs());
        initExchangeEvent.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        initExchangeEvent.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        initExchangeEvent.setSuiPackageId(eventEnvelope.getPackageId());
        initExchangeEvent.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        initExchangeEvent.setSuiSender(eventEnvelope.getSender());

        return initExchangeEvent;
    }

    public static AbstractExchangeEvent.TokenPairAddedToExchange toTokenPairAddedToExchange(SuiMoveEventEnvelope<TokenPairAddedToExchange> eventEnvelope) {
        TokenPairAddedToExchange contractEvent = eventEnvelope.getParsedJson();

        AbstractExchangeEvent.TokenPairAddedToExchange tokenPairAddedToExchange = new AbstractExchangeEvent.TokenPairAddedToExchange();
        tokenPairAddedToExchange.setId(contractEvent.getId());
        tokenPairAddedToExchange.setTokenPairId(contractEvent.getTokenPairId());
        tokenPairAddedToExchange.setX_TokenType(contractEvent.getX_TokenType());
        tokenPairAddedToExchange.setY_TokenType(contractEvent.getY_TokenType());
        tokenPairAddedToExchange.setVersion(contractEvent.getVersion());

        tokenPairAddedToExchange.setSuiTimestamp(eventEnvelope.getTimestampMs());
        tokenPairAddedToExchange.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        tokenPairAddedToExchange.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        tokenPairAddedToExchange.setSuiPackageId(eventEnvelope.getPackageId());
        tokenPairAddedToExchange.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        tokenPairAddedToExchange.setSuiSender(eventEnvelope.getSender());

        return tokenPairAddedToExchange;
    }

    public static AbstractExchangeEvent.SellPoolAddedToExchange toSellPoolAddedToExchange(SuiMoveEventEnvelope<SellPoolAddedToExchange> eventEnvelope) {
        SellPoolAddedToExchange contractEvent = eventEnvelope.getParsedJson();

        AbstractExchangeEvent.SellPoolAddedToExchange sellPoolAddedToExchange = new AbstractExchangeEvent.SellPoolAddedToExchange();
        sellPoolAddedToExchange.setId(contractEvent.getId());
        sellPoolAddedToExchange.setSellPoolId(contractEvent.getSellPoolId());
        sellPoolAddedToExchange.setX_TokenType(contractEvent.getX_TokenType());
        sellPoolAddedToExchange.setY_TokenType(contractEvent.getY_TokenType());
        sellPoolAddedToExchange.setVersion(contractEvent.getVersion());

        sellPoolAddedToExchange.setSuiTimestamp(eventEnvelope.getTimestampMs());
        sellPoolAddedToExchange.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        sellPoolAddedToExchange.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        sellPoolAddedToExchange.setSuiPackageId(eventEnvelope.getPackageId());
        sellPoolAddedToExchange.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        sellPoolAddedToExchange.setSuiSender(eventEnvelope.getSender());

        return sellPoolAddedToExchange;
    }

    public static AbstractExchangeEvent.BuyPoolAddedToExchange toBuyPoolAddedToExchange(SuiMoveEventEnvelope<BuyPoolAddedToExchange> eventEnvelope) {
        BuyPoolAddedToExchange contractEvent = eventEnvelope.getParsedJson();

        AbstractExchangeEvent.BuyPoolAddedToExchange buyPoolAddedToExchange = new AbstractExchangeEvent.BuyPoolAddedToExchange();
        buyPoolAddedToExchange.setId(contractEvent.getId());
        buyPoolAddedToExchange.setBuyPoolId(contractEvent.getBuyPoolId());
        buyPoolAddedToExchange.setX_TokenType(contractEvent.getX_TokenType());
        buyPoolAddedToExchange.setY_TokenType(contractEvent.getY_TokenType());
        buyPoolAddedToExchange.setVersion(contractEvent.getVersion());

        buyPoolAddedToExchange.setSuiTimestamp(eventEnvelope.getTimestampMs());
        buyPoolAddedToExchange.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        buyPoolAddedToExchange.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        buyPoolAddedToExchange.setSuiPackageId(eventEnvelope.getPackageId());
        buyPoolAddedToExchange.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        buyPoolAddedToExchange.setSuiSender(eventEnvelope.getSender());

        return buyPoolAddedToExchange;
    }

    public static AbstractExchangeEvent.ExchangeUpdated toExchangeUpdated(SuiMoveEventEnvelope<ExchangeUpdated> eventEnvelope) {
        ExchangeUpdated contractEvent = eventEnvelope.getParsedJson();

        AbstractExchangeEvent.ExchangeUpdated exchangeUpdated = new AbstractExchangeEvent.ExchangeUpdated();
        exchangeUpdated.setId(contractEvent.getId());
        exchangeUpdated.setName(contractEvent.getName());
        exchangeUpdated.setVersion(contractEvent.getVersion());

        exchangeUpdated.setSuiTimestamp(eventEnvelope.getTimestampMs());
        exchangeUpdated.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        exchangeUpdated.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        exchangeUpdated.setSuiPackageId(eventEnvelope.getPackageId());
        exchangeUpdated.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        exchangeUpdated.setSuiSender(eventEnvelope.getSender());

        return exchangeUpdated;
    }


    public static List<String> extractTypeArguments(String type) {
        int i = type.indexOf("<");
        int j = type.lastIndexOf(">");
        if (i > 0 && j > i && j == type.length() - 1) {
            String typeArguments = type.substring(i + 1, j);
            String[] typeArgumentArray = typeArguments.split(",");
            return Arrays.stream(typeArgumentArray).map(String::trim).collect(java.util.stream.Collectors.toList());
        } else {
            return Collections.emptyList();
        }
    }
}
