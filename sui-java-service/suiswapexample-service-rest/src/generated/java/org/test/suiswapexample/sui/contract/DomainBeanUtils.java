// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.sui.contract;

import java.math.*;
import java.util.*;

import com.github.wubuku.sui.bean.MoveEvent;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import org.test.suiswapexample.domain.tokenpair.AbstractTokenPairEvent;
import org.test.suiswapexample.sui.contract.tokenpair.LiquidityInitialized;
import org.test.suiswapexample.sui.contract.tokenpair.LiquidityAdded;
import org.test.suiswapexample.sui.contract.tokenpair.LiquidityRemoved;
import org.test.suiswapexample.sui.contract.tokenpair.XSwappedForY;
import org.test.suiswapexample.sui.contract.tokenpair.YSwappedForX;
import org.test.suiswapexample.domain.liquiditytoken.AbstractLiquidityTokenEvent;
import org.test.suiswapexample.sui.contract.liquiditytoken.LiquidityTokenMinted;
import org.test.suiswapexample.sui.contract.liquiditytoken.LiquidityTokenDestroyed;
import org.test.suiswapexample.sui.contract.liquiditytoken.LiquidityTokenSplit;
import org.test.suiswapexample.domain.exchange.AbstractExchangeEvent;
import org.test.suiswapexample.sui.contract.exchange.InitExchangeEvent;
import org.test.suiswapexample.sui.contract.exchange.TokenPairAddedToExchange;
import org.test.suiswapexample.sui.contract.exchange.ExchangeUpdated;

/**
 * Utils that convert beans in the contract package to domain beans.
 */
public class DomainBeanUtils {
    private DomainBeanUtils() {
    }

    public static org.test.suiswapexample.domain.Movescription toMovescription(Movescription contractMovescription) {
        if (contractMovescription == null) {
            return null;
        }
        org.test.suiswapexample.domain.Movescription movescription = new org.test.suiswapexample.domain.Movescription();
        movescription.setId(contractMovescription.getFields().getId().getId());
        movescription.setAmount(contractMovescription.getFields().getAmount());
        movescription.setTick(contractMovescription.getFields().getTick());
        movescription.setAttachCoin(contractMovescription.getFields().getAttachCoin());
        movescription.setAcc(contractMovescription.getFields().getAcc());
        if (contractMovescription.getFields().getMetadata() != null) {
            movescription.setMetadata(toMovescriptionMetadata(contractMovescription.getFields().getMetadata()));
        }
        return movescription;
    }

    public static org.test.suiswapexample.domain.MovescriptionMetadata toMovescriptionMetadata(MovescriptionMetadata contractMovescriptionMetadata) {
        if (contractMovescriptionMetadata == null) {
            return null;
        }
        org.test.suiswapexample.domain.MovescriptionMetadata movescriptionMetadata = new org.test.suiswapexample.domain.MovescriptionMetadata();
        movescriptionMetadata.setContentType(contractMovescriptionMetadata.getFields().getContentType());
        movescriptionMetadata.setContent(contractMovescriptionMetadata.getFields().getContent());
        return movescriptionMetadata;
    }

    public static org.test.suiswapexample.domain.MovescriptionMetadata toMovescriptionMetadata(MovescriptionMetadataForEvent contractMovescriptionMetadata) {
        if (contractMovescriptionMetadata == null) {
            return null;
        }
        org.test.suiswapexample.domain.MovescriptionMetadata movescriptionMetadata = new org.test.suiswapexample.domain.MovescriptionMetadata();
        movescriptionMetadata.setContentType(contractMovescriptionMetadata.getContentType());
        movescriptionMetadata.setContent(contractMovescriptionMetadata.getContent());
        return movescriptionMetadata;
    }


    public static AbstractTokenPairEvent.LiquidityInitialized toLiquidityInitialized(SuiMoveEventEnvelope<LiquidityInitialized> eventEnvelope) {
        LiquidityInitialized contractEvent = eventEnvelope.getParsedJson();

        AbstractTokenPairEvent.LiquidityInitialized liquidityInitialized = new AbstractTokenPairEvent.LiquidityInitialized();
        liquidityInitialized.setId(contractEvent.getId());
        liquidityInitialized.setExchangeId(contractEvent.getExchangeId());
        liquidityInitialized.setProvider(contractEvent.getProvider());
        liquidityInitialized.setX_TokenType(contractEvent.getX_TokenType());
        liquidityInitialized.setY_TokenType(contractEvent.getY_TokenType());
        liquidityInitialized.setX_Amount(contractEvent.getX_Amount());
        liquidityInitialized.setY_Amount(contractEvent.getY_Amount());
        liquidityInitialized.setLiquidityAmount(contractEvent.getLiquidityAmount());
        liquidityInitialized.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        liquidityInitialized.setVersion(BigInteger.valueOf(-1));

        liquidityInitialized.setSuiTimestamp(eventEnvelope.getTimestampMs());
        liquidityInitialized.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        liquidityInitialized.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        liquidityInitialized.setSuiPackageId(eventEnvelope.getPackageId());
        liquidityInitialized.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        liquidityInitialized.setSuiSender(eventEnvelope.getSender());

        return liquidityInitialized;
    }

    public static AbstractTokenPairEvent.LiquidityAdded toLiquidityAdded(SuiMoveEventEnvelope<LiquidityAdded> eventEnvelope) {
        LiquidityAdded contractEvent = eventEnvelope.getParsedJson();

        AbstractTokenPairEvent.LiquidityAdded liquidityAdded = new AbstractTokenPairEvent.LiquidityAdded();
        liquidityAdded.setId(contractEvent.getId());
        liquidityAdded.setExpectedLiquidity(contractEvent.getExpectedLiquidity());
        liquidityAdded.setProvider(contractEvent.getProvider());
        liquidityAdded.setX_TokenType(contractEvent.getX_TokenType());
        liquidityAdded.setY_TokenType(contractEvent.getY_TokenType());
        liquidityAdded.setX_Amount(contractEvent.getX_Amount());
        liquidityAdded.setY_Amount(contractEvent.getY_Amount());
        liquidityAdded.setLiquidityAmount(contractEvent.getLiquidityAmount());
        liquidityAdded.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        liquidityAdded.setVersion(contractEvent.getVersion());

        liquidityAdded.setSuiTimestamp(eventEnvelope.getTimestampMs());
        liquidityAdded.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        liquidityAdded.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        liquidityAdded.setSuiPackageId(eventEnvelope.getPackageId());
        liquidityAdded.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        liquidityAdded.setSuiSender(eventEnvelope.getSender());

        return liquidityAdded;
    }

    public static AbstractTokenPairEvent.LiquidityRemoved toLiquidityRemoved(SuiMoveEventEnvelope<LiquidityRemoved> eventEnvelope) {
        LiquidityRemoved contractEvent = eventEnvelope.getParsedJson();

        AbstractTokenPairEvent.LiquidityRemoved liquidityRemoved = new AbstractTokenPairEvent.LiquidityRemoved();
        liquidityRemoved.setId(contractEvent.getId());
        liquidityRemoved.setLiquidityToken(contractEvent.getLiquidityToken());
        liquidityRemoved.setLiquidityAmount(contractEvent.getLiquidityAmount());
        liquidityRemoved.setLiquidityTokenId(contractEvent.getLiquidityTokenId());
        liquidityRemoved.setProvider(contractEvent.getProvider());
        liquidityRemoved.setX_TokenType(contractEvent.getX_TokenType());
        liquidityRemoved.setY_TokenType(contractEvent.getY_TokenType());
        liquidityRemoved.setX_Amount(contractEvent.getX_Amount());
        liquidityRemoved.setY_Amount(contractEvent.getY_Amount());
        liquidityRemoved.setVersion(contractEvent.getVersion());

        liquidityRemoved.setSuiTimestamp(eventEnvelope.getTimestampMs());
        liquidityRemoved.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        liquidityRemoved.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        liquidityRemoved.setSuiPackageId(eventEnvelope.getPackageId());
        liquidityRemoved.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        liquidityRemoved.setSuiSender(eventEnvelope.getSender());

        return liquidityRemoved;
    }

    public static AbstractTokenPairEvent.XSwappedForY toXSwappedForY(SuiMoveEventEnvelope<XSwappedForY> eventEnvelope) {
        XSwappedForY contractEvent = eventEnvelope.getParsedJson();

        AbstractTokenPairEvent.XSwappedForY xSwappedForY = new AbstractTokenPairEvent.XSwappedForY();
        xSwappedForY.setId(contractEvent.getId());
        xSwappedForY.setExpectedY_AmountOut(contractEvent.getExpectedY_AmountOut());
        xSwappedForY.setSender(contractEvent.getSender());
        xSwappedForY.setX_TokenType(contractEvent.getX_TokenType());
        xSwappedForY.setY_TokenType(contractEvent.getY_TokenType());
        xSwappedForY.setX_Amount(contractEvent.getX_Amount());
        xSwappedForY.setY_Amount(contractEvent.getY_Amount());
        xSwappedForY.setVersion(contractEvent.getVersion());

        xSwappedForY.setSuiTimestamp(eventEnvelope.getTimestampMs());
        xSwappedForY.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        xSwappedForY.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        xSwappedForY.setSuiPackageId(eventEnvelope.getPackageId());
        xSwappedForY.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        xSwappedForY.setSuiSender(eventEnvelope.getSender());

        return xSwappedForY;
    }

    public static AbstractTokenPairEvent.YSwappedForX toYSwappedForX(SuiMoveEventEnvelope<YSwappedForX> eventEnvelope) {
        YSwappedForX contractEvent = eventEnvelope.getParsedJson();

        AbstractTokenPairEvent.YSwappedForX ySwappedForX = new AbstractTokenPairEvent.YSwappedForX();
        ySwappedForX.setId(contractEvent.getId());
        ySwappedForX.setExpectedX_AmountOut(contractEvent.getExpectedX_AmountOut());
        ySwappedForX.setSender(contractEvent.getSender());
        ySwappedForX.setX_TokenType(contractEvent.getX_TokenType());
        ySwappedForX.setY_TokenType(contractEvent.getY_TokenType());
        ySwappedForX.setX_Amount(contractEvent.getX_Amount());
        ySwappedForX.setY_Amount(contractEvent.getY_Amount());
        ySwappedForX.setVersion(contractEvent.getVersion());

        ySwappedForX.setSuiTimestamp(eventEnvelope.getTimestampMs());
        ySwappedForX.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        ySwappedForX.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        ySwappedForX.setSuiPackageId(eventEnvelope.getPackageId());
        ySwappedForX.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        ySwappedForX.setSuiSender(eventEnvelope.getSender());

        return ySwappedForX;
    }

    public static AbstractLiquidityTokenEvent.LiquidityTokenMinted toLiquidityTokenMinted(SuiMoveEventEnvelope<LiquidityTokenMinted> eventEnvelope) {
        LiquidityTokenMinted contractEvent = eventEnvelope.getParsedJson();

        AbstractLiquidityTokenEvent.LiquidityTokenMinted liquidityTokenMinted = new AbstractLiquidityTokenEvent.LiquidityTokenMinted();
        liquidityTokenMinted.setId(contractEvent.getId());
        liquidityTokenMinted.setX_TokenType(contractEvent.getX_TokenType());
        liquidityTokenMinted.setAmount(contractEvent.getAmount());
        liquidityTokenMinted.setVersion(BigInteger.valueOf(eventEnvelope.getTimestampMs()));

        liquidityTokenMinted.setSuiTimestamp(eventEnvelope.getTimestampMs());
        liquidityTokenMinted.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        liquidityTokenMinted.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        liquidityTokenMinted.setSuiPackageId(eventEnvelope.getPackageId());
        liquidityTokenMinted.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        liquidityTokenMinted.setSuiSender(eventEnvelope.getSender());

        return liquidityTokenMinted;
    }

    public static AbstractLiquidityTokenEvent.LiquidityTokenDestroyed toLiquidityTokenDestroyed(SuiMoveEventEnvelope<LiquidityTokenDestroyed> eventEnvelope) {
        LiquidityTokenDestroyed contractEvent = eventEnvelope.getParsedJson();

        AbstractLiquidityTokenEvent.LiquidityTokenDestroyed liquidityTokenDestroyed = new AbstractLiquidityTokenEvent.LiquidityTokenDestroyed();
        liquidityTokenDestroyed.setId(contractEvent.getId());
        liquidityTokenDestroyed.setAmount(contractEvent.getAmount());
        liquidityTokenDestroyed.setVersion(BigInteger.valueOf(eventEnvelope.getTimestampMs()));

        liquidityTokenDestroyed.setSuiTimestamp(eventEnvelope.getTimestampMs());
        liquidityTokenDestroyed.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        liquidityTokenDestroyed.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        liquidityTokenDestroyed.setSuiPackageId(eventEnvelope.getPackageId());
        liquidityTokenDestroyed.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        liquidityTokenDestroyed.setSuiSender(eventEnvelope.getSender());

        return liquidityTokenDestroyed;
    }

    public static AbstractLiquidityTokenEvent.LiquidityTokenSplit toLiquidityTokenSplit(SuiMoveEventEnvelope<LiquidityTokenSplit> eventEnvelope) {
        LiquidityTokenSplit contractEvent = eventEnvelope.getParsedJson();

        AbstractLiquidityTokenEvent.LiquidityTokenSplit liquidityTokenSplit = new AbstractLiquidityTokenEvent.LiquidityTokenSplit();
        liquidityTokenSplit.setId(contractEvent.getId());
        liquidityTokenSplit.setAmount(contractEvent.getAmount());
        liquidityTokenSplit.setVersion(BigInteger.valueOf(eventEnvelope.getTimestampMs()));

        liquidityTokenSplit.setSuiTimestamp(eventEnvelope.getTimestampMs());
        liquidityTokenSplit.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        liquidityTokenSplit.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        liquidityTokenSplit.setSuiPackageId(eventEnvelope.getPackageId());
        liquidityTokenSplit.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        liquidityTokenSplit.setSuiSender(eventEnvelope.getSender());

        return liquidityTokenSplit;
    }

    public static AbstractExchangeEvent.InitExchangeEvent toInitExchangeEvent(SuiMoveEventEnvelope<InitExchangeEvent> eventEnvelope) {
        InitExchangeEvent contractEvent = eventEnvelope.getParsedJson();

        AbstractExchangeEvent.InitExchangeEvent initExchangeEvent = new AbstractExchangeEvent.InitExchangeEvent();
        initExchangeEvent.setId(contractEvent.getId());
        initExchangeEvent.setVersion(BigInteger.valueOf(-1));

        initExchangeEvent.setSuiTimestamp(eventEnvelope.getTimestampMs());
        initExchangeEvent.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        initExchangeEvent.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        initExchangeEvent.setSuiPackageId(eventEnvelope.getPackageId());
        initExchangeEvent.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        initExchangeEvent.setSuiSender(eventEnvelope.getSender());

        return initExchangeEvent;
    }

    public static AbstractExchangeEvent.TokenPairAddedToExchange toTokenPairAddedToExchange(SuiMoveEventEnvelope<TokenPairAddedToExchange> eventEnvelope) {
        TokenPairAddedToExchange contractEvent = eventEnvelope.getParsedJson();

        AbstractExchangeEvent.TokenPairAddedToExchange tokenPairAddedToExchange = new AbstractExchangeEvent.TokenPairAddedToExchange();
        tokenPairAddedToExchange.setId(contractEvent.getId());
        tokenPairAddedToExchange.setTokenPairId(contractEvent.getTokenPairId());
        tokenPairAddedToExchange.setX_TokenType(contractEvent.getX_TokenType());
        tokenPairAddedToExchange.setY_TokenType(contractEvent.getY_TokenType());
        tokenPairAddedToExchange.setVersion(contractEvent.getVersion());

        tokenPairAddedToExchange.setSuiTimestamp(eventEnvelope.getTimestampMs());
        tokenPairAddedToExchange.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        tokenPairAddedToExchange.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        tokenPairAddedToExchange.setSuiPackageId(eventEnvelope.getPackageId());
        tokenPairAddedToExchange.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        tokenPairAddedToExchange.setSuiSender(eventEnvelope.getSender());

        return tokenPairAddedToExchange;
    }

    public static AbstractExchangeEvent.ExchangeUpdated toExchangeUpdated(SuiMoveEventEnvelope<ExchangeUpdated> eventEnvelope) {
        ExchangeUpdated contractEvent = eventEnvelope.getParsedJson();

        AbstractExchangeEvent.ExchangeUpdated exchangeUpdated = new AbstractExchangeEvent.ExchangeUpdated();
        exchangeUpdated.setId(contractEvent.getId());
        exchangeUpdated.setName(contractEvent.getName());
        exchangeUpdated.setVersion(contractEvent.getVersion());

        exchangeUpdated.setSuiTimestamp(eventEnvelope.getTimestampMs());
        exchangeUpdated.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        exchangeUpdated.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        exchangeUpdated.setSuiPackageId(eventEnvelope.getPackageId());
        exchangeUpdated.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        exchangeUpdated.setSuiSender(eventEnvelope.getSender());

        return exchangeUpdated;
    }


    public static List<String> extractTypeArguments(String type) {
        int i = type.indexOf("<");
        int j = type.lastIndexOf(">");
        if (i > 0 && j > i && j == type.length() - 1) {
            String typeArguments = type.substring(i + 1, j);
            String[] typeArgumentArray = typeArguments.split(",");
            return Arrays.stream(typeArgumentArray).map(String::trim).collect(java.util.stream.Collectors.toList());
        } else {
            return Collections.emptyList();
        }
    }
}
