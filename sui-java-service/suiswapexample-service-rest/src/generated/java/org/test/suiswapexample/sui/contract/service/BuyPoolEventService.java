// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.sui.contract.service;

import com.github.wubuku.sui.bean.EventId;
import com.github.wubuku.sui.bean.Page;
import com.github.wubuku.sui.bean.PaginatedMoveEvents;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.utils.SuiJsonRpcClient;
import org.test.suiswapexample.domain.buypool.AbstractBuyPoolEvent;
import org.test.suiswapexample.sui.contract.ContractConstants;
import org.test.suiswapexample.sui.contract.DomainBeanUtils;
import org.test.suiswapexample.sui.contract.SuiPackage;
import org.test.suiswapexample.sui.contract.buypool.BuyPoolInitialized;
import org.test.suiswapexample.sui.contract.buypool.BuyPoolExchangeRateUpdated;
import org.test.suiswapexample.sui.contract.buypool.BuyPoolXTokenRemoved;
import org.test.suiswapexample.sui.contract.buypool.BuyPoolYReserveWithdrawn;
import org.test.suiswapexample.sui.contract.buypool.BuyPoolDestroyed;
import org.test.suiswapexample.sui.contract.buypool.BuyPoolXSwappedForY;
import org.test.suiswapexample.sui.contract.repository.BuyPoolEventRepository;
import org.test.suiswapexample.sui.contract.repository.SuiPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class BuyPoolEventService {

    public static final java.util.Set<String> DELETION_COMMAND_EVENTS = new java.util.HashSet<>(java.util.Arrays.asList("BuyPoolDestroyed"));

    public static boolean isDeletionCommand(String eventType) {
        return DELETION_COMMAND_EVENTS.contains(eventType);
    }

    public static boolean isDeletionCommand(AbstractBuyPoolEvent e) {
        if (isDeletionCommand(e.getEventType())) {
            return true;
        }
        return false;
    }

    @Autowired
    private SuiPackageRepository suiPackageRepository;

    @Autowired
    private SuiJsonRpcClient suiJsonRpcClient;

    @Autowired
    private BuyPoolEventRepository buyPoolEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractBuyPoolEvent event) {
        event.setStatus("D");
        buyPoolEventRepository.save(event);
    }

    @Transactional
    public void pullBuyPoolInitializedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getBuyPoolInitializedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<BuyPoolInitialized> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.BUY_POOL_MODULE_BUY_POOL_INITIALIZED,
                    cursor, limit, false, BuyPoolInitialized.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<BuyPoolInitialized> eventEnvelope : eventPage.getData()) {
                    saveBuyPoolInitialized(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getBuyPoolInitializedEventNextCursor() {
        AbstractBuyPoolEvent lastEvent = buyPoolEventRepository.findFirstBuyPoolInitializedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveBuyPoolInitialized(SuiMoveEventEnvelope<BuyPoolInitialized> eventEnvelope) {
        AbstractBuyPoolEvent.BuyPoolInitialized buyPoolInitialized = DomainBeanUtils.toBuyPoolInitialized(eventEnvelope);
        if (buyPoolEventRepository.findById(buyPoolInitialized.getBuyPoolEventId()).isPresent()) {
            return;
        }
        buyPoolEventRepository.save(buyPoolInitialized);
    }

    @Transactional
    public void pullBuyPoolExchangeRateUpdatedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getBuyPoolExchangeRateUpdatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<BuyPoolExchangeRateUpdated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.BUY_POOL_MODULE_BUY_POOL_EXCHANGE_RATE_UPDATED,
                    cursor, limit, false, BuyPoolExchangeRateUpdated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<BuyPoolExchangeRateUpdated> eventEnvelope : eventPage.getData()) {
                    saveBuyPoolExchangeRateUpdated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getBuyPoolExchangeRateUpdatedEventNextCursor() {
        AbstractBuyPoolEvent lastEvent = buyPoolEventRepository.findFirstBuyPoolExchangeRateUpdatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveBuyPoolExchangeRateUpdated(SuiMoveEventEnvelope<BuyPoolExchangeRateUpdated> eventEnvelope) {
        AbstractBuyPoolEvent.BuyPoolExchangeRateUpdated buyPoolExchangeRateUpdated = DomainBeanUtils.toBuyPoolExchangeRateUpdated(eventEnvelope);
        if (buyPoolEventRepository.findById(buyPoolExchangeRateUpdated.getBuyPoolEventId()).isPresent()) {
            return;
        }
        buyPoolEventRepository.save(buyPoolExchangeRateUpdated);
    }

    @Transactional
    public void pullBuyPoolXTokenRemovedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getBuyPoolXTokenRemovedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<BuyPoolXTokenRemoved> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.BUY_POOL_MODULE_BUY_POOL_X_TOKEN_REMOVED,
                    cursor, limit, false, BuyPoolXTokenRemoved.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<BuyPoolXTokenRemoved> eventEnvelope : eventPage.getData()) {
                    saveBuyPoolXTokenRemoved(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getBuyPoolXTokenRemovedEventNextCursor() {
        AbstractBuyPoolEvent lastEvent = buyPoolEventRepository.findFirstBuyPoolXTokenRemovedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveBuyPoolXTokenRemoved(SuiMoveEventEnvelope<BuyPoolXTokenRemoved> eventEnvelope) {
        AbstractBuyPoolEvent.BuyPoolXTokenRemoved buyPoolXTokenRemoved = DomainBeanUtils.toBuyPoolXTokenRemoved(eventEnvelope);
        if (buyPoolEventRepository.findById(buyPoolXTokenRemoved.getBuyPoolEventId()).isPresent()) {
            return;
        }
        buyPoolEventRepository.save(buyPoolXTokenRemoved);
    }

    @Transactional
    public void pullBuyPoolYReserveWithdrawnEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getBuyPoolYReserveWithdrawnEventNextCursor();
        while (true) {
            PaginatedMoveEvents<BuyPoolYReserveWithdrawn> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.BUY_POOL_MODULE_BUY_POOL_Y_RESERVE_WITHDRAWN,
                    cursor, limit, false, BuyPoolYReserveWithdrawn.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<BuyPoolYReserveWithdrawn> eventEnvelope : eventPage.getData()) {
                    saveBuyPoolYReserveWithdrawn(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getBuyPoolYReserveWithdrawnEventNextCursor() {
        AbstractBuyPoolEvent lastEvent = buyPoolEventRepository.findFirstBuyPoolYReserveWithdrawnByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveBuyPoolYReserveWithdrawn(SuiMoveEventEnvelope<BuyPoolYReserveWithdrawn> eventEnvelope) {
        AbstractBuyPoolEvent.BuyPoolYReserveWithdrawn buyPoolYReserveWithdrawn = DomainBeanUtils.toBuyPoolYReserveWithdrawn(eventEnvelope);
        if (buyPoolEventRepository.findById(buyPoolYReserveWithdrawn.getBuyPoolEventId()).isPresent()) {
            return;
        }
        buyPoolEventRepository.save(buyPoolYReserveWithdrawn);
    }

    @Transactional
    public void pullBuyPoolDestroyedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getBuyPoolDestroyedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<BuyPoolDestroyed> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.BUY_POOL_MODULE_BUY_POOL_DESTROYED,
                    cursor, limit, false, BuyPoolDestroyed.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<BuyPoolDestroyed> eventEnvelope : eventPage.getData()) {
                    saveBuyPoolDestroyed(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getBuyPoolDestroyedEventNextCursor() {
        AbstractBuyPoolEvent lastEvent = buyPoolEventRepository.findFirstBuyPoolDestroyedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveBuyPoolDestroyed(SuiMoveEventEnvelope<BuyPoolDestroyed> eventEnvelope) {
        AbstractBuyPoolEvent.BuyPoolDestroyed buyPoolDestroyed = DomainBeanUtils.toBuyPoolDestroyed(eventEnvelope);
        if (buyPoolEventRepository.findById(buyPoolDestroyed.getBuyPoolEventId()).isPresent()) {
            return;
        }
        buyPoolEventRepository.save(buyPoolDestroyed);
    }

    @Transactional
    public void pullBuyPoolXSwappedForYEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getBuyPoolXSwappedForYEventNextCursor();
        while (true) {
            PaginatedMoveEvents<BuyPoolXSwappedForY> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.BUY_POOL_MODULE_BUY_POOL_X_SWAPPED_FOR_Y,
                    cursor, limit, false, BuyPoolXSwappedForY.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<BuyPoolXSwappedForY> eventEnvelope : eventPage.getData()) {
                    saveBuyPoolXSwappedForY(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getBuyPoolXSwappedForYEventNextCursor() {
        AbstractBuyPoolEvent lastEvent = buyPoolEventRepository.findFirstBuyPoolXSwappedForYByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveBuyPoolXSwappedForY(SuiMoveEventEnvelope<BuyPoolXSwappedForY> eventEnvelope) {
        AbstractBuyPoolEvent.BuyPoolXSwappedForY buyPoolXSwappedForY = DomainBeanUtils.toBuyPoolXSwappedForY(eventEnvelope);
        if (buyPoolEventRepository.findById(buyPoolXSwappedForY.getBuyPoolEventId()).isPresent()) {
            return;
        }
        buyPoolEventRepository.save(buyPoolXSwappedForY);
    }


    private String getDefaultSuiPackageId() {
        return suiPackageRepository.findById(ContractConstants.DEFAULT_SUI_PACKAGE_NAME)
                .map(SuiPackage::getObjectId).orElse(null);
    }
}
