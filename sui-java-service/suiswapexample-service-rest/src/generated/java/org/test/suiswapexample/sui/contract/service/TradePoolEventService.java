// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.sui.contract.service;

import com.github.wubuku.sui.bean.EventId;
import com.github.wubuku.sui.bean.Page;
import com.github.wubuku.sui.bean.PaginatedMoveEvents;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.utils.SuiJsonRpcClient;
import org.test.suiswapexample.domain.tradepool.AbstractTradePoolEvent;
import org.test.suiswapexample.sui.contract.ContractConstants;
import org.test.suiswapexample.sui.contract.DomainBeanUtils;
import org.test.suiswapexample.sui.contract.SuiPackage;
import org.test.suiswapexample.sui.contract.tradepool.TradePoolInitialized;
import org.test.suiswapexample.sui.contract.tradepool.TradePoolWithEmptyXReserveInitialized;
import org.test.suiswapexample.sui.contract.tradepool.SellPoolInitialized;
import org.test.suiswapexample.sui.contract.tradepool.BuyPoolInitialized;
import org.test.suiswapexample.sui.contract.tradepool.PoolExchangeRateUpdated;
import org.test.suiswapexample.sui.contract.tradepool.PoolXTokenAdded;
import org.test.suiswapexample.sui.contract.tradepool.PoolXTokenRemoved;
import org.test.suiswapexample.sui.contract.tradepool.PoolYReserveDeposited;
import org.test.suiswapexample.sui.contract.tradepool.PoolYReserveWithdrawn;
import org.test.suiswapexample.sui.contract.tradepool.PoolDestroyed;
import org.test.suiswapexample.sui.contract.tradepool.PoolYSwappedForX;
import org.test.suiswapexample.sui.contract.tradepool.PoolXSwappedForY;
import org.test.suiswapexample.sui.contract.repository.TradePoolEventRepository;
import org.test.suiswapexample.sui.contract.repository.SuiPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class TradePoolEventService {

    public static final java.util.Set<String> DELETION_COMMAND_EVENTS = new java.util.HashSet<>(java.util.Arrays.asList("PoolDestroyed"));

    public static boolean isDeletionCommand(String eventType) {
        return DELETION_COMMAND_EVENTS.contains(eventType);
    }

    public static boolean isDeletionCommand(AbstractTradePoolEvent e) {
        if (isDeletionCommand(e.getEventType())) {
            return true;
        }
        return false;
    }

    @Autowired
    private SuiPackageRepository suiPackageRepository;

    @Autowired
    private SuiJsonRpcClient suiJsonRpcClient;

    @Autowired
    private TradePoolEventRepository tradePoolEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractTradePoolEvent event) {
        event.setStatus("D");
        tradePoolEventRepository.save(event);
    }

    @Transactional
    public void pullTradePoolInitializedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getTradePoolInitializedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<TradePoolInitialized> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.TRADE_POOL_MODULE_TRADE_POOL_INITIALIZED,
                    cursor, limit, false, TradePoolInitialized.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<TradePoolInitialized> eventEnvelope : eventPage.getData()) {
                    saveTradePoolInitialized(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getTradePoolInitializedEventNextCursor() {
        AbstractTradePoolEvent lastEvent = tradePoolEventRepository.findFirstTradePoolInitializedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveTradePoolInitialized(SuiMoveEventEnvelope<TradePoolInitialized> eventEnvelope) {
        AbstractTradePoolEvent.TradePoolInitialized tradePoolInitialized = DomainBeanUtils.toTradePoolInitialized(eventEnvelope);
        if (tradePoolEventRepository.findById(tradePoolInitialized.getTradePoolEventId()).isPresent()) {
            return;
        }
        tradePoolEventRepository.save(tradePoolInitialized);
    }

    @Transactional
    public void pullTradePoolWithEmptyXReserveInitializedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getTradePoolWithEmptyXReserveInitializedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<TradePoolWithEmptyXReserveInitialized> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.TRADE_POOL_MODULE_TRADE_POOL_WITH_EMPTY_X_RESERVE_INITIALIZED,
                    cursor, limit, false, TradePoolWithEmptyXReserveInitialized.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<TradePoolWithEmptyXReserveInitialized> eventEnvelope : eventPage.getData()) {
                    saveTradePoolWithEmptyXReserveInitialized(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getTradePoolWithEmptyXReserveInitializedEventNextCursor() {
        AbstractTradePoolEvent lastEvent = tradePoolEventRepository.findFirstTradePoolWithEmptyXReserveInitializedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveTradePoolWithEmptyXReserveInitialized(SuiMoveEventEnvelope<TradePoolWithEmptyXReserveInitialized> eventEnvelope) {
        AbstractTradePoolEvent.TradePoolWithEmptyXReserveInitialized tradePoolWithEmptyXReserveInitialized = DomainBeanUtils.toTradePoolWithEmptyXReserveInitialized(eventEnvelope);
        if (tradePoolEventRepository.findById(tradePoolWithEmptyXReserveInitialized.getTradePoolEventId()).isPresent()) {
            return;
        }
        tradePoolEventRepository.save(tradePoolWithEmptyXReserveInitialized);
    }

    @Transactional
    public void pullSellPoolInitializedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getSellPoolInitializedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<SellPoolInitialized> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.TRADE_POOL_MODULE_SELL_POOL_INITIALIZED,
                    cursor, limit, false, SellPoolInitialized.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<SellPoolInitialized> eventEnvelope : eventPage.getData()) {
                    saveSellPoolInitialized(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getSellPoolInitializedEventNextCursor() {
        AbstractTradePoolEvent lastEvent = tradePoolEventRepository.findFirstSellPoolInitializedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveSellPoolInitialized(SuiMoveEventEnvelope<SellPoolInitialized> eventEnvelope) {
        AbstractTradePoolEvent.SellPoolInitialized sellPoolInitialized = DomainBeanUtils.toSellPoolInitialized(eventEnvelope);
        if (tradePoolEventRepository.findById(sellPoolInitialized.getTradePoolEventId()).isPresent()) {
            return;
        }
        tradePoolEventRepository.save(sellPoolInitialized);
    }

    @Transactional
    public void pullBuyPoolInitializedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getBuyPoolInitializedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<BuyPoolInitialized> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.TRADE_POOL_MODULE_BUY_POOL_INITIALIZED,
                    cursor, limit, false, BuyPoolInitialized.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<BuyPoolInitialized> eventEnvelope : eventPage.getData()) {
                    saveBuyPoolInitialized(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getBuyPoolInitializedEventNextCursor() {
        AbstractTradePoolEvent lastEvent = tradePoolEventRepository.findFirstBuyPoolInitializedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveBuyPoolInitialized(SuiMoveEventEnvelope<BuyPoolInitialized> eventEnvelope) {
        AbstractTradePoolEvent.BuyPoolInitialized buyPoolInitialized = DomainBeanUtils.toBuyPoolInitialized(eventEnvelope);
        if (tradePoolEventRepository.findById(buyPoolInitialized.getTradePoolEventId()).isPresent()) {
            return;
        }
        tradePoolEventRepository.save(buyPoolInitialized);
    }

    @Transactional
    public void pullPoolExchangeRateUpdatedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getPoolExchangeRateUpdatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<PoolExchangeRateUpdated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.TRADE_POOL_MODULE_POOL_EXCHANGE_RATE_UPDATED,
                    cursor, limit, false, PoolExchangeRateUpdated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<PoolExchangeRateUpdated> eventEnvelope : eventPage.getData()) {
                    savePoolExchangeRateUpdated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getPoolExchangeRateUpdatedEventNextCursor() {
        AbstractTradePoolEvent lastEvent = tradePoolEventRepository.findFirstPoolExchangeRateUpdatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void savePoolExchangeRateUpdated(SuiMoveEventEnvelope<PoolExchangeRateUpdated> eventEnvelope) {
        AbstractTradePoolEvent.PoolExchangeRateUpdated poolExchangeRateUpdated = DomainBeanUtils.toPoolExchangeRateUpdated(eventEnvelope);
        if (tradePoolEventRepository.findById(poolExchangeRateUpdated.getTradePoolEventId()).isPresent()) {
            return;
        }
        tradePoolEventRepository.save(poolExchangeRateUpdated);
    }

    @Transactional
    public void pullPoolXTokenAddedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getPoolXTokenAddedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<PoolXTokenAdded> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.TRADE_POOL_MODULE_POOL_X_TOKEN_ADDED,
                    cursor, limit, false, PoolXTokenAdded.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<PoolXTokenAdded> eventEnvelope : eventPage.getData()) {
                    savePoolXTokenAdded(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getPoolXTokenAddedEventNextCursor() {
        AbstractTradePoolEvent lastEvent = tradePoolEventRepository.findFirstPoolXTokenAddedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void savePoolXTokenAdded(SuiMoveEventEnvelope<PoolXTokenAdded> eventEnvelope) {
        AbstractTradePoolEvent.PoolXTokenAdded poolXTokenAdded = DomainBeanUtils.toPoolXTokenAdded(eventEnvelope);
        if (tradePoolEventRepository.findById(poolXTokenAdded.getTradePoolEventId()).isPresent()) {
            return;
        }
        tradePoolEventRepository.save(poolXTokenAdded);
    }

    @Transactional
    public void pullPoolXTokenRemovedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getPoolXTokenRemovedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<PoolXTokenRemoved> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.TRADE_POOL_MODULE_POOL_X_TOKEN_REMOVED,
                    cursor, limit, false, PoolXTokenRemoved.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<PoolXTokenRemoved> eventEnvelope : eventPage.getData()) {
                    savePoolXTokenRemoved(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getPoolXTokenRemovedEventNextCursor() {
        AbstractTradePoolEvent lastEvent = tradePoolEventRepository.findFirstPoolXTokenRemovedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void savePoolXTokenRemoved(SuiMoveEventEnvelope<PoolXTokenRemoved> eventEnvelope) {
        AbstractTradePoolEvent.PoolXTokenRemoved poolXTokenRemoved = DomainBeanUtils.toPoolXTokenRemoved(eventEnvelope);
        if (tradePoolEventRepository.findById(poolXTokenRemoved.getTradePoolEventId()).isPresent()) {
            return;
        }
        tradePoolEventRepository.save(poolXTokenRemoved);
    }

    @Transactional
    public void pullPoolYReserveDepositedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getPoolYReserveDepositedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<PoolYReserveDeposited> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.TRADE_POOL_MODULE_POOL_Y_RESERVE_DEPOSITED,
                    cursor, limit, false, PoolYReserveDeposited.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<PoolYReserveDeposited> eventEnvelope : eventPage.getData()) {
                    savePoolYReserveDeposited(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getPoolYReserveDepositedEventNextCursor() {
        AbstractTradePoolEvent lastEvent = tradePoolEventRepository.findFirstPoolYReserveDepositedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void savePoolYReserveDeposited(SuiMoveEventEnvelope<PoolYReserveDeposited> eventEnvelope) {
        AbstractTradePoolEvent.PoolYReserveDeposited poolYReserveDeposited = DomainBeanUtils.toPoolYReserveDeposited(eventEnvelope);
        if (tradePoolEventRepository.findById(poolYReserveDeposited.getTradePoolEventId()).isPresent()) {
            return;
        }
        tradePoolEventRepository.save(poolYReserveDeposited);
    }

    @Transactional
    public void pullPoolYReserveWithdrawnEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getPoolYReserveWithdrawnEventNextCursor();
        while (true) {
            PaginatedMoveEvents<PoolYReserveWithdrawn> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.TRADE_POOL_MODULE_POOL_Y_RESERVE_WITHDRAWN,
                    cursor, limit, false, PoolYReserveWithdrawn.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<PoolYReserveWithdrawn> eventEnvelope : eventPage.getData()) {
                    savePoolYReserveWithdrawn(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getPoolYReserveWithdrawnEventNextCursor() {
        AbstractTradePoolEvent lastEvent = tradePoolEventRepository.findFirstPoolYReserveWithdrawnByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void savePoolYReserveWithdrawn(SuiMoveEventEnvelope<PoolYReserveWithdrawn> eventEnvelope) {
        AbstractTradePoolEvent.PoolYReserveWithdrawn poolYReserveWithdrawn = DomainBeanUtils.toPoolYReserveWithdrawn(eventEnvelope);
        if (tradePoolEventRepository.findById(poolYReserveWithdrawn.getTradePoolEventId()).isPresent()) {
            return;
        }
        tradePoolEventRepository.save(poolYReserveWithdrawn);
    }

    @Transactional
    public void pullPoolDestroyedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getPoolDestroyedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<PoolDestroyed> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.TRADE_POOL_MODULE_POOL_DESTROYED,
                    cursor, limit, false, PoolDestroyed.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<PoolDestroyed> eventEnvelope : eventPage.getData()) {
                    savePoolDestroyed(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getPoolDestroyedEventNextCursor() {
        AbstractTradePoolEvent lastEvent = tradePoolEventRepository.findFirstPoolDestroyedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void savePoolDestroyed(SuiMoveEventEnvelope<PoolDestroyed> eventEnvelope) {
        AbstractTradePoolEvent.PoolDestroyed poolDestroyed = DomainBeanUtils.toPoolDestroyed(eventEnvelope);
        if (tradePoolEventRepository.findById(poolDestroyed.getTradePoolEventId()).isPresent()) {
            return;
        }
        tradePoolEventRepository.save(poolDestroyed);
    }

    @Transactional
    public void pullPoolYSwappedForXEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getPoolYSwappedForXEventNextCursor();
        while (true) {
            PaginatedMoveEvents<PoolYSwappedForX> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.TRADE_POOL_MODULE_POOL_Y_SWAPPED_FOR_X,
                    cursor, limit, false, PoolYSwappedForX.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<PoolYSwappedForX> eventEnvelope : eventPage.getData()) {
                    savePoolYSwappedForX(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getPoolYSwappedForXEventNextCursor() {
        AbstractTradePoolEvent lastEvent = tradePoolEventRepository.findFirstPoolYSwappedForXByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void savePoolYSwappedForX(SuiMoveEventEnvelope<PoolYSwappedForX> eventEnvelope) {
        AbstractTradePoolEvent.PoolYSwappedForX poolYSwappedForX = DomainBeanUtils.toPoolYSwappedForX(eventEnvelope);
        if (tradePoolEventRepository.findById(poolYSwappedForX.getTradePoolEventId()).isPresent()) {
            return;
        }
        tradePoolEventRepository.save(poolYSwappedForX);
    }

    @Transactional
    public void pullPoolXSwappedForYEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getPoolXSwappedForYEventNextCursor();
        while (true) {
            PaginatedMoveEvents<PoolXSwappedForY> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.TRADE_POOL_MODULE_POOL_X_SWAPPED_FOR_Y,
                    cursor, limit, false, PoolXSwappedForY.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<PoolXSwappedForY> eventEnvelope : eventPage.getData()) {
                    savePoolXSwappedForY(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getPoolXSwappedForYEventNextCursor() {
        AbstractTradePoolEvent lastEvent = tradePoolEventRepository.findFirstPoolXSwappedForYByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void savePoolXSwappedForY(SuiMoveEventEnvelope<PoolXSwappedForY> eventEnvelope) {
        AbstractTradePoolEvent.PoolXSwappedForY poolXSwappedForY = DomainBeanUtils.toPoolXSwappedForY(eventEnvelope);
        if (tradePoolEventRepository.findById(poolXSwappedForY.getTradePoolEventId()).isPresent()) {
            return;
        }
        tradePoolEventRepository.save(poolXSwappedForY);
    }


    private String getDefaultSuiPackageId() {
        return suiPackageRepository.findById(ContractConstants.DEFAULT_SUI_PACKAGE_NAME)
                .map(SuiPackage::getObjectId).orElse(null);
    }
}
