// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module sui_swap_example::exchange_aggregate {
    use std::string::String;
    use sui::object::ID;
    use sui::tx_context;
    use sui_swap_example::exchange;
    use sui_swap_example::exchange_add_buy_pool_logic;
    use sui_swap_example::exchange_add_sell_pool_logic;
    use sui_swap_example::exchange_add_token_pair_logic;
    use sui_swap_example::exchange_add_trade_pool_logic;
    use sui_swap_example::exchange_update_logic;

    friend sui_swap_example::token_pair_initialize_liquidity_logic;
    friend sui_swap_example::trade_pool_initialize_trade_pool_logic;
    friend sui_swap_example::trade_pool_initialize_sell_pool_logic;
    friend sui_swap_example::trade_pool_initialize_buy_pool_logic;
    friend sui_swap_example::token_pair_service;
    friend sui_swap_example::token_pair_service_process;
    friend sui_swap_example::trade_pool_service;
    friend sui_swap_example::sell_pool_service;
    friend sui_swap_example::sell_pool_service_process;
    friend sui_swap_example::buy_pool_service;
    friend sui_swap_example::buy_pool_service_process;
    friend sui_swap_example::nft_service;

    const EInvalidAdminCap: u64 = 50;

    #[allow(unused_mut_parameter)]
    public(friend) fun add_token_pair<X: key + store, Y>(
        exchange: &mut exchange::Exchange,
        token_pair_id: ID,
        ctx: &mut tx_context::TxContext,
    ) {
        exchange::assert_schema_version(exchange);
        let token_pair_added_to_exchange = exchange_add_token_pair_logic::verify<X, Y>(
            token_pair_id,
            exchange,
            ctx,
        );
        exchange_add_token_pair_logic::mutate<X, Y>(
            &token_pair_added_to_exchange,
            exchange,
            ctx,
        );
        exchange::update_object_version(exchange);
        exchange::emit_token_pair_added_to_exchange(token_pair_added_to_exchange);
    }

    #[allow(unused_mut_parameter)]
    public(friend) fun add_trade_pool<X: key + store, Y>(
        exchange: &mut exchange::Exchange,
        trade_pool_id: ID,
        ctx: &mut tx_context::TxContext,
    ) {
        exchange::assert_schema_version(exchange);
        let trade_pool_added_to_exchange = exchange_add_trade_pool_logic::verify<X, Y>(
            trade_pool_id,
            exchange,
            ctx,
        );
        exchange_add_trade_pool_logic::mutate<X, Y>(
            &trade_pool_added_to_exchange,
            exchange,
            ctx,
        );
        exchange::update_object_version(exchange);
        exchange::emit_trade_pool_added_to_exchange(trade_pool_added_to_exchange);
    }

    #[allow(unused_mut_parameter)]
    public(friend) fun add_sell_pool<X: key + store, Y>(
        exchange: &mut exchange::Exchange,
        sell_pool_id: ID,
        ctx: &mut tx_context::TxContext,
    ) {
        exchange::assert_schema_version(exchange);
        let sell_pool_added_to_exchange = exchange_add_sell_pool_logic::verify<X, Y>(
            sell_pool_id,
            exchange,
            ctx,
        );
        exchange_add_sell_pool_logic::mutate<X, Y>(
            &sell_pool_added_to_exchange,
            exchange,
            ctx,
        );
        exchange::update_object_version(exchange);
        exchange::emit_sell_pool_added_to_exchange(sell_pool_added_to_exchange);
    }

    #[allow(unused_mut_parameter)]
    public(friend) fun add_buy_pool<X: key + store, Y>(
        exchange: &mut exchange::Exchange,
        buy_pool_id: ID,
        ctx: &mut tx_context::TxContext,
    ) {
        exchange::assert_schema_version(exchange);
        let buy_pool_added_to_exchange = exchange_add_buy_pool_logic::verify<X, Y>(
            buy_pool_id,
            exchange,
            ctx,
        );
        exchange_add_buy_pool_logic::mutate<X, Y>(
            &buy_pool_added_to_exchange,
            exchange,
            ctx,
        );
        exchange::update_object_version(exchange);
        exchange::emit_buy_pool_added_to_exchange(buy_pool_added_to_exchange);
    }

    public entry fun update(
        exchange: &mut exchange::Exchange,
        admin_cap: &exchange::AdminCap,
        name: String,
        ctx: &mut tx_context::TxContext,
    ) {
        assert!(exchange::admin_cap(exchange) == sui::object::id(admin_cap), EInvalidAdminCap);
        exchange::assert_schema_version(exchange);
        let exchange_updated = exchange_update_logic::verify(
            name,
            exchange,
            ctx,
        );
        exchange_update_logic::mutate(
            &exchange_updated,
            exchange,
            ctx,
        );
        exchange::update_object_version(exchange);
        exchange::emit_exchange_updated(exchange_updated);
    }

}
