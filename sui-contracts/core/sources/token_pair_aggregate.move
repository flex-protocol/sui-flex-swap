// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module sui_swap_example::token_pair_aggregate {
    use sui::balance::Balance;
    use sui::object::ID;
    use sui::tx_context;
    use sui_swap_example::exchange::Exchange;
    use sui_swap_example::liquidity_token::LiquidityToken;
    use sui_swap_example::token_pair;
    use sui_swap_example::token_pair_add_liquidity_logic;
    use sui_swap_example::token_pair_destroy_logic;
    use sui_swap_example::token_pair_initialize_liquidity_logic;
    use sui_swap_example::token_pair_remove_liquidity_logic;
    use sui_swap_example::token_pair_swap_x_logic;
    use sui_swap_example::token_pair_swap_y_logic;

    friend sui_swap_example::token_pair_service;
    friend sui_swap_example::token_pair_service_process;
    friend sui_swap_example::sell_pool_service;
    friend sui_swap_example::nft_service;

    #[allow(unused_mut_parameter)]
    public(friend) fun initialize_liquidity<X: key + store, Y>(
        exchange: &mut Exchange,
        x: X,
        x_amount: u64,
        y_amount: Balance<Y>,
        ctx: &mut tx_context::TxContext,
    ) {
        let liquidity_initialized = token_pair_initialize_liquidity_logic::verify<X, Y>(
            exchange,
            &x,
            x_amount,
            &y_amount,
            ctx,
        );
        let token_pair = token_pair_initialize_liquidity_logic::mutate<X, Y>(
            &liquidity_initialized,
            x,
            y_amount,
            exchange,
            ctx,
        );
        token_pair::set_liquidity_initialized_id(&mut liquidity_initialized, token_pair::id(&token_pair));
        token_pair::share_object(token_pair);
        token_pair::emit_liquidity_initialized(liquidity_initialized);
    }

    #[allow(unused_mut_parameter)]
    public(friend) fun add_liquidity<X: key + store, Y>(
        token_pair: &mut token_pair::TokenPair<X, Y>,
        liquidity_token: &LiquidityToken<X, Y>,
        x: X,
        x_amount: u64,
        y_amount: Balance<Y>,
        ctx: &mut tx_context::TxContext,
    ) {
        token_pair::assert_schema_version(token_pair);
        let liquidity_added = token_pair_add_liquidity_logic::verify<X, Y>(
            liquidity_token,
            &x,
            x_amount,
            &y_amount,
            token_pair,
            ctx,
        );
        token_pair_add_liquidity_logic::mutate<X, Y>(
            &liquidity_added,
            x,
            y_amount,
            token_pair,
            ctx,
        );
        token_pair::update_object_version(token_pair);
        token_pair::emit_liquidity_added(liquidity_added);
    }

    #[allow(unused_mut_parameter)]
    public fun remove_liquidity<X: key + store, Y>(
        token_pair: &mut token_pair::TokenPair<X, Y>,
        liquidity_token: &LiquidityToken<X, Y>,
        x_id: ID,
        ctx: &mut tx_context::TxContext,
    ): (X, Balance<Y>) {
        token_pair::assert_schema_version(token_pair);
        let liquidity_removed = token_pair_remove_liquidity_logic::verify<X, Y>(
            liquidity_token,
            x_id,
            token_pair,
            ctx,
        );
        let (remove_liquidity_return_1, remove_liquidity_return_2) = token_pair_remove_liquidity_logic::mutate<X, Y>(
            &liquidity_removed,
            token_pair,
            ctx,
        );
        token_pair::update_object_version(token_pair);
        token_pair::emit_liquidity_removed(liquidity_removed);
        (remove_liquidity_return_1, remove_liquidity_return_2)
    }

    #[allow(unused_mut_parameter)]
    public entry fun destroy<X: key + store, Y>(
        token_pair: token_pair::TokenPair<X, Y>,
        liquidity_token: &LiquidityToken<X, Y>,
        ctx: &mut tx_context::TxContext,
    ) {
        token_pair::assert_schema_version(&token_pair);
        let token_pair_destroyed = token_pair_destroy_logic::verify<X, Y>(
            liquidity_token,
            &token_pair,
            ctx,
        );
        let updated_token_pair = token_pair_destroy_logic::mutate<X, Y>(
            &token_pair_destroyed,
            token_pair,
            ctx,
        );
        token_pair::drop_token_pair(updated_token_pair);
        token_pair::emit_token_pair_destroyed(token_pair_destroyed);
    }

    #[allow(unused_mut_parameter)]
    public(friend) fun swap_x<X: key + store, Y>(
        token_pair: &mut token_pair::TokenPair<X, Y>,
        x: X,
        x_amount: u64,
        expected_y_amount_out: u64,
        ctx: &mut tx_context::TxContext,
    ): Balance<Y> {
        token_pair::assert_schema_version(token_pair);
        let x_swapped_for_y = token_pair_swap_x_logic::verify<X, Y>(
            &x,
            x_amount,
            expected_y_amount_out,
            token_pair,
            ctx,
        );
        let swap_x_return = token_pair_swap_x_logic::mutate<X, Y>(
            &x_swapped_for_y,
            x,
            token_pair,
            ctx,
        );
        token_pair::update_object_version(token_pair);
        token_pair::emit_x_swapped_for_y(x_swapped_for_y);
        swap_x_return
    }

    #[allow(unused_mut_parameter)]
    public fun swap_y<X: key + store, Y>(
        token_pair: &mut token_pair::TokenPair<X, Y>,
        y_amount: Balance<Y>,
        x_id: ID,
        ctx: &mut tx_context::TxContext,
    ): X {
        token_pair::assert_schema_version(token_pair);
        let y_swapped_for_x = token_pair_swap_y_logic::verify<X, Y>(
            &y_amount,
            x_id,
            token_pair,
            ctx,
        );
        let swap_y_return = token_pair_swap_y_logic::mutate<X, Y>(
            &y_swapped_for_x,
            y_amount,
            token_pair,
            ctx,
        );
        token_pair::update_object_version(token_pair);
        token_pair::emit_y_swapped_for_x(y_swapped_for_x);
        swap_y_return
    }

}
